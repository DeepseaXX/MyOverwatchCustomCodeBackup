settings
{
	main
	{
		Description: "★ Find items from the list and press [F] (Interact)\r\n\r\n★ Set medium or higher model detail settings to see all items (Options > Video > Graphics quality > Advanced > Model Detail)\r\n\r\n★ List of items:\r\n\r\n6 potted plants\r\n4 pairs of chopsticks\r\n6 flashlights\r\n9 single green gas cylinders\r\n7 hooks\r\n6 black buckets\r\n6 drills\r\n9 Overwatch symbols on the walls\r\n\r\n★ Try more than 50 interesting maps:\r\nbit.do/finditems"
		Mode Name: "Find Items ★ Gibraltar"
	}

	lobby
	{
		Map Rotation: Paused
		Max Spectators: 0
		Max Team 1 Players: 0
		Max Team 2 Players: 6
		Return To Lobby: Never
		Swap Teams After Match: No
	}

	modes
	{
		Skirmish
		{
			enabled maps
			{
				Watchpoint: Gibraltar 0
			}
		}

		General
		{
			Allow Hero Switching: Off
			Game Mode Start: Immediately
			Hero Limit: Off
			Kill Cam: Off
			Kill Feed: Off
			Respawn As Random Hero: On
			Respawn Time Scalar: 0%
			Spawn Health Packs: Disabled
		}
	}

	heroes
	{
		General
		{
			Ability Cooldown Time: 50%
			Movement Speed: 110%
			Primary Fire: Off
			Quick Melee: Off
			Receive Headshots Only: On
			Ultimate Generation: 10%
			Ultimate Generation - Combat: 0%
			Ultimate Generation - Passive: 0%

			Ana
			{
				Biotic Grenade: Off
				Primary Fire: Off
				Quick Melee: Off
				Sleep Dart: Off
				Ultimate Ability Nano Boost: Off
			}

			Ashe
			{
				Coach Gun: Off
				Dynamite: Off
				Primary Fire: Off
				Quick Melee: Off
				Ultimate Ability B.O.B.: Off
			}

			Baptiste
			{
				Immortality Field: Off
				Primary Fire: Off
				Quick Melee: Off
				Regenerative Burst: Off
				Secondary Fire: Off
				Ultimate Ability Amplification Matrix: Off
			}

			Bastion
			{
				A-36 Tactical Grenade: Off
				Primary Fire: Off
				Quick Melee: Off
				Reconfigure: Off
				Ultimate Ability Configuration: Artillery: Off
			}

			Brigitte
			{
				Barrier Shield: Off
				Primary Fire: Off
				Quick Melee: Off
				Repair Pack: Off
				Shield Bash: Off
				Ultimate Ability Rally: Off
				Whip Shot: Off
			}

			Cassidy
			{
				Combat Roll: Off
				Magnetic Grenade: Off
				Primary Fire: Off
				Quick Melee: Off
				Secondary Fire: Off
				Ultimate Ability Deadeye: Off
			}

			D.Va
			{
				Boosters: Off
				Defense Matrix: Off
				Micro Missiles: Off
				Primary Fire: Off
				Quick Melee: Off
				Ultimate Ability Self-Destruct: Off
			}

			Doomfist
			{
				Power Block: Off
				Primary Fire: Off
				Quick Melee: Off
				Rocket Punch: Off
				Seismic Slam: Off
				Ultimate Ability Meteor Strike: Off
			}

			Genji
			{
				Deflect: Off
				Primary Fire: Off
				Quick Melee: Off
				Secondary Fire: Off
				Swift Strike: Off
				Ultimate Ability Dragonblade: Off
			}

			Hanzo
			{
				Lunge: Off
				Primary Fire: Off
				Quick Melee: Off
				Sonic Arrow: Off
				Storm Arrows: Off
				Ultimate Ability Dragonstrike: Off
			}

			Junkrat
			{
				Concussion Mine: Off
				Primary Fire: Off
				Quick Melee: Off
				Steel Trap: Off
				Ultimate Ability RIP-Tire: Off
			}

			Lúcio
			{
				Amp It Up: Off
				Crossfade: Off
				Primary Fire: Off
				Quick Melee: Off
				Soundwave: Off
				Ultimate Ability Sound Barrier: Off
			}

			Mei
			{
				Cryo-Freeze: Off
				Ice Wall: Off
				Primary Fire: Off
				Quick Melee: Off
				Secondary Fire: Off
				Ultimate Ability Blizzard: Off
			}

			Mercy
			{
				Guardian Angel: Off
				Primary Fire: Off
				Quick Melee: Off
				Regeneration: Off
				Resurrect: Off
				Secondary Fire: Off
				Ultimate Ability Valkyrie: Off
			}

			Moira
			{
				Biotic Orb: Off
				Fade: Off
				Primary Fire: Off
				Quick Melee: Off
				Secondary Fire: Off
				Ultimate Ability Coalescence: Off
			}

			Orisa
			{
				Energy Javelin: Off
				Fortify: Off
				Javelin Spin: Off
				Primary Fire: Off
				Quick Melee: Off
				Ultimate Ability Terra Surge: Off
			}

			Pharah
			{
				Concussive Blast: Off
				Hover Jets: Off
				Jump Jet: Off
				Primary Fire: Off
				Quick Melee: Off
				Ultimate Ability Barrage: Off
			}

			Reaper
			{
				Primary Fire: Off
				Quick Melee: Off
				Shadow Step: Off
				Ultimate Ability Death Blossom: Off
				Wraith Form: Off
			}

			Reinhardt
			{
				Barrier Field: Off
				Charge: Off
				Fire Strike: Off
				Primary Fire: Off
				Quick Melee: Off
				Ultimate Ability Earthshatter: Off
			}

			Roadhog
			{
				Chain Hook: Off
				Primary Fire: Off
				Quick Melee: Off
				Secondary Fire: Off
				Take a Breather: Off
				Ultimate Ability Whole Hog: Off
			}

			Soldier: 76
			{
				Biotic Field: Off
				Helix Rockets: Off
				Primary Fire: Off
				Quick Melee: Off
				Sprint: Off
				Ultimate Ability Tactical Visor: Off
			}

			Sombra
			{
				Hack: Off
				Primary Fire: Off
				Quick Melee: Off
				Stealth: Off
				Translocator: Off
				Ultimate Ability EMP: Off
			}

			Symmetra
			{
				Primary Fire: Off
				Quick Melee: Off
				Secondary Fire: Off
				Sentry Turret: Off
				Teleporter: Off
				Ultimate Ability Photon Barrier: Off
			}

			Torbjörn
			{
				Deploy Turret: Off
				Overload: Off
				Primary Fire: Off
				Quick Melee: Off
				Secondary Fire: Off
				Ultimate Ability Molten Core: Off
			}

			Tracer
			{
				Blink: Off
				Primary Fire: Off
				Quick Melee: Off
				Recall: Off
				Ultimate Ability Pulse Bomb: Off
			}

			Widowmaker
			{
				Grappling Hook: Off
				Primary Fire: Off
				Quick Melee: Off
				Ultimate Ability Infra-Sight: Off
				Venom Mine: Off
			}

			Winston
			{
				Barrier Projector: Off
				Jump Pack: Off
				Primary Fire: Off
				Quick Melee: Off
				Ultimate Ability Primal Rage: Off
			}

			Wrecking Ball
			{
				Adaptive Shield: Off
				Grappling Claw: Off
				Piledriver: Off
				Primary Fire: Off
				Quick Melee: Off
				Roll: Off
				Ultimate Ability Minefield: Off
			}

			Zarya
			{
				No Ammunition Requirement: On
				Particle Barrier: Off
				Primary Fire: Off
				Projected Barrier: Off
				Quick Melee: Off
				Secondary Fire: Off
			}

			Zenyatta
			{
				Orb of Discord: Off
				Orb of Harmony: Off
				Primary Fire: Off
				Quick Melee: Off
				Secondary Fire: Off
			}

			enabled heroes
			{
				Zenyatta
			}
		}
	}
}

variables
{
	player:
		26: AA
}

rule("// copy and paste the following line into the game title:")
{
	event
	{
		Ongoing - Global;
	}
}

rule("★ Find 53 items in Gibraltar ★")
{
	event
	{
		Ongoing - Global;
	}
}

rule("// don't add spectators, they see all spoilers!")
{
	event
	{
		Ongoing - Global;
	}
}

rule("// \"Find Items\" ver. 2.2")
{
	event
	{
		Ongoing - Global;
	}
}

rule("// all maps and additional info: bit.do/finditems")
{
	event
	{
		Ongoing - Global;
	}
}

rule("// original mode is made by Foren#2660")
{
	event
	{
		Ongoing - Global;
	}
}

rule("beginning of the game")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Set Match Time(3600);
		Global.N = 1;
		Global.G = 0;
		Global.H = Vector(0, -99, 0);
		Global.T = -1;
		Global.Q = 0;
	}
}

rule("Gibraltar  ===================================================================")
{
	event
	{
		Ongoing - Global;
	}
}

rule("potted plants")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.G += 1;
		Global.I = 0;
		Global.A[Global.N] = Vector(11.330, 7.620, -156.710);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(11.190, 8.430, -162.110);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(13.520, 8.930, -159.930);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(13.680, 8.930, -159.630);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(14.020, 9, -159.430);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(14.620, 6.640, -126.530);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.C[Global.G] = Global.I;
	}
}

rule("pairs of chopsticks")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.G += 1;
		Global.I = 0;
		Global.A[Global.N] = Vector(13.100, 7.110, -154.140);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(5.450, 7.160, -130.270);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(-3.350, 1.020, -145.100);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(74.890, -8.880, -39.800);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.C[Global.G] = Global.I;
	}
}

rule("flashlights")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.G += 1;
		Global.I = 0;
		Global.A[Global.N] = Vector(25.340, -1.239, -129.641);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(19.131, -0.086, -111.972);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(41.551, -4.784, -59.419);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(56.488, -4.283, -48.990);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(46.719, 1.240, 26.017);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(96.591, -2.819, 24.039);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.C[Global.G] = Global.I;
	}
}

rule("single green gas cylinders")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.G += 1;
		Global.I = 0;
		Global.A[Global.N] = Vector(54.776, 1.578, -113.525);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(-2.831, 0.576, -164.071);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(47.907, -9.361, -91.880);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(46.174, 1.627, 17.133);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(4.402, -1.589, -91.155);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(89.283, 1.613, 26.090);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(61.646, -2.398, -12.311);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(62.613, 1.642, 34.599);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(6.100, 0.600, -144.700);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.C[Global.G] = Global.I;
	}
}

rule("hooks")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.G += 1;
		Global.I = 0;
		Global.A[Global.N] = Vector(58.562, -2.420, -41.938);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(30.091, -3.816, -53.578);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(-3.781, 2.251, -169.657);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(-3.640, 6.239, -169.541);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(29.958, -0.359, -53.726);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(58.505, -0.233, -41.775);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(-0.628, 5.952, -164.993);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.C[Global.G] = Global.I;
	}
}

rule("black buckets")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.G += 1;
		Global.I = 0;
		Global.A[Global.N] = Vector(44.781, -4.389, -49.356);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(34.902, -10.496, -92.741);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(19.975, -10.394, -105.764);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(75.432, -2.629, -9.641);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(78.080, 1.590, 19.630);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(41.350, -4.360, -52.410);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.C[Global.G] = Global.I;
	}
}

rule("drills")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.G += 1;
		Global.I = 0;
		Global.A[Global.N] = Vector(29.030, 4.460, -112.580);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(34.590, -4.250, -78.800);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(42.220, -4.810, -54.220);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(42.500, -4.630, -53.950);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(80.510, 1.800, 19.820);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(4.120, 3.770, -75.340);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.C[Global.G] = Global.I;
	}
}

rule("overwatch symbols on the walls")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.G += 1;
		Global.I = 0;
		Global.A[Global.N] = Vector(85.250, -8.064, 31.637);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(75.443, -1.434, -23.087);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(49.953, -1.494, -18.101);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(47.676, -2.100, -111.316);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(31.467, -3.328, -66.761);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(44.216, -2.785, -153.848);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(35.822, 5.589, -123.824);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(30.531, -3.248, -79.657);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.A[Global.N] = Vector(-16.110, 7.250, -151.190);
		Global.X[Global.N] = Global.G;
		Global.I += 1;
		Global.N += 1;
		Global.C[Global.G] = Global.I;
	}
}

rule("teleports Gibraltar")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.P[1] = Vector(40.630, -3.460, -35.260);
		Create Effect(All Players(All Teams), Ring, Color(Blue), Global.P[1], 1.200, Visible To);
		Global.P[2] = Vector(43.247, -4.309, -32.662);
		Create Effect(All Players(All Teams), Ring, Color(Blue), Global.P[2], 1.200, Visible To);
		Global.P[3] = Vector(63.254, -3.451, -57.919);
		Create Effect(All Players(All Teams), Ring, Color(Blue), Global.P[3], 1.200, Visible To);
		Global.P[4] = Vector(65.955, -4.349, -55.251);
		Create Effect(All Players(All Teams), Ring, Color(Blue), Global.P[4], 1.200, Visible To);
		Global.P[5] = Vector(92.796, -1.090, -6.888);
		Create Effect(All Players(All Teams), Ring, Color(Blue), Global.P[5], 1.500, Visible To);
		Global.P[6] = Vector(95.259, -0.451, -4.419);
		Create Effect(All Players(All Teams), Ring, Color(Blue), Global.P[6], 1.500, Visible To);
		Global.P[7] = Vector(106.624, -0.451, -15.685);
		Create Effect(All Players(All Teams), Ring, Color(Blue), Global.P[7], 1.500, Visible To);
		Global.P[8] = Vector(103.883, -0.840, -18.435);
		Create Effect(All Players(All Teams), Ring, Color(Blue), Global.P[8], 1.500, Visible To);
		Global.P[9] = Vector(91.145, 0.609, 31.467);
		Create Effect(All Players(All Teams), Ring, Color(Blue), Global.P[9], 1.200, Visible To);
		Global.P[10] = Vector(93.766, -0.231, 28.816);
		Create Effect(All Players(All Teams), Ring, Color(Blue), Global.P[10], 1.200, Visible To);
		Global.P[11] = Vector(59.934, 1.806, 51.120);
		Create Effect(All Players(All Teams), Ring, Color(Blue), Global.P[11], 1.200, Visible To);
		Global.P[12] = Vector(62.447, 2.549, 48.578);
		Create Effect(All Players(All Teams), Ring, Color(Blue), Global.P[12], 1.200, Visible To);
	}
}

rule("I=============================================================================")
{
	event
	{
		Ongoing - Global;
	}
}

rule("calculating total number of items")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.O == Null;
	}

	actions
	{
		Global.O = Global.N - 1;
	}
}

rule("player found item")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Has Status(Event Player, Frozen) == False;
		Event Player.Z == Null;
	}

	actions
	{
		Skip If(Event Player.L != Null, 1);
		Event Player.L = 1;
		Skip If(Global.A[Event Player.L] == Null, 18);
		Skip If(Event Player.F[Event Player.L] == True, 17);
		Skip If(Distance Between(Event Player, Global.A[Event Player.L]) > 3, 16);
		Event Player.O = Global.X[Event Player.L];
		Event Player.Z = Global.A[Event Player.L];
		Modify Global Variable At Index(D, Event Player.L, Append To Array, Event Player);
		Event Player.K = Global.A[Event Player.L];
		Event Player.Q += 1;
		Event Player.F[Event Player.L] = True;
		Event Player.G[Global.X[Event Player.L]] += 1;
		Event Player.M = Event Player.L;
		Skip If(Event Player.Q == Global.O, 1);
		Small Message(Event Player, String("{0} / {1}", Event Player.G[Global.X[Event Player.M]], Global.C[Global.X[Event Player.M]]));
		Skip If(Event Player.G[Event Player.O] < Global.C[Event Player.O], 4);
		Event Player.A = Global.X[Event Player.L];
		Play Effect(Event Player, Ring Explosion, Color(Purple), Event Player.Z, 7);
		Play Effect(Event Player, Buff Impact Sound, Color(White), Event Player, 30);
		Play Effect(Event Player, Good Pickup Effect, Color(Purple), Event Player.Z, 1);
		Event Player.L = 999;
		Event Player.L += 1;
		Skip If(Event Player.L >= Global.O - 4, 8);
		Skip If(Distance Between(Event Player, Global.A[Event Player.L]) <= 3, 1);
		Event Player.L += 1;
		Skip If(Distance Between(Event Player, Global.A[Event Player.L]) <= 3, 1);
		Event Player.L += 1;
		Skip If(Distance Between(Event Player, Global.A[Event Player.L]) <= 3, 1);
		Event Player.L += 1;
		Skip If(Distance Between(Event Player, Global.A[Event Player.L]) <= 3, 1);
		Event Player.L += 1;
		Wait(0.001, Ignore Condition);
		Skip If(Event Player.L != Global.O + 1, 1);
		Event Player.J = True;
		Loop If(Event Player.L <= Global.O);
		Event Player.L = 1;
	}
}

rule("playing yellow effects")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Z != Null;
	}

	actions
	{
		Play Effect(Event Player, Ring Explosion, Color(Yellow), Event Player.Z, 3);
		Play Effect(Event Player, Buff Explosion Sound, Color(Yellow), Event Player, 20);
		Wait(0.250, Ignore Condition);
		Event Player.Z = Null;
		Skip If(Event Player.Q < Global.O, 4);
		Destroy HUD Text(Event Player.W[1]);
		Create HUD Text(All Players(All Teams), Null, Null, String("{0} {1} {2}", String("{0} {1}", Hero Icon String(Hero Of(
			Event Player)), Event Player), String("Found"), String("{0} / {1}", Event Player.Q, Global.O)), Right, 60 - Event Player.Q,
			Color(White), Color(White), Color(Green), Visible To and String, Default Visibility);
		Event Player.W[1] = Last Text ID;
		Abort;
		Destroy HUD Text(Event Player.W[1]);
		Create HUD Text(All Players(All Teams), Null, Null, String("{0} {1} {2}", String("{0} {1}", Hero Icon String(Hero Of(
			Event Player)), Event Player), String("Found"), String("{0} / {1}", Event Player.Q, Global.O)), Right, 60 - Event Player.Q,
			Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.W[1] = Last Text ID;
	}
}

rule("player spawn")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Disable Game Mode HUD(Event Player);
		Disable Hero HUD(Event Player);
		Event Player.Q = 0;
		Modify Global Variable(S, Append To Array, Event Player);
		Create HUD Text(All Players(All Teams), Null, Null, String("{0} {1} {2}", String("{0} {1}", Hero Icon String(Hero Of(
			Event Player)), Event Player), String("Found"), String("{0} / {1}", Event Player.Q, Global.O)), Right, 60, Color(White), Color(
			White), Color(White), Visible To and String, Default Visibility);
		Event Player.W[1] = Last Text ID;
		Event Player.J = False;
		Event Player.T = 0;
		Set Invisible(Event Player, All);
		Event Player.S = 150;
		Set Status(Event Player, Null, Invincible, 9999);
		Create Effect(Event Player, Sparkles, Color(Yellow), Event Player.K, 2, Visible To Position and Radius);
		Global.T = 0;
		Global.Q = 0;
		Event Player.K = Vector(0, -99, 0);
		Wait(15, Ignore Condition);
		Small Message(Event Player, String("{0} - {1}", Custom String("[SHIFT]"), String("Run")));
	}
}

rule("creating HUD text 1-5")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Skip If(Global.G < 1, 2);
		Create HUD Text(Event Player, String("{0} / {1}", Event Player.G[1], Global.C[1]), Null, Custom String("potted plants"), Left, 1,
			Color(Yellow), Color(White), Color(White), Visible To and String, Visible Never);
		Event Player.E[1] = Last Text ID;
		Skip If(Global.G < 2, 2);
		Create HUD Text(Event Player, String("{0} / {1}", Event Player.G[2], Global.C[2]), Null, Custom String("pairs of chopsticks"),
			Left, 2, Color(Yellow), Color(White), Color(White), Visible To and String, Visible Never);
		Event Player.E[2] = Last Text ID;
		Skip If(Global.G < 3, 2);
		Create HUD Text(Event Player, String("{0} / {1}", Event Player.G[3], Global.C[3]), Null, Custom String("flashlights"), Left, 3,
			Color(Yellow), Color(White), Color(White), Visible To and String, Visible Never);
		Event Player.E[3] = Last Text ID;
		Skip If(Global.G < 4, 2);
		Create HUD Text(Event Player, String("{0} / {1}", Event Player.G[4], Global.C[4]), Null, Custom String(
			"single green gas cylinders"), Left, 4, Color(Yellow), Color(White), Color(White), Visible To and String, Visible Never);
		Event Player.E[4] = Last Text ID;
		Skip If(Global.G < 5, 2);
		Create HUD Text(Event Player, String("{0} / {1}", Event Player.G[5], Global.C[5]), Null, Custom String("hooks"), Left, 5, Color(
			Yellow), Color(White), Color(White), Visible To and String, Visible Never);
		Event Player.E[5] = Last Text ID;
		Skip If(Global.G < 6, 2);
		Create HUD Text(Event Player, String("{0} / {1}", Event Player.G[6], Global.C[6]), Null, Custom String("black buckets"), Left, 6,
			Color(Yellow), Color(White), Color(White), Visible To and String, Visible Never);
		Event Player.E[6] = Last Text ID;
		Skip If(Global.G < 7, 2);
		Create HUD Text(Event Player, String("{0} / {1}", Event Player.G[7], Global.C[7]), Null, Custom String("drills"), Left, 7, Color(
			Yellow), Color(White), Color(White), Visible To and String, Visible Never);
		Event Player.E[7] = Last Text ID;
		Skip If(Global.G < 8, 2);
		Create HUD Text(Event Player, String("{0} / {1}", Event Player.G[8], Global.C[8]), Null, Custom String(
			"Overwatch symbols on the walls"), Left, 8, Color(Yellow), Color(White), Color(White), Visible To and String, Visible Never);
		Event Player.E[8] = Last Text ID;
		Event Player.A = 0;
	}
}

rule("all items found (victory!)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Q == Global.O;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Set Invisible(Event Player, None);
		Big Message(All Players(All Teams), String("{0} {1} {2}", Hero Icon String(Hero Of(Event Player)), Event Player, String("{0}!",
			String("Winner"))));
		Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 20);
		Play Effect(Event Player, Good Explosion, Color(Yellow), Event Player, 10);
		Play Effect(Event Player, Ring Explosion, Color(Purple), Event Player, 20);
		Global.H = Event Player;
		Communicate(Event Player, Emote Up);
		Set Slow Motion(30);
		Wait(1.250, Ignore Condition);
		Set Slow Motion(100);
		Wait(3, Ignore Condition);
		Small Message(Event Player, String("{0} {1}", Event Player, String("{0}!", String("Visible"))));
		Wait(15, Ignore Condition);
		Play Effect(Event Player, Buff Explosion Sound, Color(White), Event Player, 10);
		Destroy HUD Text(Event Player.AA);
		Wait(0.250, Ignore Condition);
		Create HUD Text(Event Player, Icon String(Flag), Custom String("Try other maps!"), Custom String("bit.do/finditems"), Top, 1,
			Color(Green), Color(White), Color(Green), String, Visible Never);
		Event Player.AA = Last Text ID;
	}
}

rule("player pressed \"F\" key on the empty place")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.J == True;
		Has Status(Event Player, Frozen) == False;
		Event Player.Q != Global.O;
	}

	actions
	{
		Skip If(Event Player.T > 4.500, 1);
		Event Player.T += 0.500;
		Play Effect(Event Player, Debuff Impact Sound, Color(White), Event Player, 50);
		Set Status(Event Player, Null, Frozen, Event Player.T);
		Event Player.R = Event Player.T;
		Big Message(Event Player, String("{0} {1}", String("No"), String("Item")));
		Skip If(Distance Between(Event Player, Vector(0.111, 9.687, -147.394)) > 5, 5);
		Set Status(Event Player, Null, Frozen, 1);
		Small Message(Event Player, String("{0} {1}", String("Next Attempt"), String("{0} sec", 1)));
		Wait(1, Ignore Condition);
		Event Player.J = False;
		Abort;
		Skip If(Distance Between(Event Player, Vector(-2.535, 6.597, -167.233)) > 7, 5);
		Set Status(Event Player, Null, Frozen, 1);
		Small Message(Event Player, String("{0} {1}", String("Next Attempt"), String("{0} sec", 1)));
		Wait(1, Ignore Condition);
		Event Player.J = False;
		Abort;
		Small Message(Event Player, String("{0} {1}", String("Next Attempt"), String("{0} sec", Round To Integer(Event Player.R, Up))));
		Wait(Event Player.T, Ignore Condition);
		Event Player.J = False;
	}
}

rule("player is frozen")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.J == True;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Event Player.R -= 1;
	}
}

rule("create all 60 effects at the beginning of the match")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Effect(All Players(All Teams), Sparkles, Color(Yellow), Global.H, 2, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Sparkles, Color(Purple), Global.H, 2, Visible To Position and Radius);
		Create Effect(Global.D[1], Good Aura, Color(Yellow), Global.A[1], 1, Visible To);
		Create Effect(Global.D[2], Good Aura, Color(Yellow), Global.A[2], 1, Visible To);
		Create Effect(Global.D[3], Good Aura, Color(Yellow), Global.A[3], 1, Visible To);
		Create Effect(Global.D[4], Good Aura, Color(Yellow), Global.A[4], 1, Visible To);
		Create Effect(Global.D[5], Good Aura, Color(Yellow), Global.A[5], 1, Visible To);
		Create Effect(Global.D[6], Good Aura, Color(Yellow), Global.A[6], 1, Visible To);
		Create Effect(Global.D[7], Good Aura, Color(Yellow), Global.A[7], 1, Visible To);
		Create Effect(Global.D[8], Good Aura, Color(Yellow), Global.A[8], 1, Visible To);
		Create Effect(Global.D[9], Good Aura, Color(Yellow), Global.A[9], 1, Visible To);
		Create Effect(Global.D[10], Good Aura, Color(Yellow), Global.A[10], 1, Visible To);
		Create Effect(Global.D[11], Good Aura, Color(Yellow), Global.A[11], 1, Visible To);
		Create Effect(Global.D[12], Good Aura, Color(Yellow), Global.A[12], 1, Visible To);
		Create Effect(Global.D[13], Good Aura, Color(Yellow), Global.A[13], 1, Visible To);
		Create Effect(Global.D[14], Good Aura, Color(Yellow), Global.A[14], 1, Visible To);
		Create Effect(Global.D[15], Good Aura, Color(Yellow), Global.A[15], 1, Visible To);
		Create Effect(Global.D[16], Good Aura, Color(Yellow), Global.A[16], 1, Visible To);
		Create Effect(Global.D[17], Good Aura, Color(Yellow), Global.A[17], 1, Visible To);
		Create Effect(Global.D[18], Good Aura, Color(Yellow), Global.A[18], 1, Visible To);
		Create Effect(Global.D[19], Good Aura, Color(Yellow), Global.A[19], 1, Visible To);
		Create Effect(Global.D[20], Good Aura, Color(Yellow), Global.A[20], 1, Visible To);
		Create Effect(Global.D[21], Good Aura, Color(Yellow), Global.A[21], 1, Visible To);
		Create Effect(Global.D[22], Good Aura, Color(Yellow), Global.A[22], 1, Visible To);
		Create Effect(Global.D[23], Good Aura, Color(Yellow), Global.A[23], 1, Visible To);
		Create Effect(Global.D[24], Good Aura, Color(Yellow), Global.A[24], 1, Visible To);
		Create Effect(Global.D[25], Good Aura, Color(Yellow), Global.A[25], 1, Visible To);
		Create Effect(Global.D[26], Good Aura, Color(Yellow), Global.A[26], 1, Visible To);
		Create Effect(Global.D[27], Good Aura, Color(Yellow), Global.A[27], 1, Visible To);
		Create Effect(Global.D[28], Good Aura, Color(Yellow), Global.A[28], 1, Visible To);
		Create Effect(Global.D[29], Good Aura, Color(Yellow), Global.A[29], 1, Visible To);
		Create Effect(Global.D[30], Good Aura, Color(Yellow), Global.A[30], 1, Visible To);
		Create Effect(Global.D[31], Good Aura, Color(Yellow), Global.A[31], 1, Visible To);
		Create Effect(Global.D[32], Good Aura, Color(Yellow), Global.A[32], 1, Visible To);
		Create Effect(Global.D[33], Good Aura, Color(Yellow), Global.A[33], 1, Visible To);
		Create Effect(Global.D[34], Good Aura, Color(Yellow), Global.A[34], 1, Visible To);
		Create Effect(Global.D[35], Good Aura, Color(Yellow), Global.A[35], 1, Visible To);
		Create Effect(Global.D[36], Good Aura, Color(Yellow), Global.A[36], 1, Visible To);
		Create Effect(Global.D[37], Good Aura, Color(Yellow), Global.A[37], 1, Visible To);
		Create Effect(Global.D[38], Good Aura, Color(Yellow), Global.A[38], 1, Visible To);
		Create Effect(Global.D[39], Good Aura, Color(Yellow), Global.A[39], 1, Visible To);
		Create Effect(Global.D[40], Good Aura, Color(Yellow), Global.A[40], 1, Visible To);
		Create Effect(Global.D[41], Good Aura, Color(Yellow), Global.A[41], 1, Visible To);
		Create Effect(Global.D[42], Good Aura, Color(Yellow), Global.A[42], 1, Visible To);
		Create Effect(Global.D[43], Good Aura, Color(Yellow), Global.A[43], 1, Visible To);
		Create Effect(Global.D[44], Good Aura, Color(Yellow), Global.A[44], 1, Visible To);
		Create Effect(Global.D[45], Good Aura, Color(Yellow), Global.A[45], 1, Visible To);
		Create Effect(Global.D[46], Good Aura, Color(Yellow), Global.A[46], 1, Visible To);
		Create Effect(Global.D[47], Good Aura, Color(Yellow), Global.A[47], 1, Visible To);
		Create Effect(Global.D[48], Good Aura, Color(Yellow), Global.A[48], 1, Visible To);
		Create Effect(Global.D[49], Good Aura, Color(Yellow), Global.A[49], 1, Visible To);
		Create Effect(Global.D[50], Good Aura, Color(Yellow), Global.A[50], 1, Visible To);
		Create Effect(Global.D[51], Good Aura, Color(Yellow), Global.A[51], 1, Visible To);
		Create Effect(Global.D[52], Good Aura, Color(Yellow), Global.A[52], 1, Visible To);
		Create Effect(Global.D[53], Good Aura, Color(Yellow), Global.A[53], 1, Visible To);
		Create Effect(Global.D[54], Good Aura, Color(Yellow), Global.A[54], 1, Visible To);
		Create Effect(Global.D[55], Good Aura, Color(Yellow), Global.A[55], 1, Visible To);
		Create Effect(Global.D[56], Good Aura, Color(Yellow), Global.A[56], 1, Visible To);
		Create Effect(Global.D[57], Good Aura, Color(Yellow), Global.A[57], 1, Visible To);
		Create Effect(Global.D[58], Good Aura, Color(Yellow), Global.A[58], 1, Visible To);
		Create Effect(Global.D[59], Good Aura, Color(Yellow), Global.A[59], 1, Visible To);
		Create Effect(Global.D[60], Good Aura, Color(Yellow), Global.A[60], 1, Visible To);
	}
}

rule("shift key is pressed (acceleration)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
	}

	actions
	{
		Set Move Speed(Event Player, Event Player.S);
	}
}

rule("shift key is not pressed (slowdown)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == False;
	}

	actions
	{
		Set Move Speed(Event Player, 110);
	}
}

rule("teleport cooldown")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.B == True;
	}

	actions
	{
		Wait(2, Ignore Condition);
		Event Player.B = False;
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("teleport 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.B == False;
		Global.P[1] != 0;
		Distance Between(Event Player, Global.P[1]) <= 2;
	}

	actions
	{
		Teleport(Event Player, Global.P[2]);
		Event Player.B = True;
		Play Effect(Event Player, Good Explosion, Color(Blue), Event Player, 5);
		Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 20);
	}
}

rule("teleport 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.B == False;
		Global.P[2] != 0;
		Distance Between(Event Player, Global.P[2]) <= 2;
	}

	actions
	{
		Teleport(Event Player, Global.P[1]);
		Event Player.B = True;
		Play Effect(Event Player, Good Explosion, Color(Blue), Event Player, 5);
		Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 20);
	}
}

rule("teleport 3")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.B == False;
		Global.P[3] != 0;
		Distance Between(Event Player, Global.P[3]) <= 2;
	}

	actions
	{
		Teleport(Event Player, Global.P[4]);
		Event Player.B = True;
		Play Effect(Event Player, Good Explosion, Color(Blue), Event Player, 5);
		Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 20);
	}
}

rule("teleport 4")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.B == False;
		Global.P[4] != 0;
		Distance Between(Event Player, Global.P[4]) <= 2;
	}

	actions
	{
		Teleport(Event Player, Global.P[3]);
		Event Player.B = True;
		Play Effect(Event Player, Good Explosion, Color(Blue), Event Player, 5);
		Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 20);
	}
}

rule("teleport 5")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.B == False;
		Global.P[5] != 0;
		Distance Between(Event Player, Global.P[5]) <= 2;
	}

	actions
	{
		Teleport(Event Player, Global.P[6]);
		Event Player.B = True;
		Play Effect(Event Player, Good Explosion, Color(Blue), Event Player, 5);
		Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 20);
	}
}

rule("teleport 6")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.B == False;
		Global.P[6] != 0;
		Distance Between(Event Player, Global.P[6]) <= 2;
	}

	actions
	{
		Teleport(Event Player, Global.P[5]);
		Event Player.B = True;
		Play Effect(Event Player, Good Explosion, Color(Blue), Event Player, 5);
		Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 20);
	}
}

rule("teleport 7")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.B == False;
		Global.P[7] != 0;
		Distance Between(Event Player, Global.P[7]) <= 2;
	}

	actions
	{
		Teleport(Event Player, Global.P[8]);
		Event Player.B = True;
		Play Effect(Event Player, Good Explosion, Color(Blue), Event Player, 5);
		Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 20);
	}
}

rule("teleport 8")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.B == False;
		Global.P[8] != 0;
		Distance Between(Event Player, Global.P[8]) <= 2;
	}

	actions
	{
		Teleport(Event Player, Global.P[7]);
		Event Player.B = True;
		Play Effect(Event Player, Good Explosion, Color(Blue), Event Player, 5);
		Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 20);
	}
}

rule("teleport 9")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.B == False;
		Global.P[9] != 0;
		Distance Between(Event Player, Global.P[9]) <= 2;
	}

	actions
	{
		Teleport(Event Player, Global.P[10]);
		Event Player.B = True;
		Play Effect(Event Player, Good Explosion, Color(Blue), Event Player, 5);
		Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 20);
	}
}

rule("teleport 10")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.B == False;
		Global.P[10] != 0;
		Distance Between(Event Player, Global.P[10]) <= 2;
	}

	actions
	{
		Teleport(Event Player, Global.P[9]);
		Event Player.B = True;
		Play Effect(Event Player, Good Explosion, Color(Blue), Event Player, 5);
		Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 20);
	}
}

rule("teleport 11")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.B == False;
		Global.P[11] != 0;
		Distance Between(Event Player, Global.P[11]) <= 2;
	}

	actions
	{
		Teleport(Event Player, Global.P[12]);
		Event Player.B = True;
		Play Effect(Event Player, Good Explosion, Color(Blue), Event Player, 5);
		Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 20);
	}
}

rule("teleport 12")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.B == False;
		Global.P[12] != 0;
		Distance Between(Event Player, Global.P[12]) <= 2;
	}

	actions
	{
		Teleport(Event Player, Global.P[11]);
		Event Player.B = True;
		Play Effect(Event Player, Good Explosion, Color(Blue), Event Player, 5);
		Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 20);
	}
}

rule("acceleration after finding a group of items")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.A > 0;
		Event Player.S <= 300;
		Global.G > 0;
		Event Player.Q < Global.O;
	}

	actions
	{
		Event Player.S += 150 / Global.G;
		Wait(1, Ignore Condition);
		Big Message(Event Player, String("{0} {1}", String("Speed"), String("Upgrade")));
		Play Effect(Event Player, Buff Impact Sound, Color(White), Event Player, 30);
		Wait(2, Ignore Condition);
		Small Message(Event Player, String("{0} - {1}", Custom String("[SHIFT]"), String("Run")));
	}
}

rule("player found the last item in the group 1-5")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.A > 0;
		Event Player.A <= 5;
	}

	actions
	{
		Event Player.N = 1;
		Skip If(Event Player.A != Event Player.N, 2);
		Destroy HUD Text(Event Player.E[Event Player.N]);
		Create HUD Text(Event Player, String("{0} {1}", String("{0} / {1}", Global.C[1], Global.C[1]), Icon String(Checkmark)), Null, Null,
			Left, 1, Color(Green), Color(White), Color(White), Visible To and String, Visible Never);
		Event Player.N = 2;
		Skip If(Event Player.A != Event Player.N, 2);
		Destroy HUD Text(Event Player.E[Event Player.N]);
		Create HUD Text(Event Player, String("{0} {1}", String("{0} / {1}", Global.C[2], Global.C[2]), Icon String(Checkmark)), Null, Null,
			Left, 2, Color(Green), Color(White), Color(White), Visible To and String, Visible Never);
		Event Player.N = 3;
		Skip If(Event Player.A != Event Player.N, 2);
		Destroy HUD Text(Event Player.E[Event Player.N]);
		Create HUD Text(Event Player, String("{0} {1}", String("{0} / {1}", Global.C[3], Global.C[3]), Icon String(Checkmark)), Null, Null,
			Left, 3, Color(Green), Color(White), Color(White), Visible To and String, Visible Never);
		Event Player.N = 4;
		Skip If(Event Player.A != Event Player.N, 2);
		Destroy HUD Text(Event Player.E[Event Player.N]);
		Create HUD Text(Event Player, String("{0} {1}", String("{0} / {1}", Global.C[4], Global.C[4]), Icon String(Checkmark)), Null, Null,
			Left, 4, Color(Green), Color(White), Color(White), Visible To and String, Visible Never);
		Event Player.N = 5;
		Skip If(Event Player.A != Event Player.N, 2);
		Destroy HUD Text(Event Player.E[Event Player.N]);
		Create HUD Text(Event Player, String("{0} {1}", String("{0} / {1}", Global.C[5], Global.C[5]), Icon String(Checkmark)), Null, Null,
			Left, 5, Color(Green), Color(White), Color(White), Visible To and String, Visible Never);
		Event Player.A = 0;
	}
}

rule("player found the last item in the group 6-10")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.A > 5;
		Event Player.A <= 10;
	}

	actions
	{
		Event Player.N = 6;
		Skip If(Event Player.A != Event Player.N, 2);
		Destroy HUD Text(Event Player.E[Event Player.N]);
		Create HUD Text(Event Player, String("{0} {1}", String("{0} / {1}", Global.C[6], Global.C[6]), Icon String(Checkmark)), Null, Null,
			Left, 6, Color(Green), Color(White), Color(White), Visible To and String, Visible Never);
		Event Player.N = 7;
		Skip If(Event Player.A != Event Player.N, 2);
		Destroy HUD Text(Event Player.E[Event Player.N]);
		Create HUD Text(Event Player, String("{0} {1}", String("{0} / {1}", Global.C[7], Global.C[7]), Icon String(Checkmark)), Null, Null,
			Left, 7, Color(Green), Color(White), Color(White), Visible To and String, Visible Never);
		Event Player.N = 8;
		Skip If(Event Player.A != Event Player.N, 2);
		Destroy HUD Text(Event Player.E[Event Player.N]);
		Create HUD Text(Event Player, String("{0} {1}", String("{0} / {1}", Global.C[8], Global.C[8]), Icon String(Checkmark)), Null, Null,
			Left, 8, Color(Green), Color(White), Color(White), Visible To and String, Visible Never);
		Event Player.N = 9;
		Skip If(Event Player.A != Event Player.N, 2);
		Destroy HUD Text(Event Player.E[Event Player.N]);
		Create HUD Text(Event Player, String("{0} {1}", String("{0} / {1}", Global.C[9], Global.C[9]), Icon String(Checkmark)), Null, Null,
			Left, 9, Color(Green), Color(White), Color(White), Visible To and String, Visible Never);
		Event Player.N = 10;
		Skip If(Event Player.A != Event Player.N, 2);
		Destroy HUD Text(Event Player.E[Event Player.N]);
		Create HUD Text(Event Player, String("{0} {1}", String("{0} / {1}", Global.C[10], Global.C[10]), Icon String(Checkmark)), Null,
			Null, Left, 10, Color(Green), Color(White), Color(White), Visible To and String, Visible Never);
		Event Player.A = 0;
	}
}

rule("infinite match time")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Match Time <= 1800;
	}

	actions
	{
		Set Match Time(3600);
	}
}

rule("updating data after a player leaves the game")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.T == 0;
	}

	actions
	{
		Global.R = Global.S[Global.T];
		Skip If(Global.R == Null, 7);
		Skip If(Has Spawned(Global.R), 6);
		Global.Q += 1;
		Modify Global Variable At Index(D, Global.Q, Remove From Array By Value, Global.R);
		Wait(0.025, Ignore Condition);
		Skip If(Global.Q < 60, 1);
		Modify Global Variable(S, Remove From Array By Value, Global.R);
		Loop If(Global.Q < 60);
		Global.T += 1;
		Global.Q = 0;
		Wait(0.025, Ignore Condition);
		Loop If(Global.T < 12);
	}
}

rule("bug protection")
{
	event
	{
		Player Left Match;
		All;
		All;
	}

	actions
	{
		Set Slow Motion(100);
	}
}

rule("message 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Create HUD Text(Event Player, Icon String(Question Mark), Custom String("Find items from the list"), Custom String(
			"Press [F] (Interact button) when you are close to the item"), Top, 1, Color(Turquoise), Color(White), Color(Turquoise),
			String, Visible Never);
		Event Player.AA = Last Text ID;
	}
}

rule("message 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Q == 3;
	}

	actions
	{
		Destroy HUD Text(Event Player.AA);
		Create HUD Text(Event Player, Icon String(Exclamation Mark), Custom String(
			"Set medium or higher model detail settings to see all items"), Custom String(
			"Options > Video > Graphics quality > Advanced > Model Detail"), Top, 1, Color(Yellow), Color(White), Color(Yellow), String,
			Visible Never);
		Event Player.AA = Last Text ID;
	}
}

rule("message 3")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Q == 1;
	}

	actions
	{
		Destroy HUD Text(Event Player.AA);
	}
}

rule("message 4")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Q == 5;
	}

	actions
	{
		Destroy HUD Text(Event Player.AA);
	}
}
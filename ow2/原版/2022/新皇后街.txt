设置
{
	主程序
	{
		描述: "★ Find items from the list and press [F] (Interact)\r\n\r\n★ Set high or ultra model detail settings to see all items (Options > Video > Graphics quality > Advanced > Model Detail)\r\n\r\n★ List of items:\r\n\r\n13 reusable bottles\r\n4 cameras\r\n7 tablets\r\n7 big gray recycle bins\r\n9 single books\r\n14 square cardboard boxes\r\n4 4-like graffiti\n\r\n★ Try more than 50 interesting maps:\r\nbit.do/finditems"
		模式名称: "Find Items ★ New Queen Street"
	}

	大厅
	{
		地图轮换: 暂停轮换
		比赛结束后转换队伍: 否
		玩家上限 队伍1: 0
		玩家上限 队伍2: 6
		观战者人数上限: 0
		返回大厅: 从不
	}

	模式
	{
		突击模式
		{
			启用地图
			{
				新皇后街 0
			}
		}

		综合
		{
			允许切换英雄: 关闭
			复生时间: 0%
			急救包刷新: 禁用
			消灭提示: 关闭
			消灭镜头: 关闭
			游戏模式开始: 即时
			英雄限制: 关闭
			随机英雄复生: 开启
		}
	}

	英雄
	{
		综合
		{
			主要攻击模式: 关闭
			仅爆头有效: 开启
			战斗时终极技能充能速度: 0%
			技能冷却时间: 50%
			移动速度: 110%
			终极技能充能速度: 10%
			终极技能自动充能速度: 0%
			近身攻击: 关闭

			D.Va
			{
				主要攻击模式: 关闭
				微型飞弹: 关闭
				推进器: 关闭
				终极技能（自毁）: 关闭
				近身攻击: 关闭
				防御矩阵: 关闭
			}

			半藏
			{
				主要攻击模式: 关闭
				岚: 关闭
				终极技能（竜）: 关闭
				跃: 关闭
				近身攻击: 关闭
				音: 关闭
			}

			卡西迪
			{
				主要攻击模式: 关闭
				战术翻滚: 关闭
				磁性手雷: 关闭
				终极技能（神射手）: 关闭
				辅助攻击模式: 关闭
				近身攻击: 关闭
			}

			卢西奥
			{
				主要攻击模式: 关闭
				切歌: 关闭
				强音: 关闭
				终极技能（音障）: 关闭
				近身攻击: 关闭
				音波: 关闭
			}

			堡垒
			{
				A-36战术榴弹: 关闭
				主要攻击模式: 关闭
				切换模式: 关闭
				终极技能（火炮模式）: 关闭
				近身攻击: 关闭
			}

			士兵：76
			{
				主要攻击模式: 关闭
				生物力场: 关闭
				疾跑: 关闭
				终极技能（战术目镜）: 关闭
				螺旋飞弹: 关闭
				近身攻击: 关闭
			}

			天使
			{
				主要攻击模式: 关闭
				守护天使: 关闭
				终极技能（女武神）: 关闭
				自动恢复: 关闭
				辅助攻击模式: 关闭
				近身攻击: 关闭
				重生: 关闭
			}

			奥丽莎
			{
				主要攻击模式: 关闭
				强固防御: 关闭
				标枪旋击: 关闭
				终极技能（撼地猛刺）: 关闭
				能量标枪: 关闭
				近身攻击: 关闭
			}

			安娜
			{
				主要攻击模式: 关闭
				生物手雷: 关闭
				终极技能（纳米激素）: 关闭
				近身攻击: 关闭
				麻醉镖: 关闭
			}

			巴蒂斯特
			{
				主要攻击模式: 关闭
				愈合冲击: 关闭
				终极技能（增幅矩阵）: 关闭
				维生力场: 关闭
				辅助攻击模式: 关闭
				近身攻击: 关闭
			}

			布丽吉塔
			{
				主要攻击模式: 关闭
				屏障护盾: 关闭
				恢复包: 关闭
				流星飞锤: 关闭
				终极技能（集结号令）: 关闭
				能量盾击: 关闭
				近身攻击: 关闭
			}

			托比昂
			{
				主要攻击模式: 关闭
				热力过载: 关闭
				终极技能（熔火核心）: 关闭
				辅助攻击模式: 关闭
				近身攻击: 关闭
				部署炮台: 关闭
			}

			末日铁拳
			{
				主要攻击模式: 关闭
				悍猛格挡: 关闭
				火箭重拳: 关闭
				终极技能（毁天灭地）: 关闭
				裂地重拳: 关闭
				近身攻击: 关闭
			}

			查莉娅
			{
				主要攻击模式: 关闭
				投射屏障: 关闭
				无需装弹: 开启
				粒子屏障: 关闭
				辅助攻击模式: 关闭
				近身攻击: 关闭
			}

			死神
			{
				主要攻击模式: 关闭
				幽灵形态: 关闭
				暗影步: 关闭
				终极技能（死亡绽放）: 关闭
				近身攻击: 关闭
			}

			法老之鹰
			{
				主要攻击模式: 关闭
				悬浮背包: 关闭
				推进背包: 关闭
				终极技能（火箭弹幕）: 关闭
				近身攻击: 关闭
				震荡冲击: 关闭
			}

			温斯顿
			{
				主要攻击模式: 关闭
				喷射背包: 关闭
				屏障发射器: 关闭
				终极技能（原始暴怒）: 关闭
				近身攻击: 关闭
			}

			源氏
			{
				主要攻击模式: 关闭
				影: 关闭
				终极技能（斩）: 关闭
				辅助攻击模式: 关闭
				近身攻击: 关闭
				闪: 关闭
			}

			狂鼠
			{
				主要攻击模式: 关闭
				捕兽夹: 关闭
				终极技能（炸弹轮胎）: 关闭
				近身攻击: 关闭
				震荡地雷: 关闭
			}

			猎空
			{
				主要攻击模式: 关闭
				终极技能（脉冲炸弹）: 关闭
				近身攻击: 关闭
				闪回: 关闭
				闪现: 关闭
			}

			破坏球
			{
				主要攻击模式: 关闭
				动力铁球: 关闭
				工程抓钩: 关闭
				感应护盾: 关闭
				终极技能（地雷禁区）: 关闭
				近身攻击: 关闭
				重力坠击: 关闭
			}

			禅雅塔
			{
				主要攻击模式: 关闭
				乱: 关闭
				谐: 关闭
				辅助攻击模式: 关闭
				近身攻击: 关闭
			}

			秩序之光
			{
				主要攻击模式: 关闭
				传送面板: 关闭
				哨戒炮: 关闭
				终极技能（光子屏障）: 关闭
				辅助攻击模式: 关闭
				近身攻击: 关闭
			}

			美
			{
				主要攻击模式: 关闭
				冰墙: 关闭
				急冻: 关闭
				终极技能（暴雪）: 关闭
				辅助攻击模式: 关闭
				近身攻击: 关闭
			}

			艾什
			{
				主要攻击模式: 关闭
				延时雷管: 关闭
				短筒猎枪: 关闭
				终极技能（召唤鲍勃）: 关闭
				近身攻击: 关闭
			}

			莫伊拉
			{
				主要攻击模式: 关闭
				消散: 关闭
				生化之球: 关闭
				终极技能（聚合射线）: 关闭
				辅助攻击模式: 关闭
				近身攻击: 关闭
			}

			莱因哈特
			{
				主要攻击模式: 关闭
				冲锋: 关闭
				屏障力场: 关闭
				烈焰打击: 关闭
				终极技能（裂地猛击）: 关闭
				近身攻击: 关闭
			}

			路霸
			{
				主要攻击模式: 关闭
				呼吸器: 关闭
				终极技能（鸡飞狗跳）: 关闭
				辅助攻击模式: 关闭
				近身攻击: 关闭
				链钩: 关闭
			}

			黑影
			{
				主要攻击模式: 关闭
				位移传动: 关闭
				终极技能（电磁脉冲）: 关闭
				近身攻击: 关闭
				隐秘潜行: 关闭
				黑客入侵: 关闭
			}

			黑百合
			{
				主要攻击模式: 关闭
				剧毒诡雷: 关闭
				抓钩: 关闭
				终极技能（红外侦测）: 关闭
				近身攻击: 关闭
			}

			启用英雄
			{
				禅雅塔
			}
		}
	}
}

变量
{
	玩家:
		26: AA
}

规则("// original mode is made by Foren#2660")
{
	事件
	{
		持续 - 全局;
	}
}

规则("beginning of the game")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		设置比赛时间(3600);
		全局.N = 1;
		全局.G = 0;
		全局.H = 矢量(0, -99, 0);
		全局.T = -1;
		全局.Q = 0;
	}
}

规则("Map ===================================================================")
{
	事件
	{
		持续 - 全局;
	}
}

规则("reusable bottles")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.G += 1;
		全局.I = 0;
		全局.A[全局.N] = 矢量(25.020, 4.640, -14.170);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(25.190, 4.640, -14.290);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-26.770, 5.220, -20.310);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-18.900, 5.300, -9.390);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-85.070, 8.750, -25.811);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-85.070, 8.700, -17.980);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-111.510, 11.160, -12.920);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-148.240, 11.160, -35.231);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-148.240, 11.180, -17.480);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-104.800, 13.870, -36.420);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-104.620, 14.010, -36.520);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-95.950, 11.160, -17.260);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-99.170, 11.140, -5.410);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.C[全局.G] = 全局.I;
	}
}

规则("cameras")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.G += 1;
		全局.I = 0;
		全局.A[全局.N] = 矢量(85.100, 8.680, -22.120);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(92.680, 11.710, -5.120);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(118.730, 9.700, -13.250);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(112.280, 9.510, -22.620);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.C[全局.G] = 全局.I;
	}
}

规则("tablets")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.G += 1;
		全局.I = 0;
		全局.A[全局.N] = 矢量(-23.540, 5.270, 17.960);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-5.200, 2.660, -36.650);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-0.360, 2.990, -42.560);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(32.520, 4.630, -4.390);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(99.030, 11.640, -5.080);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(93.910, 11.630, -39.920);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-68.810, 8.630, 0.860);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.C[全局.G] = 全局.I;
	}
}

规则("big gray recycle bins")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.G += 1;
		全局.I = 0;
		全局.A[全局.N] = 矢量(57.670, 8.810, 7.400);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-30.390, 4.710, -7.970);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-15.330, 0.730, 6.280);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(3.160, 0.760, 20.680);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(15.390, 0.670, 6);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-0.010, 1.860, -11.450);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(30.310, 4.830, -7.960);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.C[全局.G] = 全局.I;
	}
}

规则("single books")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.G += 1;
		全局.I = 0;
		全局.A[全局.N] = 矢量(85.030, 8.630, -25.910);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(66.760, 8.660, -23.950);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(77.330, 8.570, -1.630);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(68.990, 3.020, -11.390);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(70.050, 3.900, -0.580);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-23.480, 5.260, 13.310);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-71.510, 8.650, -8.950);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-64.580, 8.660, -21.740);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-32.750, 4.670, -4.060);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.C[全局.G] = 全局.I;
	}
}

规则("square cardboard boxes")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.G += 1;
		全局.I = 0;
		全局.A[全局.N] = 矢量(-57.720, 8.380, 7.620);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-58.200, 2.370, 6.520);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-45.930, 4.440, -44.680);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-21.730, 3.280, -57.480);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(17.460, 4.780, 9.880);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(16.590, 3.400, -57.490);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(54.220, 2.380, -19.610);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(53.430, 2.400, -19.570);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(52.080, 2.410, -2.630);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(52.060, 2.410, -1.740);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(93.810, 11.500, -34.010);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(100.290, 11.430, -39.780);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(116.670, 9.360, -19.250);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(109.100, 9.320, -28.040);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.C[全局.G] = 全局.I;
	}
}

规则("4-like graffiti")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.G += 1;
		全局.I = 0;
		全局.A[全局.N] = 矢量(17.630, 3.540, -6.620);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-66.390, 3.460, -1.310);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-21.020, 3.720, -6.630);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-1.600, 1.460, 20.240);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.C[全局.G] = 全局.I;
	}
}

规则("teleports")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.P[1] = 矢量(-89.420, 11, -36.500);
		创建效果(所有玩家(所有队伍), 环, 颜色(蓝色), 全局.P[1], 1.200, 可见);
		全局.P[2] = 矢量(-93.100, 11, -36.420);
		创建效果(所有玩家(所有队伍), 环, 颜色(蓝色), 全局.P[2], 1.200, 可见);
		全局.P[3] = 矢量(-92.880, 11, -8.470);
		创建效果(所有玩家(所有队伍), 环, 颜色(蓝色), 全局.P[3], 1.200, 可见);
		全局.P[4] = 矢量(-89.300, 11, -8.440);
		创建效果(所有玩家(所有队伍), 环, 颜色(蓝色), 全局.P[4], 1.200, 可见);
	}
}

规则("I=============================================================================")
{
	事件
	{
		持续 - 全局;
	}
}

规则("calculating total number of items")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		全局.O == 无;
	}

	动作
	{
		全局.O = 全局.N - 1;
	}
}

规则("player found item")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		具有状态(事件玩家, 冰冻) == 假;
		事件玩家.Z == 无;
	}

	动作
	{
		根据条件跳过(事件玩家.L != 无, 1);
		事件玩家.L = 1;
		根据条件跳过(全局.A[事件玩家.L] == 无, 18);
		根据条件跳过(事件玩家.F[事件玩家.L] == 真, 17);
		根据条件跳过(相距距离(事件玩家, 全局.A[事件玩家.L]) > 3, 16);
		事件玩家.O = 全局.X[事件玩家.L];
		事件玩家.Z = 全局.A[事件玩家.L];
		在索引处修改全局变量(D, 事件玩家.L, 添加至数组, 事件玩家);
		事件玩家.K = 全局.A[事件玩家.L];
		事件玩家.Q += 1;
		事件玩家.F[事件玩家.L] = 真;
		事件玩家.G[全局.X[事件玩家.L]] += 1;
		事件玩家.M = 事件玩家.L;
		根据条件跳过(事件玩家.Q == 全局.O, 1);
		小字体信息(事件玩家, 字符串("{0} / {1}", 事件玩家.G[全局.X[事件玩家.M]], 全局.C[全局.X[事件玩家.M]]));
		根据条件跳过(事件玩家.G[事件玩家.O] < 全局.C[事件玩家.O], 4);
		事件玩家.A = 全局.X[事件玩家.L];
		播放效果(事件玩家, 环状爆炸, 颜色(亮紫色), 事件玩家.Z, 7);
		播放效果(事件玩家, 正面状态施加声音, 颜色(白色), 事件玩家, 30);
		播放效果(事件玩家, 有益选择效果 , 颜色(亮紫色), 事件玩家.Z, 1);
		事件玩家.L = 999;
		事件玩家.L += 1;
		根据条件跳过(事件玩家.L >= 全局.O - 4, 8);
		根据条件跳过(相距距离(事件玩家, 全局.A[事件玩家.L]) <= 3, 1);
		事件玩家.L += 1;
		根据条件跳过(相距距离(事件玩家, 全局.A[事件玩家.L]) <= 3, 1);
		事件玩家.L += 1;
		根据条件跳过(相距距离(事件玩家, 全局.A[事件玩家.L]) <= 3, 1);
		事件玩家.L += 1;
		根据条件跳过(相距距离(事件玩家, 全局.A[事件玩家.L]) <= 3, 1);
		事件玩家.L += 1;
		等待(0.001, 无视条件);
		根据条件跳过(事件玩家.L != 全局.O + 1, 1);
		事件玩家.J = 真;
		根据条件循环(事件玩家.L <= 全局.O);
		事件玩家.L = 1;
	}
}

规则("playing yellow effects")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.Z != 无;
	}

	动作
	{
		播放效果(事件玩家, 环状爆炸, 颜色(黄色), 事件玩家.Z, 3);
		播放效果(事件玩家, 状态爆炸声音, 颜色(黄色), 事件玩家, 20);
		等待(0.250, 无视条件);
		事件玩家.Z = 无;
		根据条件跳过(事件玩家.Q < 全局.O, 4);
		消除HUD文本(事件玩家.W[1]);
		创建HUD文本(所有玩家(所有队伍), 无, 无, 字符串("{0} {1} {2}", 字符串("{0} {1}", 英雄图标字符串(所用英雄(事件玩家)), 事件玩家), 字符串("已找到"), 字符串("{0} / {1}", 事件玩家.Q,
			全局.O)), 右边, 60 - 事件玩家.Q, 颜色(白色), 颜色(白色), 颜色(绿色), 可见和字符串, 默认可见度);
		事件玩家.W[1] = 上一个文本ID;
		中止;
		消除HUD文本(事件玩家.W[1]);
		创建HUD文本(所有玩家(所有队伍), 无, 无, 字符串("{0} {1} {2}", 字符串("{0} {1}", 英雄图标字符串(所用英雄(事件玩家)), 事件玩家), 字符串("已找到"), 字符串("{0} / {1}", 事件玩家.Q,
			全局.O)), 右边, 60 - 事件玩家.Q, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		事件玩家.W[1] = 上一个文本ID;
	}
}

规则("player spawn")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
	}

	动作
	{
		隐藏游戏模式HUD(事件玩家);
		隐藏英雄HUD(事件玩家);
		事件玩家.Q = 0;
		修改全局变量(S, 添加至数组, 事件玩家);
		创建HUD文本(所有玩家(所有队伍), 无, 无, 字符串("{0} {1} {2}", 字符串("{0} {1}", 英雄图标字符串(所用英雄(事件玩家)), 事件玩家), 字符串("已找到"), 字符串("{0} / {1}", 事件玩家.Q,
			全局.O)), 右边, 60, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		事件玩家.W[1] = 上一个文本ID;
		事件玩家.J = 假;
		事件玩家.T = 0;
		设置不可见(事件玩家, 全部);
		事件玩家.S = 150;
		设置状态(事件玩家, 无, 无敌, 9999);
		创建效果(事件玩家, 火花, 颜色(黄色), 事件玩家.K, 2, 可见，位置和半径);
		全局.T = 0;
		全局.Q = 0;
		事件玩家.K = 矢量(0, -99, 0);
		等待(15, 无视条件);
		小字体信息(事件玩家, 字符串("{0} - {1}", 自定义字符串("[SHIFT]"), 字符串("运行")));
	}
}

规则("creating HUD text")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
	}

	动作
	{
		根据条件跳过(全局.G < 1, 2);
		创建HUD文本(事件玩家, 字符串("{0} / {1}", 事件玩家.G[1], 全局.C[1]), 无, 自定义字符串("reusable bottles"), 左边, 1, 颜色(黄色), 颜色(白色), 颜色(白色), 可见和字符串, 始终不可见);
		事件玩家.E[1] = 上一个文本ID;
		根据条件跳过(全局.G < 2, 2);
		创建HUD文本(事件玩家, 字符串("{0} / {1}", 事件玩家.G[2], 全局.C[2]), 无, 自定义字符串("cameras"), 左边, 2, 颜色(黄色), 颜色(白色), 颜色(白色), 可见和字符串, 始终不可见);
		事件玩家.E[2] = 上一个文本ID;
		根据条件跳过(全局.G < 3, 2);
		创建HUD文本(事件玩家, 字符串("{0} / {1}", 事件玩家.G[3], 全局.C[3]), 无, 自定义字符串("tablets"), 左边, 3, 颜色(黄色), 颜色(白色), 颜色(白色), 可见和字符串, 始终不可见);
		事件玩家.E[3] = 上一个文本ID;
		根据条件跳过(全局.G < 4, 2);
		创建HUD文本(事件玩家, 字符串("{0} / {1}", 事件玩家.G[4], 全局.C[4]), 无, 自定义字符串("big gray recycle bins"), 左边, 4, 颜色(黄色), 颜色(白色), 颜色(白色), 可见和字符串,
			始终不可见);
		事件玩家.E[4] = 上一个文本ID;
		根据条件跳过(全局.G < 5, 2);
		创建HUD文本(事件玩家, 字符串("{0} / {1}", 事件玩家.G[5], 全局.C[5]), 无, 自定义字符串("single books"), 左边, 5, 颜色(黄色), 颜色(白色), 颜色(白色), 可见和字符串, 始终不可见);
		事件玩家.E[5] = 上一个文本ID;
		根据条件跳过(全局.G < 6, 2);
		创建HUD文本(事件玩家, 字符串("{0} / {1}", 事件玩家.G[6], 全局.C[6]), 无, 自定义字符串("square cardboard boxes"), 左边, 6, 颜色(黄色), 颜色(白色), 颜色(白色), 可见和字符串,
			始终不可见);
		事件玩家.E[6] = 上一个文本ID;
		根据条件跳过(全局.G < 7, 2);
		创建HUD文本(事件玩家, 字符串("{0} / {1}", 事件玩家.G[7], 全局.C[7]), 无, 自定义字符串("4-like graffiti"), 左边, 7, 颜色(黄色), 颜色(白色), 颜色(白色), 可见和字符串, 始终不可见);
		事件玩家.E[7] = 上一个文本ID;
		事件玩家.A = 0;
	}
}

规则("all items found (victory!)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.Q == 全局.O;
		已重生(事件玩家) == 真;
	}

	动作
	{
		设置不可见(事件玩家, 无);
		大字体信息(所有玩家(所有队伍), 字符串("{0} {1} {2}", 英雄图标字符串(所用英雄(事件玩家)), 事件玩家, 字符串("{0}！", 字符串("胜者"))));
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
		播放效果(事件玩家, 有益爆炸, 颜色(黄色), 事件玩家, 10);
		播放效果(事件玩家, 环状爆炸, 颜色(亮紫色), 事件玩家, 20);
		全局.H = 事件玩家;
		交流(事件玩家, 表情（上）);
		设置慢动作(30);
		等待(1.250, 无视条件);
		设置慢动作(100);
		等待(3, 无视条件);
		小字体信息(事件玩家, 字符串("{0} {1}", 事件玩家, 字符串("{0}！", 字符串("可见"))));
		等待(15, 无视条件);
		播放效果(事件玩家, 状态爆炸声音, 颜色(白色), 事件玩家, 10);
		消除HUD文本(事件玩家.AA);
		创建HUD文本(事件玩家, 图标字符串(旗帜), 自定义字符串("Try other maps!"), 自定义字符串("bit.do/finditems"), 顶部, 1, 颜色(绿色), 颜色(白色), 颜色(绿色), 字符串, 始终不可见);
		事件玩家.AA = 上一个文本ID;
	}
}

规则("player pressed \"F\" key on the empty place")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.J == 真;
		具有状态(事件玩家, 冰冻) == 假;
		事件玩家.Q != 全局.O;
	}

	动作
	{
		根据条件跳过(事件玩家.T > 4.500, 1);
		事件玩家.T += 0.500;
		播放效果(事件玩家, 负面状态施加声音, 颜色(白色), 事件玩家, 50);
		大字体信息(事件玩家, 字符串("{0} {1}", 字符串("否"), 字符串("物品")));
		根据条件跳过(相距距离(事件玩家, 矢量(99, 99, 99)) > 6, 5);
		设置状态(事件玩家, 无, 冰冻, 1);
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("下一次尝试"), 字符串("{0}秒", 1)));
		等待(1, 无视条件);
		事件玩家.J = 假;
		中止;
		根据条件跳过(相距距离(事件玩家, 矢量(99, 99, 99)) > 6, 5);
		设置状态(事件玩家, 无, 冰冻, 1);
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("下一次尝试"), 字符串("{0}秒", 1)));
		等待(1, 无视条件);
		事件玩家.J = 假;
		中止;
		根据条件跳过(相距距离(事件玩家, 矢量(99, 99, 99)) > 6, 5);
		设置状态(事件玩家, 无, 冰冻, 1);
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("下一次尝试"), 字符串("{0}秒", 1)));
		等待(1, 无视条件);
		事件玩家.J = 假;
		中止;
		设置状态(事件玩家, 无, 冰冻, 事件玩家.T);
		事件玩家.R = 事件玩家.T;
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("下一次尝试"), 字符串("{0}秒", 取整(事件玩家.R, 上))));
		等待(事件玩家.T, 无视条件);
		事件玩家.J = 假;
	}
}

规则("player is frozen")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.J == 真;
	}

	动作
	{
		等待(1, 无视条件);
		事件玩家.R -= 1;
	}
}

规则("create all 60 effects at the beginning of the match")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		创建效果(所有玩家(所有队伍), 火花, 颜色(黄色), 全局.H, 2, 可见，位置和半径);
		创建效果(所有玩家(所有队伍), 火花, 颜色(亮紫色), 全局.H, 2, 可见，位置和半径);
		创建效果(全局.D[1], 有益光环, 颜色(黄色), 全局.A[1], 1, 可见);
		创建效果(全局.D[2], 有益光环, 颜色(黄色), 全局.A[2], 1, 可见);
		创建效果(全局.D[3], 有益光环, 颜色(黄色), 全局.A[3], 1, 可见);
		创建效果(全局.D[4], 有益光环, 颜色(黄色), 全局.A[4], 1, 可见);
		创建效果(全局.D[5], 有益光环, 颜色(黄色), 全局.A[5], 1, 可见);
		创建效果(全局.D[6], 有益光环, 颜色(黄色), 全局.A[6], 1, 可见);
		创建效果(全局.D[7], 有益光环, 颜色(黄色), 全局.A[7], 1, 可见);
		创建效果(全局.D[8], 有益光环, 颜色(黄色), 全局.A[8], 1, 可见);
		创建效果(全局.D[9], 有益光环, 颜色(黄色), 全局.A[9], 1, 可见);
		创建效果(全局.D[10], 有益光环, 颜色(黄色), 全局.A[10], 1, 可见);
		创建效果(全局.D[11], 有益光环, 颜色(黄色), 全局.A[11], 1, 可见);
		创建效果(全局.D[12], 有益光环, 颜色(黄色), 全局.A[12], 1, 可见);
		创建效果(全局.D[13], 有益光环, 颜色(黄色), 全局.A[13], 1, 可见);
		创建效果(全局.D[14], 有益光环, 颜色(黄色), 全局.A[14], 1, 可见);
		创建效果(全局.D[15], 有益光环, 颜色(黄色), 全局.A[15], 1, 可见);
		创建效果(全局.D[16], 有益光环, 颜色(黄色), 全局.A[16], 1, 可见);
		创建效果(全局.D[17], 有益光环, 颜色(黄色), 全局.A[17], 1, 可见);
		创建效果(全局.D[18], 有益光环, 颜色(黄色), 全局.A[18], 1, 可见);
		创建效果(全局.D[19], 有益光环, 颜色(黄色), 全局.A[19], 1, 可见);
		创建效果(全局.D[20], 有益光环, 颜色(黄色), 全局.A[20], 1, 可见);
		创建效果(全局.D[21], 有益光环, 颜色(黄色), 全局.A[21], 1, 可见);
		创建效果(全局.D[22], 有益光环, 颜色(黄色), 全局.A[22], 1, 可见);
		创建效果(全局.D[23], 有益光环, 颜色(黄色), 全局.A[23], 1, 可见);
		创建效果(全局.D[24], 有益光环, 颜色(黄色), 全局.A[24], 1, 可见);
		创建效果(全局.D[25], 有益光环, 颜色(黄色), 全局.A[25], 1, 可见);
		创建效果(全局.D[26], 有益光环, 颜色(黄色), 全局.A[26], 1, 可见);
		创建效果(全局.D[27], 有益光环, 颜色(黄色), 全局.A[27], 1, 可见);
		创建效果(全局.D[28], 有益光环, 颜色(黄色), 全局.A[28], 1, 可见);
		创建效果(全局.D[29], 有益光环, 颜色(黄色), 全局.A[29], 1, 可见);
		创建效果(全局.D[30], 有益光环, 颜色(黄色), 全局.A[30], 1, 可见);
		创建效果(全局.D[31], 有益光环, 颜色(黄色), 全局.A[31], 1, 可见);
		创建效果(全局.D[32], 有益光环, 颜色(黄色), 全局.A[32], 1, 可见);
		创建效果(全局.D[33], 有益光环, 颜色(黄色), 全局.A[33], 1, 可见);
		创建效果(全局.D[34], 有益光环, 颜色(黄色), 全局.A[34], 1, 可见);
		创建效果(全局.D[35], 有益光环, 颜色(黄色), 全局.A[35], 1, 可见);
		创建效果(全局.D[36], 有益光环, 颜色(黄色), 全局.A[36], 1, 可见);
		创建效果(全局.D[37], 有益光环, 颜色(黄色), 全局.A[37], 1, 可见);
		创建效果(全局.D[38], 有益光环, 颜色(黄色), 全局.A[38], 1, 可见);
		创建效果(全局.D[39], 有益光环, 颜色(黄色), 全局.A[39], 1, 可见);
		创建效果(全局.D[40], 有益光环, 颜色(黄色), 全局.A[40], 1, 可见);
		创建效果(全局.D[41], 有益光环, 颜色(黄色), 全局.A[41], 1, 可见);
		创建效果(全局.D[42], 有益光环, 颜色(黄色), 全局.A[42], 1, 可见);
		创建效果(全局.D[43], 有益光环, 颜色(黄色), 全局.A[43], 1, 可见);
		创建效果(全局.D[44], 有益光环, 颜色(黄色), 全局.A[44], 1, 可见);
		创建效果(全局.D[45], 有益光环, 颜色(黄色), 全局.A[45], 1, 可见);
		创建效果(全局.D[46], 有益光环, 颜色(黄色), 全局.A[46], 1, 可见);
		创建效果(全局.D[47], 有益光环, 颜色(黄色), 全局.A[47], 1, 可见);
		创建效果(全局.D[48], 有益光环, 颜色(黄色), 全局.A[48], 1, 可见);
		创建效果(全局.D[49], 有益光环, 颜色(黄色), 全局.A[49], 1, 可见);
		创建效果(全局.D[50], 有益光环, 颜色(黄色), 全局.A[50], 1, 可见);
		创建效果(全局.D[51], 有益光环, 颜色(黄色), 全局.A[51], 1, 可见);
		创建效果(全局.D[52], 有益光环, 颜色(黄色), 全局.A[52], 1, 可见);
		创建效果(全局.D[53], 有益光环, 颜色(黄色), 全局.A[53], 1, 可见);
		创建效果(全局.D[54], 有益光环, 颜色(黄色), 全局.A[54], 1, 可见);
		创建效果(全局.D[55], 有益光环, 颜色(黄色), 全局.A[55], 1, 可见);
		创建效果(全局.D[56], 有益光环, 颜色(黄色), 全局.A[56], 1, 可见);
		创建效果(全局.D[57], 有益光环, 颜色(黄色), 全局.A[57], 1, 可见);
		创建效果(全局.D[58], 有益光环, 颜色(黄色), 全局.A[58], 1, 可见);
		创建效果(全局.D[59], 有益光环, 颜色(黄色), 全局.A[59], 1, 可见);
		创建效果(全局.D[60], 有益光环, 颜色(黄色), 全局.A[60], 1, 可见);
	}
}

规则("shift key is pressed (acceleration)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(技能1)) == 真;
	}

	动作
	{
		设置移动速度(事件玩家, 事件玩家.S);
	}
}

规则("shift key is not pressed (slowdown)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(技能1)) == 假;
	}

	动作
	{
		设置移动速度(事件玩家, 110);
	}
}

规则("teleport cooldown")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.B == 真;
	}

	动作
	{
		等待(2, 无视条件);
		事件玩家.B = 假;
		等待(0.500, 无视条件);
		如条件为”真“则循环;
	}
}

规则("teleport 1")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.B == 假;
		全局.P[1] != 0;
		相距距离(事件玩家, 全局.P[1]) <= 2;
	}

	动作
	{
		传送(事件玩家, 全局.P[2]);
		事件玩家.B = 真;
		播放效果(事件玩家, 有益爆炸, 颜色(蓝色), 事件玩家, 5);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
	}
}

规则("teleport 2")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.B == 假;
		全局.P[2] != 0;
		相距距离(事件玩家, 全局.P[2]) <= 2;
	}

	动作
	{
		传送(事件玩家, 全局.P[1]);
		事件玩家.B = 真;
		播放效果(事件玩家, 有益爆炸, 颜色(蓝色), 事件玩家, 5);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
	}
}

规则("teleport 3")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.B == 假;
		全局.P[3] != 0;
		相距距离(事件玩家, 全局.P[3]) <= 2;
	}

	动作
	{
		传送(事件玩家, 全局.P[4]);
		事件玩家.B = 真;
		播放效果(事件玩家, 有益爆炸, 颜色(蓝色), 事件玩家, 5);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
	}
}

规则("teleport 4")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.B == 假;
		全局.P[4] != 0;
		相距距离(事件玩家, 全局.P[4]) <= 2;
	}

	动作
	{
		传送(事件玩家, 全局.P[3]);
		事件玩家.B = 真;
		播放效果(事件玩家, 有益爆炸, 颜色(蓝色), 事件玩家, 5);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
	}
}

规则("acceleration after finding a group of items")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.A > 0;
		事件玩家.S <= 300;
		全局.G > 0;
		事件玩家.Q < 全局.O;
	}

	动作
	{
		事件玩家.S += 150 / 全局.G;
		等待(1, 无视条件);
		大字体信息(事件玩家, 字符串("{0} {1}", 字符串("速度"), 字符串("升级")));
		等待(2, 无视条件);
		小字体信息(事件玩家, 字符串("{0} - {1}", 自定义字符串("[SHIFT]"), 字符串("运行")));
	}
}

规则("player found the last item in the group 1-5")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.A > 0;
		事件玩家.A <= 5;
	}

	动作
	{
		事件玩家.N = 1;
		根据条件跳过(事件玩家.A != 事件玩家.N, 2);
		消除HUD文本(事件玩家.E[事件玩家.N]);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 字符串("{0} / {1}", 全局.C[1], 全局.C[1]), 图标字符串(对号)), 无, 无, 左边, 1, 颜色(绿色), 颜色(白色), 颜色(白色), 可见和字符串, 始终不可见);
		事件玩家.N = 2;
		根据条件跳过(事件玩家.A != 事件玩家.N, 2);
		消除HUD文本(事件玩家.E[事件玩家.N]);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 字符串("{0} / {1}", 全局.C[2], 全局.C[2]), 图标字符串(对号)), 无, 无, 左边, 2, 颜色(绿色), 颜色(白色), 颜色(白色), 可见和字符串, 始终不可见);
		事件玩家.N = 3;
		根据条件跳过(事件玩家.A != 事件玩家.N, 2);
		消除HUD文本(事件玩家.E[事件玩家.N]);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 字符串("{0} / {1}", 全局.C[3], 全局.C[3]), 图标字符串(对号)), 无, 无, 左边, 3, 颜色(绿色), 颜色(白色), 颜色(白色), 可见和字符串, 始终不可见);
		事件玩家.N = 4;
		根据条件跳过(事件玩家.A != 事件玩家.N, 2);
		消除HUD文本(事件玩家.E[事件玩家.N]);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 字符串("{0} / {1}", 全局.C[4], 全局.C[4]), 图标字符串(对号)), 无, 无, 左边, 4, 颜色(绿色), 颜色(白色), 颜色(白色), 可见和字符串, 始终不可见);
		事件玩家.N = 5;
		根据条件跳过(事件玩家.A != 事件玩家.N, 2);
		消除HUD文本(事件玩家.E[事件玩家.N]);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 字符串("{0} / {1}", 全局.C[5], 全局.C[5]), 图标字符串(对号)), 无, 无, 左边, 5, 颜色(绿色), 颜色(白色), 颜色(白色), 可见和字符串, 始终不可见);
		事件玩家.A = 0;
	}
}

规则("player found the last item in the group 6-10")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.A > 5;
		事件玩家.A <= 10;
	}

	动作
	{
		事件玩家.N = 6;
		根据条件跳过(事件玩家.A != 事件玩家.N, 2);
		消除HUD文本(事件玩家.E[事件玩家.N]);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 字符串("{0} / {1}", 全局.C[6], 全局.C[6]), 图标字符串(对号)), 无, 无, 左边, 6, 颜色(绿色), 颜色(白色), 颜色(白色), 可见和字符串, 始终不可见);
		事件玩家.N = 7;
		根据条件跳过(事件玩家.A != 事件玩家.N, 2);
		消除HUD文本(事件玩家.E[事件玩家.N]);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 字符串("{0} / {1}", 全局.C[7], 全局.C[7]), 图标字符串(对号)), 无, 无, 左边, 7, 颜色(绿色), 颜色(白色), 颜色(白色), 可见和字符串, 始终不可见);
		事件玩家.N = 8;
		根据条件跳过(事件玩家.A != 事件玩家.N, 2);
		消除HUD文本(事件玩家.E[事件玩家.N]);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 字符串("{0} / {1}", 全局.C[8], 全局.C[8]), 图标字符串(对号)), 无, 无, 左边, 8, 颜色(绿色), 颜色(白色), 颜色(白色), 可见和字符串, 始终不可见);
		事件玩家.N = 9;
		根据条件跳过(事件玩家.A != 事件玩家.N, 2);
		消除HUD文本(事件玩家.E[事件玩家.N]);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 字符串("{0} / {1}", 全局.C[9], 全局.C[9]), 图标字符串(对号)), 无, 无, 左边, 9, 颜色(绿色), 颜色(白色), 颜色(白色), 可见和字符串, 始终不可见);
		事件玩家.N = 10;
		根据条件跳过(事件玩家.A != 事件玩家.N, 2);
		消除HUD文本(事件玩家.E[事件玩家.N]);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 字符串("{0} / {1}", 全局.C[10], 全局.C[10]), 图标字符串(对号)), 无, 无, 左边, 10, 颜色(绿色), 颜色(白色), 颜色(白色), 可见和字符串,
			始终不可见);
		事件玩家.A = 0;
	}
}

规则("infinite match time")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		比赛时间 <= 1800;
	}

	动作
	{
		设置比赛时间(3600);
	}
}

规则("updating data after a player leaves the game")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		全局.T == 0;
	}

	动作
	{
		全局.R = 全局.S[全局.T];
		根据条件跳过(全局.R == 无, 7);
		根据条件跳过(已重生(全局.R), 6);
		全局.Q += 1;
		在索引处修改全局变量(D, 全局.Q, 根据值从数组中移除, 全局.R);
		等待(0.025, 无视条件);
		根据条件跳过(全局.Q < 60, 1);
		修改全局变量(S, 根据值从数组中移除, 全局.R);
		根据条件循环(全局.Q < 60);
		全局.T += 1;
		全局.Q = 0;
		等待(0.025, 无视条件);
		根据条件循环(全局.T < 12);
	}
}

规则("bug protection")
{
	事件
	{
		玩家离开比赛;
		双方;
		全部;
	}

	动作
	{
		设置慢动作(100);
	}
}

规则("message 1")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
	}

	动作
	{
		消除HUD文本(事件玩家.AA);
		创建HUD文本(事件玩家, 图标字符串(问号), 自定义字符串("Find items from the list"), 自定义字符串("Press [F] (Interact button) when you are close to the item"),
			顶部, 1, 颜色(青绿色), 颜色(白色), 颜色(青绿色), 字符串, 始终不可见);
		事件玩家.AA = 上一个文本ID;
	}
}

规则("message 2")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.Q == 3;
	}

	动作
	{
		消除HUD文本(事件玩家.AA);
		创建HUD文本(事件玩家, 图标字符串(感叹号), 自定义字符串("Set high or ultra model detail settings to see all items"), 自定义字符串(
			"Options > Video > Graphics quality > Advanced > Model Detail"), 顶部, 1, 颜色(黄色), 颜色(白色), 颜色(黄色), 字符串, 始终不可见);
		事件玩家.AA = 上一个文本ID;
	}
}

规则("message 3")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.Q == 1;
	}

	动作
	{
		消除HUD文本(事件玩家.AA);
	}
}

规则("message 4")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.Q == 5;
	}

	动作
	{
		消除HUD文本(事件玩家.AA);
	}
}
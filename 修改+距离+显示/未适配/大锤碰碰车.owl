设置
{
	大厅
	{
		地图轮换: 暂停轮换
		数据中心设置: 中国杭州
		比赛结束后转换队伍: 否
		比赛语音聊天: 启用
		观战者人数上限: 6
		返回大厅: 从不
	}

	模式
	{
		禁用 决斗先锋
		{
			占领时间: 7
			无目标点决胜机制时平局时限: 300
			比赛开始后显示英雄位置时间: 180
			目标点决胜机制: 关闭
			目标点决胜机制激活时间: 300
			英雄池上限: 队伍人数+3
			英雄选择: 随机英雄（相同）
			获胜得分: 9
		}

		禁用 占领要点
		{
			竞技比赛规则: 开启
		}

		禁用 攻击护送
		{
			竞技比赛规则: 开启
		}

		禁用 攻防作战
		{
			竞技比赛规则: 开启
		}

		死斗
		{
			主动复生: 关闭
			比赛时长（分钟）: 15
			获胜得分: 50

			启用地图
			{
				圣诞节黑森林
			}
		}

		禁用 运载目标
		{
			竞技比赛规则: 开启
		}

		综合
		{
			复生时间: 0%
			急救包刷新: 开启
			急救包刷新时间: 10%
			游戏模式开始: 手动
			英雄限制: 关闭
		}
	}

	英雄
	{
		综合
		{
			伤害量: 500%
			受到治疗量: 500%
			弹夹容量倍率: 500%
			战斗时终极技能充能速度: 500%
			技能冷却时间: 0%
			治疗量: 500%
			生命值: 500%
			终极技能充能速度: 500%
			终极技能自动充能速度: 500%
			重生时终极技能充能完毕: 开启

			D.Va
			{
				伤害量: 50%
				呼叫机甲击退倍率: 400%
				微型飞弹 冷却时间: 0%
				战斗时终极技能充能速度 自毁: 500%
				推进器 冷却时间: 0%
				推进器击退倍率: 400%
				终极技能充能速度（自毁）: 500%
				终极技能自动充能速度 自毁: 500%
				自毁击退倍率: 200%
				重生时终极技能充能完毕: 开启
				防御矩阵充能速度: 500%
				防御矩阵最长时间: 500%
			}

			半藏
			{
				“岚”数量: 12
				“跃”冷却时间: 0%
				“跃”距离设置: 175%
				岚 冷却时间: 0%
				战斗时终极技能充能速度 竜: 500%
				终极技能充能速度（竜）: 500%
				终极技能自动充能速度 竜: 500%
				重生时终极技能充能完毕: 开启
				音 冷却时间: 0%
			}

			卢西奥
			{
				弹夹容量倍率: 500%
				强音 冷却时间: 0%
				战斗时终极技能充能速度 音障: 500%
				终极技能充能速度（音障）: 500%
				终极技能自动充能速度 音障: 500%
				重生时终极技能充能完毕: 开启
				音波 冷却时间: 0%
				音波击退倍率: 300%
			}

			堡垒
			{
				坦克模式武器击退倍率: 400%
				弹夹容量倍率: 500%
				战斗时终极技能充能速度 坦克模式: 500%
				终极技能充能速度（坦克模式）: 500%
				终极技能持续时间: 500%
				终极技能持续时间无限: 开启
				终极技能自动充能速度 坦克模式: 500%
				自我修复充能速度: 500%
				自我修复最长时间: 500%
				重生时终极技能充能完毕: 开启
			}

			士兵：76
			{
				终极技能持续时间: 300%
				螺旋飞弹击退倍率: 400%
			}

			天使
			{
				重生时终极技能充能完毕: 开启
			}

			安娜
			{
				重生时终极技能充能完毕: 开启
			}

			布丽吉塔
			{
				屏障护盾 冷却时间: 0%
				屏障护盾充能速度: 500%
				流星飞锤击退距离: 300%
				能量盾击击退距离: 300%
			}

			托比昂
			{
				热力过载持续时间: 500%
			}

			末日铁拳
			{
				上勾重拳击退倍率: 300%
				毁天灭地击退倍率: 300%
				火箭重拳击退倍率: 300%
				终极技能持续时间: 500%
			}

			查莉娅
			{
				粒子炮辅助攻击击退倍率: 400%
			}

			法老之鹰
			{
				悬浮背包充能速度: 500%
				悬浮背包无限燃料: 开启
				悬浮背包最长时间: 500%
				火箭发射器击退倍率: 400%
				震荡冲击击退倍率: 300%
			}

			温斯顿
			{
				原始暴怒近身攻击击退倍率: 300%
				喷射背包击退倍率: 400%
				终极技能持续时间: 300%
			}

			源氏
			{
				终极技能持续时间: 300%
			}

			狂鼠
			{
				榴弹发射器击退倍率: 400%
				震荡地雷击退倍率: 200%
			}

			破坏球
			{
				伤害量: 50%
				地雷禁区击退距离: 400%
				工程抓钩击退距离: 400%
				终极技能持续时间: 500%
				终极技能持续时间无限: 开启
			}

			美
			{
				冰冻叠加: 开启
			}

			艾什
			{
				双筒猎枪击退距离（敌方）: 300%
				双筒猎枪击退距离（自身）: 300%
				终极技能持续时间无限: 开启
			}

			莫伊拉
			{
				最大生化能量值: 500%
				生化之球伤害最大值: 500%
				生化之球治疗最大值: 500%
				生化能量回复速度: 500%
				终极技能持续时间无限: 开启
			}

			莱因哈特
			{
				伤害量: 250%
				冲锋 冷却时间: 0%
				冲锋击退倍率: 300%
				受到伤害量: 250%
				受到治疗量: 500%
				屏障力场 冷却时间: 0%
				战斗时终极技能充能速度 裂地猛击: 500%
				火箭重锤击退倍率: 400%
				烈焰打击 冷却时间: 0%
				生命值: 500%
				终极技能充能速度（裂地猛击）: 500%
				终极技能自动充能速度 裂地猛击: 500%
				重生时终极技能充能完毕: 开启
			}

			西格玛
			{
				实验屏障 冷却时间: 0%
				实验屏障充能速度: 500%
				质量吸附击退距离: 300%
			}

			路霸
			{
				鸡飞狗跳击退倍率: 300%
			}

			黑百合
			{
				终极技能持续时间无限: 开启
				重生时终极技能充能完毕: 开启
			}

			启用英雄
			{
				莱因哈特
			}
		}
	}
}

变量
{
	全局:
		0: Position
		1: Radius
		2: Height
		3: Config
		7: stringPick
		17: stringGraspEscape

	玩家:
		0: playerCarried
		1: thrower
		2: closeToPlayer
		4: isChasing
}

规则("")
{
	事件
	{
		玩家受到伤害;
		双方;
		全部;
	}

	动作
	{
		开始持续治疗(事件玩家, 事件玩家, 9999, 10000);
	}
}

规则("")
{
	事件
	{
		玩家受到伤害;
		双方;
		全部;
	}

	动作
	{
		治疗(事件玩家, 事件玩家, 10000);
	}
}

规则("")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		事件玩家.S == 0;
	}

	动作
	{
		开始镜头(事件玩家, 眼睛位置(事件玩家) + 矢量(0, 0.750, 0) + 面朝方向(事件玩家) * -2, 眼睛位置(事件玩家) + 矢量(0, 0.500, 0) + 面朝方向(事件玩家), 50);
		等待(0.250, 当为“真”时重新开始);
		事件玩家.S = 1;
	}
}

规则("第一人称")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		事件玩家.S == 1;
	}

	动作
	{
		停止镜头(事件玩家);
		等待(0.250, 当为“真”时重新开始);
		事件玩家.S = 0;
	}
}

禁用 规则("第三人称")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		事件玩家.S == 0;
	}

	动作
	{
		禁用 开始镜头(事件玩家, 射线命中位置(眼睛位置(事件玩家), 眼睛位置(事件玩家) + 上 * 0.800 - 面朝方向(事件玩家) * 5, 所有玩家(所有队伍), 事件玩家, 真) - 面朝方向(事件玩家) * 0.200, 射线命中位置(眼睛位置(
			事件玩家), 眼睛位置(事件玩家) + 面朝方向(事件玩家) * 1000, 所有玩家(所有队伍), 事件玩家, 真), 40);
		开始镜头(事件玩家, 事件玩家 + 地图矢量(矢量(0, 0, 0), 事件玩家, 旋转) + 上 * 2.500 + 面朝方向(事件玩家) * -5, 事件玩家 + 面朝方向(事件玩家) * 1000, 0);
		创建效果(所有玩家(所有队伍), 火花, 颜色(黄色), 事件玩家, 0.500, 可见，位置和半径);
		等待(0.250, 当为“真”时重新开始);
		事件玩家.S = 1;
		禁用 创建效果(所有玩家(所有队伍), 火花, 颜色(黄色), 事件玩家, 0.500, 可见，位置和半径);
		禁用 等待(0.250, 当为“真”时重新开始);
	}
}

禁用 规则("恢复第一人称")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		事件玩家.S == 1;
	}

	动作
	{
		消除效果(最后创建的实体);
		停止镜头(事件玩家);
		等待(0.250, 当为“真”时重新开始);
		事件玩家.S = 0;
	}
}

规则("蹲下左键攻击 冰冻")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(蹲下)) == 真;
		按钮被按下(事件玩家, 按钮(主要攻击模式)) == 真;
		按钮被按下(事件玩家, 按钮(跳跃)) != 真;
		数组包含(全局.F, 事件玩家) == 真;
	}

	动作
	{
		根据条件中止(数组包含(全局.F, 距离准星最近的玩家(事件玩家, 所有队伍)));
		根据条件跳过(具有状态(距离准星最近的玩家(事件玩家, 所有队伍), 冰冻), 2);
		设置状态(距离准星最近的玩家(事件玩家, 所有队伍), 无, 冰冻, 9999);
		跳过(1);
		清除状态(距离准星最近的玩家(事件玩家, 所有队伍), 冰冻);
	}
}

规则("蹲下右键攻击 变人")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(辅助攻击模式)) == 真;
		按钮被按下(事件玩家, 按钮(蹲下)) == 真;
		数组包含(全局.F, 事件玩家) == 真;
	}

	动作
	{
		根据条件中止(数组包含(全局.F, 距离准星最近的玩家(事件玩家, 所有队伍)));
		距离准星最近的玩家(事件玩家, 所有队伍).M = 栏位(距离准星最近的玩家(事件玩家, 所有队伍));
		根据条件跳过(所用英雄(距离准星最近的玩家(事件玩家, 所有队伍)) == 英雄(莱因哈特), 3);
		开始强制玩家选择英雄(距离准星最近的玩家(事件玩家, 所有队伍), 英雄(莱因哈特));
		禁用 清除状态(距离准星最近的玩家(事件玩家, 所有队伍), 被入侵);
		跳过(3);
		开始强制玩家选择英雄(距离准星最近的玩家(事件玩家, 所有队伍), 数组随机取值(全局.K));
		禁用 设置状态(距离准星最近的玩家(事件玩家, 所有队伍), 无, 被入侵, 9999);
	}
}

规则("蹲下+e技能 消散")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(蹲下)) == 真;
		按钮被按下(事件玩家, 按钮(技能2)) == 真;
		数组包含(全局.F, 事件玩家) == 真;
	}

	动作
	{
		根据条件跳过(具有状态(事件玩家, 消散), 3);
		设置状态(事件玩家, 无, 消散, 9999);
		设置玩家分数(事件玩家, 0);
		跳过(2);
		清除状态(事件玩家, 消散);
		设置玩家分数(事件玩家, 0);
		交流(事件玩家, 语音（上）);
	}
}

规则("蹲+终极技能 隐身")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(终极技能)) == 真;
		按钮被按下(事件玩家, 按钮(蹲下)) == 真;
		数组包含(全局.F, 事件玩家) == 真;
	}

	动作
	{
		根据条件跳过(事件玩家.Y, 3);
		设置不可见(事件玩家, 全部);
		事件玩家.Y = 真;
		跳过(2);
		设置不可见(所有玩家(所有队伍), 无);
		事件玩家.Y = 假;
	}
}

规则("全局变量")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.I = 矢量(82.906, 133.002, -17.038);
		全局.F = 空数组;
		全局.G = 0;
		全局.stringPick = 0;
		全局.K = 全部英雄;
	}
}

规则("集合 传送")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		正在交流(事件玩家, 集合) == 真;
		数组包含(全局.F, 事件玩家) == 真;
	}

	动作
	{
		根据条件中止(数组包含(全局.F, 距离准星最近的玩家(事件玩家, 所有队伍)));
		传送(距离准星最近的玩家(事件玩家, 所有队伍), 主机玩家);
		等待(0, 无视条件);
	}
}

禁用 规则("收到 传送到外太空")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		正在交流(事件玩家, 我跟着你) == 真;
		数组包含(全局.F, 事件玩家) == 真;
	}

	动作
	{
		传送(事件玩家, 矢量(-13.210, 46.557, -24.467));
		等待(0, 无视条件);
	}
}

规则("收到 传送到外太空")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		正在交流(事件玩家, 收到) == 真;
		数组包含(全局.F, 事件玩家) == 真;
	}

	动作
	{
		传送(事件玩家, 矢量(-19.124, 15.529, 3.162));
		等待(0, 无视条件);
	}
}

规则("按F开始旋转")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		正在交流(事件玩家, 感谢) == 真;
		事件玩家.U == 0;
		禁用 事件玩家.Z == 0;
	}

	动作
	{
		事件玩家.V = 面朝方向(事件玩家);
		事件玩家.U = 1;
		根据条件跳过(事件玩家.W != 0, 1);
		事件玩家.W = 1500;
		开始镜头(事件玩家, 射线命中位置(眼睛位置(事件玩家), 眼睛位置(事件玩家) + 上 * 2 - 矢量(X方向分量(事件玩家.V), 0, Z方向分量(事件玩家.V)) * 5, 所有玩家(所有队伍), 事件玩家, 真) - 事件玩家.V * 0.200,
			射线命中位置(眼睛位置(事件玩家), 眼睛位置(事件玩家), 所有玩家(所有队伍), 无, 真), 40);
		开始镜头(事件玩家, 射线命中位置(眼睛位置(事件玩家), 眼睛位置(事件玩家) + 上 * 2 - 矢量(X方向分量(事件玩家.V), 0, Z方向分量(事件玩家.V)) * 5, 所有玩家(所有队伍), 事件玩家, 真) - 事件玩家.V * 0.200,
			射线命中位置(眼睛位置(事件玩家), 眼睛位置(事件玩家), 所有玩家(所有队伍), 无, 真), 40);
		设置移动速度(事件玩家, 150);
		开始镜头(事件玩家, 射线命中位置(事件玩家, 事件玩家 + 矢量(0, 事件玩家.thrower, 0), 所有玩家(所有队伍), 事件玩家, 真), 事件玩家 + 矢量(0, 1, 0), 0);
		开始朝向(事件玩家, 左, 2000, 至玩家, 方向及角速率);
		开始转换阈值(事件玩家, 1, 1, 前);
		禁用 开始按下按钮(事件玩家, 按钮(主要攻击模式));
		事件玩家.thrower = 20;
		禁用按钮(事件玩家, 按钮(技能1));
	}
}

规则("旋转循环")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.U > 0;
	}

	动作
	{
		开始朝向(事件玩家, 矢量积(面朝方向(事件玩家), 下), 事件玩家.W, 至地图, 方向及角速率);
		等待(0.050, 无视条件);
		停止朝向(事件玩家);
		如条件为”真“则循环;
	}
}

规则("再按F或使用技能停止旋转")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.U == 1;
		按钮被按下(事件玩家, 按钮(蹲下)) == 真;
	}

	动作
	{
		停止加速(事件玩家);
		事件玩家.U = 0;
		停止镜头(事件玩家);
		停止转换阈值(事件玩家);
		设置移动速度(事件玩家, 100);
		可用按钮(事件玩家, 按钮(技能1));
	}
}

规则("位置0设置房管身份变量")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		栏位(事件玩家) == 0;
	}

	动作
	{
		修改全局变量(F, 添加至数组, 事件玩家);
	}
}

禁用 规则("比赛开始固定复活位置  前3位玩家")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
		栏位(事件玩家) < 3;
	}

	动作
	{
		传送(事件玩家, 矢量(-2, 18, 0));
	}
}

禁用 规则("比赛开始固定复活位置  后3位玩家")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
		栏位(事件玩家) >= 3;
	}

	动作
	{
		传送(事件玩家, 矢量(-2, 18, 10));
	}
}

禁用 规则("死亡复活后固定复活位置  前3位玩家")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		存活(事件玩家) == 真;
		栏位(事件玩家) < 3;
	}

	动作
	{
		传送(事件玩家, 矢量(-2, 18, 0));
	}
}

禁用 规则("死亡复活后固定复活位置  后3位玩家")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		存活(事件玩家) == 真;
		栏位(事件玩家) >= 3;
	}

	动作
	{
		传送(事件玩家, 矢量(-2, 18, 10));
	}
}

规则("")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(终极技能)) == 真;
		数组包含(全局.F, 事件玩家) == 真;
	}

	动作
	{
		设置终极技能充能(事件玩家, 100);
	}
}

禁用 规则("标志")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		栏位 0;
	}

	动作
	{
		创建效果(所有玩家(所有队伍), 环, 颜色(亮紫色), 事件玩家, 2, 可见，位置和半径);
		全局.Position = 0;
	}
}

禁用 规则("标志")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		栏位 0;
	}

	动作
	{
		创建效果(所有玩家(所有队伍), 环, 颜色(红色), 事件玩家, 1, 可见，位置和半径);
		全局.Position = 0;
	}
}

禁用 规则("标志")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		栏位 0;
	}

	动作
	{
		创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 事件玩家, 3, 可见，位置和半径);
		全局.Position = 0;
	}
}

规则("击退加强")
{
	事件
	{
		玩家造成伤害;
		双方;
		莱因哈特;
	}

	条件
	{
		正在使用主要武器(事件玩家) == 真;
	}

	动作
	{
		施加推力(被攻击方, 事件玩家, 4.500, 至玩家, 合并相反运动);
	}
}

规则("规则 6")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		莱因哈特;
	}

	条件
	{
		具有状态(事件玩家, 击晕) == 真;
		具有状态(事件玩家, 击倒) == 假;
	}

	动作
	{
		设置引力(事件玩家, 40);
	}
}

规则("规则 8")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		莱因哈特;
	}

	条件
	{
		正在使用辅助武器(事件玩家) == 真;
	}

	动作
	{
		设置移动速度(事件玩家, 60);
	}
}

规则("规则 8")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		莱因哈特;
	}

	条件
	{
		正在使用辅助武器(事件玩家) == 假;
	}

	动作
	{
		设置移动速度(事件玩家, 100);
	}
}

规则("击退加强")
{
	事件
	{
		玩家造成伤害;
		双方;
		莱因哈特;
	}

	条件
	{
		正在使用技能 1(事件玩家) == 真;
	}

	动作
	{
		施加推力(被攻击方, 上, 15, 至玩家, 合并相反运动);
	}
}

规则("规则 11")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.Z = 矢量(-28.704, 13.106, 26.689);
	}
}

规则("水车向上的推力")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		莱因哈特;
	}

	条件
	{
		相距距离(事件玩家, 全局.Z) <= 5;
		按钮被按下(事件玩家, 按钮(跳跃)) == 真;
		是否是机器人(事件玩家) == 假;
	}

	动作
	{
		等待(1.500, 当为“假”时中止);
		施加推力(事件玩家, 上, 10, 至地图, 取消相反运动);
		如条件为”真“则循环;
	}
}

规则("规则 6")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		莱因哈特;
	}

	条件
	{
		具有状态(事件玩家, 击晕) == 假;
	}

	动作
	{
		等待(0.300, 无视条件);
		设置引力(事件玩家, 100);
	}
}

规则("Reverse Charge")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		正在使用技能 1(事件玩家) == 真;
		按钮被按下(事件玩家, 按钮(技能2)) == 真;
		数组包含(全局.F, 事件玩家) == 真;
	}

	动作
	{
		根据条件跳过(事件玩家.closeToPlayer, 4);
		根据条件跳过(事件玩家.D, 3);
		根据条件跳过(事件玩家.playerCarried, 1);
		禁用 停止镜头(事件玩家);
		禁用 开始镜头(事件玩家, 眼睛位置(事件玩家) + 矢量(0, 0.750, 0) + 面朝方向(事件玩家) * 2, 眼睛位置(事件玩家) + 矢量(0, 0.500, 0) + 面朝方向(事件玩家), 50);
		事件玩家.D = 真;
		设置移动速度(事件玩家, 0);
		施加推力(事件玩家, 面朝方向(事件玩家), -20, 至地图, 取消相反运动);
		等待(0.250, 无视条件);
		如条件为”真“则循环;
		设置移动速度(事件玩家, 100);
		事件玩家.D = 假;
		根据条件跳过(事件玩家.closeToPlayer, 4);
		根据条件跳过(事件玩家.playerCarried, 1);
		禁用 开始镜头(事件玩家, 眼睛位置(事件玩家) + 矢量(0, 0.750, 0) + 面朝方向(事件玩家) * -2, 眼睛位置(事件玩家) + 矢量(0, 0.500, 0) + 面朝方向(事件玩家), 50);
		根据条件跳过(!事件玩家.playerCarried, 1);
		禁用 停止镜头(事件玩家);
	}
}

规则("生成机器人")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(装填)) == 真;
		按钮被按下(事件玩家, 按钮(蹲下)) == 真;
		数组包含(全局.F, 事件玩家) == 真;
	}

	动作
	{
		生成机器人(英雄(莱因哈特), 所有队伍, -1, 眼睛位置(事件玩家), 面朝方向(事件玩家) * 2);
	}
}

规则("ai动作1")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		是否是机器人(事件玩家) == 真;
		正在使用技能 1(事件玩家) == 假;
		所用英雄(事件玩家) != 英雄(猎空);
	}

	动作
	{
		事件玩家.playerCarried = 数组随机取值(已过滤的数组(从数组中移除(所有存活玩家(所有队伍), 选择英雄的玩家(英雄(莱因哈特), 所有队伍)), 是否是机器人(当前数组元素) == 假));
		禁用 按下按键(事件玩家, 按钮(技能2));
		设置终极技能充能(事件玩家, 100);
		设置状态(事件玩家, 无, 消散, 9999);
		禁用 设置不可见(事件玩家, 全部);
		禁用 按下按键(事件玩家, 按钮(主要攻击模式));
		按下按键(事件玩家, 按钮(技能1));
		等待(0, 无视条件);
		如条件为”真“则循环;
	}
}

禁用 规则("ai动作2")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		是否是机器人(事件玩家) == 真;
	}

	动作
	{
		停止朝向(事件玩家);
		等待(0.100, 无视条件);
		开始朝向(事件玩家, 方向(事件玩家, 事件玩家.playerCarried), 2000, 至玩家, 方向及角速率);
		等待(0.100, 无视条件);
		按下按键(事件玩家, 按钮(技能1));
		While(正在使用技能 1(事件玩家) == 真);
			等待(0.500, 无视条件);
		End;
		开始朝向(事件玩家, 左, 2000, 至玩家, 方向及角速率);
		等待(1.500, 无视条件);
		如条件为”真“则循环;
	}
}

禁用 规则("规则 42")
{
	事件
	{
		玩家造成伤害;
		双方;
		全部;
	}

	条件
	{
		是否是机器人(事件玩家) == 真;
	}

	动作
	{
		施加推力(被攻击方, 方向(事件玩家, 被攻击方), 10000, 至地图, 合并相反运动);
	}
}

规则("移除机器人")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		禁用 按钮被按下(事件玩家, 按钮(互动)) == 真;
		禁用 按钮被按下(事件玩家, 按钮(蹲下)) == 真;
		正在交流(事件玩家, 语音（左）) == 真;
		数组包含(全局.F, 事件玩家) == 真;
	}

	动作
	{
		移除所有机器人;
	}
}

禁用 规则("给")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		禁用 按钮被按下(事件玩家, 按钮(蹲下)) == 真;
		按钮被按下(事件玩家, 按钮(近身攻击)) == 真;
		具有状态(事件玩家, 击倒) == 假;
		数组包含(全局.F, 事件玩家) == 真;
	}

	动作
	{
		事件玩家.F = 栏位(事件玩家);
		事件玩家.F += 面朝方向(事件玩家);
		传送(事件玩家, 眼睛位置(事件玩家) + 面朝方向(事件玩家) * 5);
		事件玩家.F = 5;
		禁用 交流(事件玩家, 问候);
		禁用 创建效果(所有玩家(所有队伍), 有益光环, 颜色(蓝色), 事件玩家, 1, 可见，位置和半径);
		等待(0.100, 无视条件);
		消除效果(最后创建的实体);
	}
}

禁用 规则("规则 46")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(近身攻击)) == 真;
		具有状态(事件玩家, 击倒) == 假;
		数组包含(全局.F, 事件玩家) == 真;
	}

	动作
	{
		设置引力(事件玩家, 10);
		等待(3, 无视条件);
		设置引力(事件玩家, 100);
	}
}

禁用 规则("Run from Blackhole by Rosen#11232 and MercyTraider#1662. Grab the latest code here: workshop.codes/blackhole")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		创建HUD文本(所有玩家(所有队伍), 无, 自定义字符串(""), 无, 右边, -1, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		创建HUD文本(所有玩家(所有队伍), 无, 自定义字符串(""), 无, 右边, 0, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
	}
}

禁用 规则("Configurations || FEEL FREE TO EDIT THESE VALUES TO FIT YOUR PLAYSTYLES.")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.Config[0] = 1.400;
		全局.Config[1] = 真;
		全局.Config[2] = 真;
		全局.Config[3] = 5;
		全局.Config[4] = 假;
		全局.Config[5] = 真;
		全局.Config[6] = 18;
		全局.Config[7] = 8;
		全局.Config[8] = 7.500;
		全局.Config[9] = 真;
		全局.Config[10] = 5;
	}
}

禁用 规则("Create effects and initialize variables")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.Position = 矢量(-225, 50, 4);
		禁用 全局.Position = 矢量(0, 全局.Height, 0);
		创建效果(所有玩家(所有队伍), 有害光环, 颜色(亮紫色), 全局.Position, 全局.Radius, 可见，位置和半径);
		创建效果(所有玩家(所有队伍), 有害光环, 颜色(蓝色), 全局.Position, 全局.Radius, 可见，位置和半径);
		创建效果(所有玩家(所有队伍), 有害光环, 颜色(天蓝色), 全局.Position, 全局.Radius, 可见，位置和半径);
		创建效果(所有玩家(所有队伍), 火花, 颜色(亮紫色), 全局.Position, 全局.Radius, 可见，位置和半径);
		创建效果(所有玩家(所有队伍), 火花, 颜色(蓝色), 全局.Position, 全局.Radius, 可见，位置和半径);
		创建效果(所有玩家(所有队伍), 火花, 颜色(红色), 全局.Position, 全局.Radius, 可见，位置和半径);
		创建效果(所有玩家(所有队伍), 火花, 颜色(白色), 全局.Position, 全局.Radius, 可见，位置和半径);
		创建效果(所有玩家(所有队伍), 火花, 颜色(黄色), 全局.Position, 全局.Radius, 可见，位置和半径);
		创建效果(所有玩家(所有队伍), 火花, 颜色(水绿色), 全局.Position, 全局.Radius, 可见，位置和半径);
		创建效果(所有玩家(所有队伍), 有益光环, 颜色(亮紫色), 全局.Position, 全局.Radius, 可见，位置和半径);
		创建效果(所有玩家(所有队伍), 有益光环, 颜色(蓝色), 全局.Position, 全局.Radius, 可见，位置和半径);
		创建效果(所有玩家(所有队伍), 有益光环, 颜色(红色), 全局.Position, 全局.Radius, 可见，位置和半径);
		创建效果(所有玩家(所有队伍), 有益光环, 颜色(橙色), 全局.Position, 全局.Radius, 可见，位置和半径);
		创建效果(所有玩家(所有队伍), 火花, 颜色(橙色), 全局.Position, 全局.Radius, 可见，位置和半径);
		创建效果(所有玩家(所有队伍), 负面光环音效, 颜色(亮紫色), 全局.Position, 全局.Radius, 可见，位置和半径);
		全局.Radius = 0;
		禁用 全局.Height = 5;
	}
}

禁用 规则("Start round and chase radius")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		禁用 游戏正在进行中 == 真;
	}

	动作
	{
		大字体信息(所有玩家(所有队伍), 自定义字符串(""));
		等待(2, 无视条件);
		大字体信息(所有玩家(所有队伍), 自定义字符串(""));
		等待(1, 无视条件);
		大字体信息(所有玩家(所有队伍), 自定义字符串(""));
		等待(1, 无视条件);
		大字体信息(所有玩家(所有队伍), 自定义字符串(""));
		等待(1, 无视条件);
		大字体信息(所有玩家(所有队伍), 自定义字符串(""));
		追踪全局变量频率(Radius, 1000, 全局.Config[0], 速率及最终值);
		根据条件跳过(全局.Config[4] == 假, 1);
		追踪全局变量频率(Position, 矢量(0, 500, 0), 1.250, 速率及最终值);
	}
}

禁用 规则("Damage while in black hole")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		相距距离(事件玩家, 全局.Position) <= 全局.Radius;
		存活(事件玩家) == 真;
	}

	动作
	{
		禁用 开始持续伤害(事件玩家, 无, 9999, 全局.Radius * 15);
		伤害(事件玩家, 无, 100);
		等待(0.250, 无视条件);
		如条件为”真“则循环;
	}
}

禁用 规则("Black hole's impulse")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		正在交流(事件玩家, 我跟着你) == 真;
		数组包含(全局.F, 事件玩家) == 真;
	}

	动作
	{
		根据条件中止(数组包含(全局.F, 距离准星最近的玩家(事件玩家, 所有队伍)));
		施加推力(距离准星最近的玩家(事件玩家, 所有队伍), 方向(事件玩家, 全局.Position), 1 / 相距距离(全局.Position, 事件玩家) * 全局.Radius * 全局.Config[6], 至地图, 合并相反运动);
		等待(0.020, 无视条件);
		如条件为”真“则循环;
		开始定向阈值(距离准星最近的玩家(事件玩家, 所有队伍), 全局.Position, 全局.Radius / 0, 至地图, 替换现有阈值, 方向和幅度);
		开始加速(距离准星最近的玩家(事件玩家, 所有队伍), 方向(事件玩家, 全局.Position), 2.500 * 全局.Radius, 60, 至地图, 方向，速率，及最大速度);
	}
}

禁用 规则("Grow height")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		禁用 游戏正在进行中 == 真;
		全局.Radius != 0;
		全局.Config[4] == 真;
	}

	动作
	{
		禁用 全局.Position += 矢量(0, 0.250, 0);
		禁用 等待(0.200, 无视条件);
		禁用 如条件为”真“则循环;
		追踪全局变量频率(Position, 矢量(0, 500, 0), 1.250, 速率及最终值);
	}
}

禁用 规则("规则 53")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		正在交流(事件玩家, 我跟着你) == 真;
		数组包含(全局.F, 事件玩家) == 真;
	}

	动作
	{
		根据条件中止(数组包含(全局.F, 距离准星最近的玩家(事件玩家, 所有队伍)));
		事件玩家.playerCarried = 距离准星最近的玩家(事件玩家, 所有队伍);
		跳过(3);
		事件玩家.M = 距离准星最近的玩家(事件玩家, 所有队伍);
	}
}

禁用 规则("规则 54")
{
	事件
	{
		玩家阵亡;
		双方;
		全部;
	}

	条件
	{
		死亡(事件玩家) == 真;
	}

	动作
	{
		停止加速(事件玩家);
		停止定向阈值(事件玩家);
		施加推力(事件玩家, 方向(事件玩家, 全局.Position), 1 / 相距距离(全局.Position, 事件玩家) * 全局.Radius * 全局.Config[6], 至地图, 取消相反运动);
	}
}

规则("水车向上的推力")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		莱因哈特;
	}

	条件
	{
		相距距离(事件玩家, 全局.Z) <= 5;
		正在空中(事件玩家) == 真;
		是否是机器人(事件玩家) == 假;
	}

	动作
	{
		等待(3, 当为“假”时中止);
		施加推力(事件玩家, 上, 10, 至地图, 取消相反运动);
		如条件为”真“则循环;
	}
}

规则("Rule 50")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(辅助攻击模式)) == 真;
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		数组包含(全局.F, 事件玩家) == 真;
	}

	动作
	{
		停止调整玩家大小(事件玩家);
		停止修改英雄语音(事件玩家);
	}
}

规则("Rule 49")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(辅助攻击模式)) == 真;
		按钮被按下(事件玩家, 按钮(装填)) == 真;
		数组包含(全局.F, 事件玩家) == 真;
	}

	动作
	{
		开始调整玩家大小(事件玩家, 0.200, 假);
		开始修改英雄语音(事件玩家, 2, 假);
	}
}

规则("Rule 49")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(辅助攻击模式)) == 真;
		按钮被按下(事件玩家, 按钮(技能2)) == 真;
		数组包含(全局.F, 事件玩家) == 真;
	}

	动作
	{
		开始调整玩家大小(事件玩家, 2.500, 假);
		开始修改英雄语音(事件玩家, 0.500, 假);
	}
}

禁用 规则("机器人默认变小")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		是否是机器人(事件玩家) == 真;
	}

	动作
	{
		开始调整玩家大小(事件玩家, 0.200, 假);
		开始修改英雄语音(事件玩家, 2, 假);
	}
}

规则("玩家换英雄")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		正在交流(事件玩家, 需要治疗) == 真;
		数组包含(全局.F, 事件玩家) == 真;
		已重生(事件玩家) == 真;
	}

	动作
	{
		禁用 事件玩家.T[100] = 终极技能充能百分比(事件玩家);
		禁用 事件玩家.T[250] = 1;
		禁用 事件玩家.T[999] = 所选位置(事件玩家);
		禁用 事件玩家.T[997] = 面朝方向(事件玩家);
		禁用 事件玩家.T[996] = 标准化生命值(事件玩家);
		设置玩家可选的英雄(事件玩家, 从数组中移除(全部英雄, 所用英雄(事件玩家)));
		禁用 事件玩家.T[520] = 上一个文本ID;
		等待(0.500, 无视条件);
		设置玩家可选的英雄(事件玩家, 全部英雄);
	}
}

规则("子弹变慢")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
		按钮被按下(事件玩家, 按钮(跳跃)) == 真;
		数组包含(全局.F, 事件玩家) == 真;
		按钮被按下(事件玩家, 按钮(装填)) == 真;
	}

	动作
	{
		If(事件玩家.closeToPlayer != 真);
			设置弹道速度(事件玩家, -100);
			事件玩家.closeToPlayer = 真;
			设置弹道引力(事件玩家, 0);
		Else;
			设置弹道速度(事件玩家, 100);
			事件玩家.closeToPlayer = 假;
			设置弹道引力(事件玩家, 100);
	}
}

规则("位置11设置取消房管身份变量")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		栏位(事件玩家) == 11;
	}

	动作
	{
		修改全局变量(F, 根据值从数组中移除, 事件玩家);
		开始强制玩家选择英雄(事件玩家, 英雄(莱因哈特));
		停止强制玩家选择英雄(事件玩家);
		开始调整玩家大小(事件玩家, 1, 假);
		开始修改英雄语音(事件玩家, 1, 假);
		清除状态(事件玩家, 消散);
	}
}

规则("子弹变慢")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		是否是机器人(事件玩家) == 真;
	}

	动作
	{
		If(事件玩家.closeToPlayer != 真);
			设置弹道速度(事件玩家, -100);
			事件玩家.closeToPlayer = 真;
			设置弹道引力(事件玩家, 0);
		Else;
			设置弹道速度(事件玩家, 100);
			事件玩家.closeToPlayer = 假;
			设置弹道引力(事件玩家, 100);
	}
}

规则("ai动作1")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		是否是机器人(事件玩家) == 真;
		正在使用技能 1(事件玩家) == 假;
		所用英雄(事件玩家) == 英雄(猎空);
	}

	动作
	{
		事件玩家.playerCarried = 数组随机取值(已过滤的数组(从数组中移除(所有存活玩家(所有队伍), 选择英雄的玩家(英雄(莱因哈特), 所有队伍)), 是否是机器人(当前数组元素) == 假));
		禁用 按下按键(事件玩家, 按钮(技能2));
		设置终极技能充能(事件玩家, 100);
		禁用 设置不可见(事件玩家, 全部);
		禁用 按下按键(事件玩家, 按钮(主要攻击模式));
		按下按键(事件玩家, 按钮(终极技能));
		等待(3, 无视条件);
		设置状态(事件玩家, 无, 消散, 9999);
		设置不可见(事件玩家, 全部);
		如条件为”真“则循环;
	}
}

规则("Rule 63")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		正在使用技能 1(主机玩家) == 真;
	}

	动作
	{
		事件玩家.Z = 所选位置(事件玩家);
		事件玩家.Y = 面朝方向(事件玩家);
	}
}

规则("Rule 64")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(主机玩家, 按钮(蹲下)) == 真;
		按钮被按下(主机玩家, 按钮(近身攻击)) == 真;
	}

	动作
	{
		传送(主机玩家, 全局.Z);
		设置朝向(主机玩家, 全局.Y, 至地图);
	}
}

规则("Rule 64")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.Y = 矢量(0.335, 0.006, -0.942);
		全局.Z = 矢量(-12.127, 13.308, 17.251);
	}
}

规则("Block#12425 - Pickup player")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(近身攻击)) == 真;
		实体存在(事件玩家.playerCarried) == 假;
		禁用 事件玩家.closeToPlayer == 真;
		具有状态(事件玩家, 击倒) == 假;
		实体存在(首个(已排序的数组(已过滤的数组(所有玩家(所有队伍), 具有状态(当前数组元素, 击倒) == 真 && 当前数组元素 != 事件玩家 && 相距距离(事件玩家, 当前数组元素) <= 3 && 实体存在(当前数组元素.thrower)
			== 假 && 在地面上(当前数组元素) == 真), 相距距离(事件玩家, 当前数组元素)))) == 真;
	}

	动作
	{
		事件玩家.playerCarried = 首个(已排序的数组(已过滤的数组(所有玩家(所有队伍), 具有状态(当前数组元素, 击倒) == 真 && 当前数组元素 != 事件玩家), 相距距离(当前数组元素, 事件玩家)));
		事件玩家.playerCarried.thrower = 事件玩家;
		绑定玩家(事件玩家.playerCarried, 事件玩家, 矢量(0, 2, 0));
		播放效果(事件玩家, 正面状态施加声音, 颜色(白色), 事件玩家, 200);
		小字体信息(事件玩家, 自定义字符串("{0} {1}！", 全局.stringPick, 事件玩家.playerCarried));
		等待(0.250, 无视条件);
	}
}

规则("Block#12425 - Reset Thrower")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		在地面上(事件玩家) == 真;
		事件玩家.thrower.playerCarried == 无;
	}

	动作
	{
		等待(0.500, 当为“假”时中止);
		事件玩家.thrower = 无;
	}
}

规则("Block#12425 - Sleep Setup With Player")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		具有状态(事件玩家, 击倒) == 真;
		实体存在(事件玩家.playerCarried) == 真;
	}

	动作
	{
		解除绑定(已排序的数组(已过滤的数组(所有玩家(所有队伍), 相距距离(所选位置(事件玩家) + 矢量(0, 2, 0), 所选位置(当前数组元素)) <= 0.500), 相距距离(所选位置(事件玩家) + 矢量(0, 2, 0), 所选位置(
			当前数组元素))));
		解除绑定(已排序的数组(已过滤的数组(所有玩家(所有队伍), 相距距离(所选位置(事件玩家) + 矢量(0, 4, 0), 所选位置(当前数组元素)) <= 0.500), 相距距离(所选位置(事件玩家) + 矢量(0, 4, 0), 所选位置(
			当前数组元素))));
		事件玩家.playerCarried = 无;
	}
}

规则("Block#12425 - Sleep Setup")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		具有状态(事件玩家, 击倒) == 真;
	}

	动作
	{
		设置技能冷却(事件玩家, 按钮(技能1), 0);
	}
}

规则("Block#12425 - Throw player")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(装填)) == 真;
		实体存在(事件玩家.playerCarried) == 真;
		具有状态(事件玩家, 击倒) == 假;
	}

	动作
	{
		解除绑定(事件玩家.playerCarried);
		施加推力(事件玩家.playerCarried, 矢量(X方向分量(面朝方向(事件玩家)), -0.100, Z方向分量(面朝方向(事件玩家))), 40, 至地图, 取消相反运动);
		事件玩家.playerCarried = 无;
	}
}

规则("Block#12425 - Escape from grasp")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		具有状态(事件玩家, 击倒) == 假;
		实体存在(事件玩家.thrower.playerCarried) == 真;
		按钮被按下(事件玩家, 按钮(跳跃)) == 真;
		事件玩家.thrower.playerCarried == 事件玩家;
	}

	动作
	{
		解除绑定(事件玩家);
		小字体信息(事件玩家.thrower, 自定义字符串("{0}{1}", 事件玩家, 全局.stringGraspEscape));
		事件玩家.thrower.playerCarried = 无;
		If(是否是机器人(事件玩家.thrower) == 真);
			事件玩家.thrower.isChasing = 假;
		End;
		事件玩家.thrower = 无;
	}
}

规则("Block#12425 - Detach Backup")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.thrower.playerCarried == 无;
	}

	动作
	{
		解除绑定(事件玩家);
	}
}

规则("Block#12425 - Turn on closest player")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		实体存在(首个(已排序的数组(已过滤的数组(所有玩家(所有队伍), 具有状态(当前数组元素, 击倒) == 真 && 当前数组元素 != 事件玩家 && 相距距离(事件玩家, 当前数组元素) <= 3 && 实体存在(当前数组元素.thrower)
			== 假 && 在地面上(当前数组元素) == 真), 相距距离(事件玩家, 当前数组元素)))) == 真;
	}

	动作
	{
		事件玩家.closeToPlayer = 真;
		等待(0.100, 无视条件);
		If(事件玩家.closeToPlayer == 假);
			如条件为”真“则循环;
	}
}

规则("Block#12425 - Turn off closest player")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		实体存在(首个(已排序的数组(已过滤的数组(所有玩家(所有队伍), 具有状态(当前数组元素, 击倒) == 真 && 当前数组元素 != 事件玩家 && 相距距离(事件玩家, 当前数组元素) <= 3 && 实体存在(当前数组元素.thrower)
			== 假 && 在地面上(当前数组元素) == 真), 相距距离(事件玩家, 当前数组元素)))) == 假;
	}

	动作
	{
		事件玩家.closeToPlayer = 假;
		等待(0.100, 无视条件);
		If(事件玩家.closeToPlayer == 真);
			如条件为”真“则循环;
	}
}

规则("Block#12425 - Too Far Gone kill credit")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		Y方向分量(所选位置(事件玩家)) < -5;
	}

	动作
	{
		击杀(事件玩家, 事件玩家.thrower);
		解除绑定(事件玩家.playerCarried);
		设置终极技能充能(事件玩家.thrower, 终极技能充能百分比(事件玩家.thrower) + 20);
		等待(0.250, 无视条件);
		事件玩家.playerCarried = 无;
		事件玩家.thrower = 无;
		事件玩家.closeToPlayer = 假;
	}
}

规则("CancelPrimary")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(近身攻击)) == 真;
	}

	动作
	{
		取消主要动作(事件玩家);
		清除状态(事件玩家, 击晕);
		清除状态(事件玩家, 击倒);
	}
}
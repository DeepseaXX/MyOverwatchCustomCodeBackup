设置
{
	主程序
	{
		描述: "这是哪儿——铁坂★在地图上寻找神秘地点 ★点击右键可以看到一个神秘图片，找到这个地方，对物品按下互动键（默认F）得到下一张照片，先找完的人获胜！ ★建议设置为中高模型特效获取更好的游戏体验★游戏结束后会获得奖励 ★按[shift]奔跑 ★提示和更多地图在owmod.net搜索★ Made by Foren#2660 ★ 国服搬运工：TJUKDLin#5776"
	}

	大厅
	{
		地图轮换: 暂停轮换
		比赛结束后转换队伍: 否
		比赛语音聊天: 启用
		观战者人数上限: 3
		返回大厅: 从不
	}

	模式
	{
		死斗
		{
			主动复生: 关闭

			启用地图
			{
				铁坂
			}
		}

		综合
		{
			急救包刷新: 禁用
			消灭提示: 关闭
			消灭镜头: 关闭
			游戏模式开始: 即时
			英雄限制: 关闭
		}
	}

	英雄
	{
		综合
		{
			主要攻击模式: 关闭
			技能冷却时间: 500%
			终极技能: 关闭
			近身攻击: 关闭
			重生时终极技能充能完毕: 开启

			D.Va
			{
				主要攻击模式: 关闭
				微型飞弹: 关闭
				推进器: 关闭
				终极技能（自毁）: 关闭
				近身攻击: 关闭
				防御矩阵: 关闭
			}

			卢西奥
			{
				主要攻击模式: 关闭
				切歌: 关闭
				强音: 关闭
				终极技能（音障）: 关闭
				近身攻击: 关闭
				音波: 关闭
			}

			禁用英雄
			{
				半藏
				死神
				破坏球
			}
		}
	}
}

变量
{
	全局:
		26: AA
		27: AB
		28: AC
		29: AD

	玩家:
		26: AA
}

规则("// copy and paste the following line into the game title: *")
{
	事件
	{
		持续 - 全局;
	}
}

规则("WHERE IS IT? ★ Kanezaka ★ No Limits")
{
	事件
	{
		持续 - 全局;
	}
}

规则("// all maps and additional info: bit.do/whereisit")
{
	事件
	{
		持续 - 全局;
	}
}

规则("// \"WHERE IS IT?\" ver. 1.4")
{
	事件
	{
		持续 - 全局;
	}
}

规则("// original mode is made by Foren#2660")
{
	事件
	{
		持续 - 全局;
	}
}

规则("intro *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.I == 真;
	}

	动作
	{
		设置状态(事件玩家, 无, 定身, 99);
		开始镜头(事件玩家, 矢量(-51.506, 9.704, 8.746), 矢量(-51.503, 9.699, 9.016), 0);
		等待(1, 无视条件);
		开始镜头(事件玩家, 矢量(-51.506, 9.704, 8.746), 矢量(-51.503, 9.699, 9.016), 0);
		等待(0.500, 无视条件);
		开始镜头(事件玩家, 矢量(-51.506, 10.364, 8.746), 矢量(-51.499, 10.353, 9.406), 0.600);
		等待(1, 无视条件);
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("欢迎"), 字符串("{0}！", 事件玩家)));
		等待(5, 无视条件);
		开始镜头(事件玩家, 矢量(-51.811, 10.294, 9.168), 矢量(-51.808, 10.289, 9.318), 4);
		等待(2, 无视条件);
		开始镜头(事件玩家, 矢量(85.277, 134.930, -109.992), 矢量(83.495, 134.725, -111.846), 0);
		等待(1, 无视条件);
		开始镜头(事件玩家, 矢量(-51.811, 10.294, 9.168), 矢量(-51.808, 10.289, 9.318), 0);
		等待(0.500, 无视条件);
		开始镜头(事件玩家, 矢量(-51.270, 10.139, 9.224), 矢量(-51.266, 10.139, 9.344), 4);
		等待(2, 无视条件);
		开始镜头(事件玩家, 矢量(-560.767, 324.780, -205.170), 矢量(-587.440, 324.440, -213.446), 0);
		等待(1, 无视条件);
		开始镜头(事件玩家, 矢量(-51.270, 10.139, 9.224), 矢量(-51.266, 10.139, 9.344), 0);
		等待(0.500, 无视条件);
		开始镜头(事件玩家, 矢量(-51.684, 9.761, 9.304), 矢量(-51.683, 9.762, 9.514), 4);
		等待(2, 无视条件);
		开始镜头(事件玩家, 矢量(-7.279, 14.052, -40.551), 矢量(-8.551, 14.228, -39.164), 0);
		等待(1, 无视条件);
		开始镜头(事件玩家, 矢量(-51.684, 9.761, 9.304), 矢量(-51.683, 9.762, 9.514), 0);
		等待(0.500, 无视条件);
		开始镜头(事件玩家, 矢量(-51.276, 9.666, 9.270), 矢量(-51.276, 9.657, 9.450), 4);
		等待(2, 无视条件);
		开始镜头(事件玩家, 矢量(-36.883, 28.897, 2.918), 矢量(-36.879, 28.126, 9.976), 0);
		等待(1, 无视条件);
		开始镜头(事件玩家, 矢量(-51.276, 9.666, 9.270), 矢量(-51.276, 9.657, 9.450), 0);
		等待(0.500, 无视条件);
		开始镜头(事件玩家, 矢量(-51.255, 9.866, 9.261), 矢量(-51.255, 9.863, 9.351), 4);
		等待(1.500, 无视条件);
		开始镜头(事件玩家, 矢量(-13.136, 11.437, 18.288), 矢量(-11.789, 11.533, 17.448), 0);
		等待(1, 无视条件);
		开始镜头(事件玩家, 矢量(-51.255, 9.866, 9.261), 矢量(-51.255, 9.863, 9.351), 0);
		等待(0.500, 无视条件);
		开始镜头(事件玩家, 矢量(-51.374, 9.480, 9.271), 矢量(-51.372, 9.488, 9.451), 4);
		等待(2, 无视条件);
		开始镜头(事件玩家, 矢量(-9.856, 7.848, 16.107), 矢量(-9.122, 7.929, 17.308), 0);
		等待(1, 无视条件);
		开始镜头(事件玩家, 矢量(-51.374, 9.480, 9.271), 矢量(-51.372, 9.488, 9.451), 0);
		等待(0.500, 无视条件);
		开始镜头(事件玩家, 矢量(-51.744, 9.472, 9.281), 矢量(-51.744, 9.477, 9.491), 4);
		等待(2, 无视条件);
		开始镜头(事件玩家, 矢量(4.068, 11.428, -35.222), 矢量(5.448, 11.461, -35.220), 0);
		等待(1, 无视条件);
		开始镜头(事件玩家, 矢量(-51.744, 9.472, 9.281), 矢量(-51.744, 9.477, 9.491), 0);
		等待(0.500, 无视条件);
		开始镜头(事件玩家, 矢量(-51.190, 9.487, 9.290), 矢量(-51.185, 9.484, 9.440), 4);
		等待(2, 无视条件);
		开始镜头(事件玩家, 矢量(-12.016, 12.187, 36.126), 矢量(-12.314, 12.152, 36.129), 0);
		等待(1, 无视条件);
		开始镜头(事件玩家, 矢量(-51.190, 9.487, 9.290), 矢量(-51.185, 9.484, 9.440), 0);
		等待(0.500, 无视条件);
		开始镜头(事件玩家, 矢量(-51.582, 9.412, 9.274), 矢量(-51.584, 9.411, 9.364), 4);
		等待(2, 无视条件);
		开始镜头(事件玩家, 矢量(3.358, 11.749, 10.557), 矢量(4.241, 11.686, 11.412), 0);
		等待(1, 无视条件);
		开始镜头(事件玩家, 矢量(-51.582, 9.412, 9.274), 矢量(-51.584, 9.411, 9.364), 0);
		等待(0.500, 无视条件);
		开始镜头(事件玩家, 矢量(-51.488, 9.762, 9.090), 矢量(-51.482, 9.754, 9.390), 4);
		等待(2, 无视条件);
		开始镜头(事件玩家, 矢量(-63.048, 28.396, -9.987), 矢量(-61.345, 28.239, -9.978), 0);
		等待(1, 无视条件);
		开始镜头(事件玩家, 矢量(-51.478, 9.722, 10.350), 矢量(-51.480, 9.721, 10.080), 0);
		等待(0.500, 无视条件);
		开始镜头(事件玩家, 矢量(-51.457, 9.731, 12.960), 矢量(-51.478, 9.722, 10.350), 0.500);
		等待(2, 无视条件);
		传送(事件玩家, 矢量(-51.428, 9.550, 12.809));
		设置朝向(事件玩家, 矢量(0, 0, -1), 至地图);
		等待(3, 无视条件);
		事件玩家.I = 假;
		停止镜头(事件玩家);
		事件玩家.T = 真;
		清除状态(事件玩家, 定身);
		事件玩家.M = 真;
		设置不可见(事件玩家, 无);
	}
}

规则("outro *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.Z == 1;
	}

	动作
	{
		事件玩家.Z = 2;
		事件玩家.W = 真;
		消除效果(事件玩家.E[5]);
		消除效果(事件玩家.E[6]);
		设置状态(事件玩家, 无, 定身, 9999);
		传送(事件玩家, 矢量(-18.760, 38.557, 110.492));
		全局.W = 真;
		开始镜头(事件玩家, 矢量(15.613, 31.546, 160.568), 矢量(5.853, 25.817, 145.145), 0);
		等待(0.100, 无视条件);
		开始调整玩家大小(事件玩家, 20, 真);
		设置朝向(事件玩家, 矢量(10, 0.150, 0.080), 至地图);
		设置不可见(事件玩家, 无);
		开始镜头(事件玩家, 矢量(15.613, 45.615, 160.568), 矢量(-15.768, 62.589, 109.618), 1);
		等待(2, 无视条件);
		全局.K = 假;
		大字体信息(所有玩家(所有队伍), 字符串("{0} {1} {2}", 英雄图标字符串(所用英雄(事件玩家)), 事件玩家, 字符串("{0}！", 字符串("胜者"))));
		等待(2, 无视条件);
		设置慢动作(30);
		等待(0.300, 无视条件);
		交流(事件玩家, 表情（上）);
		开始镜头(事件玩家, 矢量(-64.292, 44.990, 164.933), 矢量(-15.768, 62.589, 109.618), 3);
		等待(0.300, 无视条件);
		开始镜头(事件玩家, 矢量(-77.421, 53.252, 96.045), 矢量(-15.768, 62.589, 109.618), 3);
		等待(0.300, 无视条件);
		开始镜头(事件玩家, 矢量(-42.074, 57.955, 79.155), 矢量(-15.768, 62.589, 109.618), 3);
		等待(0.300, 无视条件);
		开始镜头(事件玩家, 矢量(11.823, 60.521, 95.902), 矢量(-15.768, 62.589, 109.618), 3);
		等待(0.300, 无视条件);
		开始镜头(事件玩家, 矢量(8.202, 61.388, 110.557), 矢量(-15.768, 62.589, 109.618), 3);
		等待(2, 无视条件);
		设置慢动作(100);
		等待(3, 无视条件);
		开始镜头(事件玩家, 矢量(22.646, 68.845, 144.410), 矢量(-4.735, 63.052, 103.703), 0);
		大字体信息(事件玩家, 字符串("{0}！", 字符串("恭喜")));
		等待(3, 无视条件);
		停止镜头(事件玩家);
		全局.W = 假;
		停止调整玩家大小(事件玩家);
		清除状态(事件玩家, 定身);
		等待(10, 无视条件);
		播放效果(事件玩家, 状态爆炸声音, 颜色(白色), 事件玩家, 10);
		消除HUD文本(事件玩家.AA);
		等待(0.250, 无视条件);
		创建HUD文本(事件玩家, 图标字符串(对号), 自定义字符串("Try other maps!"), 自定义字符串("bit.do/whereisit "), 顶部, 1, 颜色(灰绿色), 颜色(白色), 颜色(灰绿色), 字符串, 默认可见度);
		事件玩家.AA = 上一个文本ID;
		等待(90, 无视条件);
		事件玩家.W = 假;
		事件玩家.Z = 0;
		消除效果(事件玩家.E[3]);
		消除效果(事件玩家.E[4]);
		禁用 设置不可见(事件玩家, 全部);
		禁用 小字体信息(事件玩家, 字符串("{0} {1}", 事件玩家, 字符串("不可见")));
	}
}

规则("all objects *")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.N = 0;
		全局.N += 1;
		全局.C[全局.N] = 矢量(-11.668, 7.648, 2.273);
		全局.D[全局.N] = 矢量(-12.641, 7.661, 0.653);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-48.318, 13.014, -29.257);
		全局.D[全局.N] = 矢量(-47.697, 13.378, -29.270);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-1.538, 11.118, -40.043);
		全局.D[全局.N] = 矢量(-1.507, 11.400, -40.138);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-12.287, 12.381, 14.536);
		全局.D[全局.N] = 矢量(-12.235, 12.379, 14.506);
		全局.N += 1;
		全局.C[全局.N] = 矢量(2.952, 7.633, 8.548);
		全局.D[全局.N] = 矢量(2.832, 7.352, 8.672);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-17.087, 8.382, -50.822);
		全局.D[全局.N] = 矢量(-17.082, 8.112, -50.831);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-17.235, 7.337, 20.378);
		全局.D[全局.N] = 矢量(-17.250, 7.707, 20.634);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-9.783, 11.137, 40.094);
		全局.D[全局.N] = 矢量(-9.703, 11.170, 40.217);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-50.830, 12.939, -48.063);
		全局.D[全局.N] = 矢量(-51.275, 12.933, -48.133);
		全局.N += 1;
		全局.C[全局.N] = 矢量(14.076, 9.534, -37.211);
		全局.D[全局.N] = 矢量(14.315, 9.518, -37.217);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-23.978, 7.054, 31.867);
		全局.D[全局.N] = 矢量(-23.931, 7.131, 31.868);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-19.598, 10.293, -10.508);
		全局.D[全局.N] = 矢量(-19.644, 10.141, -10.688);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-20.892, 11.392, 16.838);
		全局.D[全局.N] = 矢量(-21.114, 11.360, 16.752);
		全局.N += 1;
		全局.C[全局.N] = 矢量(7.721, 7.242, 12.567);
		全局.D[全局.N] = 矢量(7.517, 6.860, 12.359);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-18.420, 7.918, -49.641);
		全局.D[全局.N] = 矢量(-18.383, 8.088, -49.593);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-12.303, 12.064, 33.283);
		全局.D[全局.N] = 矢量(-12.435, 12.136, 33.282);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-56.443, 8.762, 31.058);
		全局.D[全局.N] = 矢量(-56.242, 8.822, 31.050);
		全局.N += 1;
		全局.C[全局.N] = 矢量(8.435, 8.015, -35.488);
		全局.D[全局.N] = 矢量(8.268, 8.175, -35.253);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-47.897, 6.642, 21.965);
		全局.D[全局.N] = 矢量(-48.347, 6.639, 21.971);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-37.888, 7.251, -44.529);
		全局.D[全局.N] = 矢量(-37.771, 7.310, -44.405);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-35.238, 8.876, 38.468);
		全局.D[全局.N] = 矢量(-35.223, 8.396, 38.456);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-9.241, 8.062, -38.005);
		全局.D[全局.N] = 矢量(-9.051, 6.011, -38.209);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-1.189, 6.366, 13.551);
		全局.D[全局.N] = 矢量(-1.041, 6.375, 13.402);
		全局.N += 1;
		全局.C[全局.N] = 矢量(5.451, 10.021, -35.483);
		全局.D[全局.N] = 矢量(5.602, 10.280, -35.235);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-15.895, 11.471, 16.693);
		全局.D[全局.N] = 矢量(-15.739, 11.251, 16.695);
		全局.N += 1;
		全局.C[全局.N] = 矢量(13.242, 8.757, -30.680);
		全局.D[全局.N] = 矢量(14.592, 8.722, -30.696);
		全局.N += 1;
		全局.C[全局.N] = 矢量(2.907, 10.360, 22.954);
		全局.D[全局.N] = 矢量(3.025, 10.370, 23.163);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-40.968, 11.902, -55.921);
		全局.D[全局.N] = 矢量(-41.203, 11.337, -56.300);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-58.186, 10.351, 27.224);
		全局.D[全局.N] = 矢量(-58.268, 10.323, 27.200);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-35.384, 6.560, -30.086);
		全局.D[全局.N] = 矢量(-34.706, 7.077, -30.459);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-14.434, 11.763, 30.576);
		全局.D[全局.N] = 矢量(-14.046, 11.727, 30.585);
		全局.N += 1;
		全局.C[全局.N] = 矢量(6.122, 8.289, -36.802);
		全局.D[全局.N] = 矢量(6.022, 8.652, -36.701);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-12.065, 10.185, 7.094);
		全局.D[全局.N] = 矢量(-12.101, 10.187, 7.270);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-50.525, 12.173, -31.198);
		全局.D[全局.N] = 矢量(-50.521, 12.427, -31.774);
		全局.N += 1;
		全局.C[全局.N] = 矢量(10.443, 8.798, -41.165);
		全局.D[全局.N] = 矢量(10.951, 9.466, -41.691);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-47.902, 14.193, -0.497);
		全局.D[全局.N] = 矢量(-47.724, 14.178, -0.512);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-40.764, 12.145, -36.342);
		全局.D[全局.N] = 矢量(-40.765, 12.085, -36.335);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-58.364, 17.023, 24.001);
		全局.D[全局.N] = 矢量(-57.822, 18.034, 24.712);
		全局.N += 1;
		全局.C[全局.N] = 矢量(18.701, 16.745, -9.671);
		全局.D[全局.N] = 矢量(19.732, 16.273, -10.458);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-10.477, 6.733, 19.332);
		全局.D[全局.N] = 矢量(-10.370, 6.455, 19.302);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-48.501, 17.589, -31.388);
		全局.D[全局.N] = 矢量(-48.291, 17.576, -31.393);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-17.060, 19.398, 59.868);
		全局.D[全局.N] = 矢量(-17.119, 15.739, 59.893);
		全局.N += 1;
		全局.C[全局.N] = 矢量(3.866, 20.962, -50.358);
		全局.D[全局.N] = 矢量(4.027, 18.994, -50.512);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-11.723, 19.649, 8.955);
		全局.D[全局.N] = 矢量(-12.984, 21.008, 8.798);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-47.179, 8.745, 34.743);
		全局.D[全局.N] = 矢量(-47.167, 8.735, 35.553);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-3.060, 8.498, -1.839);
		全局.D[全局.N] = 矢量(-2.971, 8.594, -1.766);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-36.693, 13.432, -48.442);
		全局.D[全局.N] = 矢量(-36.488, 13.613, -48.720);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-18.285, 8.124, 3.238);
		全局.D[全局.N] = 矢量(-18.087, 7.886, 3.122);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-61.236, 23.170, -24.356);
		全局.D[全局.N] = 矢量(-61.143, 23.188, -24.283);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-14.319, 11.910, 12.222);
		全局.D[全局.N] = 矢量(-14.453, 11.898, 11.988);
	}
}

规则("total number of objects")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.O = 全局.N;
	}
}

规则("beginning of the game *")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.V = 30;
		全局.AB = 0;
		全局.AC = 矢量(-20.655, 39, 5.855);
		修改全局变量(J, 添加至数组, 5);
		修改全局变量(J, 添加至数组, 10);
		修改全局变量(J, 添加至数组, 15);
		修改全局变量(J, 添加至数组, 20);
		修改全局变量(J, 添加至数组, 25);
		修改全局变量(J, 添加至数组, 30);
		修改全局变量(J, 添加至数组, 35);
		修改全局变量(J, 添加至数组, 40);
		修改全局变量(J, 添加至数组, 45);
		修改全局变量(J, 添加至数组, 50);
		全局.Y = 30;
		全局.W = 假;
		全局.U = 假;
		全局.M = 假;
		全局.R[1] = 假;
		全局.R[3] = 0;
		全局.D[0] = 矢量(0, -50, 0);
		全局.AA = 5;
		关闭游戏预设音乐模式;
		关闭游戏预设通告模式;
		关闭游戏预设完成条件;
		关闭游戏预设计分模式;
		设置比赛时间(1);
		等待(2, 无视条件);
		设置比赛时间(3600);
		全局.AD = 0;
		创建HUD文本(所有玩家(所有队伍), 无, 字符串("尝试"), 无, 顶部, 0, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		全局.K = 假;
	}
}

规则("player spawn *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
		是否是机器人(事件玩家) == 假;
	}

	动作
	{
		隐藏英雄HUD(事件玩家);
		事件玩家.F = 0;
		传送(事件玩家, 矢量(-42.082, 7.550, 9.525));
		设置启用技能 1(事件玩家, 假);
		设置启用技能 2(事件玩家, 假);
		事件玩家.I = 真;
		事件玩家.G = 5;
		事件玩家.N = 1;
		事件玩家.U = 假;
		事件玩家.V = 假;
		事件玩家.R = 假;
		事件玩家.W = 假;
		事件玩家.O = 假;
		事件玩家.Z = 0;
		事件玩家.X = 假;
		事件玩家.L = 假;
		根据条件跳过(全局.R[2] >= 3, 2);
		全局.R[2] += 1;
		全局.R[1] = 真;
		创建效果(事件玩家, 有益光环, 颜色(橙色), 全局.D[事件玩家.F], 2, 可见，位置和半径);
		事件玩家.E[5] = 最后创建的实体;
		创建效果(事件玩家, 火花, 颜色(橙色), 全局.D[事件玩家.F], 3, 可见，位置和半径);
		事件玩家.E[6] = 最后创建的实体;
		创建HUD文本(事件玩家, 字符串("{0} {1}", 图标字符串(方块), 事件玩家.N), 无, 无, 左边, 1, 颜色(橙色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		事件玩家.E[7] = 最后创建的实体;
		创建HUD文本(事件玩家, 无, 无, 字符串("对象"), 左边, 0, 颜色(白色), 颜色(白色), 颜色(橙色), 可见和字符串, 默认可见度);
		事件玩家.E[8] = 最后创建的实体;
		设置不可见(事件玩家, 全部);
		设置状态(事件玩家, 无, 无敌, 9999);
		事件玩家.S = 150;
		根据条件跳过(全局.L[1] != 无, 2);
		全局.L[1] = 事件玩家;
		中止;
		根据条件跳过(全局.L[2] != 无, 2);
		全局.L[2] = 事件玩家;
		中止;
		根据条件跳过(全局.L[3] != 无, 2);
		全局.L[3] = 事件玩家;
		中止;
	}
}

规则("infinite match time")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		比赛时间 <= 1800;
		比赛时间 > 10;
		游戏正在进行中 == 真;
	}

	动作
	{
		设置比赛时间(3600);
	}
}

规则("player pressed \"F\" key on the empty place")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		相距距离(事件玩家, 全局.D[事件玩家.F]) > 5;
		相距距离(事件玩家, 全局.D[事件玩家.F + 1]) > 5;
		事件玩家.I == 假;
		事件玩家.T == 假;
		具有状态(事件玩家, 冰冻) == 假;
		事件玩家.F < 全局.O;
		全局.K == 假;
		事件玩家.X == 假;
	}

	动作
	{
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("否"), 字符串("物品")));
		播放效果(事件玩家, 负面状态施加声音, 颜色(白色), 事件玩家, 30);
		设置状态(事件玩家, 无, 冰冻, 1);
		修改玩家分数(事件玩家, -1);
	}
}

规则("player found item")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		相距距离(事件玩家, 全局.D[事件玩家.F + 1]) <= 5;
		具有状态(事件玩家, 冰冻) == 假;
		事件玩家.F < 全局.O;
		全局.K == 假;
		事件玩家.X == 假;
	}

	动作
	{
		小字体信息(事件玩家, 字符串("{0}！", 字符串("好")));
		播放效果(事件玩家, 环状爆炸, 颜色(橙色), 全局.D[事件玩家.F + 1], 5);
		播放效果(事件玩家, 环状爆炸, 颜色(橙色), 全局.D[事件玩家.F + 1], 7);
		播放效果(事件玩家, 正面状态施加声音, 颜色(白色), 事件玩家, 50);
		事件玩家.F += 1;
		事件玩家.K = 3;
		事件玩家.U = 真;
		事件玩家.G = 10;
		根据条件跳过(事件玩家.F == 全局.J[10], 11);
		根据条件跳过(事件玩家.F == 全局.J[9], 10);
		根据条件跳过(事件玩家.F == 全局.J[8], 9);
		根据条件跳过(事件玩家.F == 全局.J[7], 8);
		根据条件跳过(事件玩家.F == 全局.J[6], 7);
		根据条件跳过(事件玩家.F == 全局.J[5], 6);
		根据条件跳过(事件玩家.F == 全局.J[4], 5);
		根据条件跳过(事件玩家.F == 全局.J[3], 4);
		根据条件跳过(事件玩家.F == 全局.J[2], 3);
		根据条件跳过(事件玩家.F == 全局.J[1], 2);
		事件玩家.U = 假;
		事件玩家.T = 真;
		等待(1, 无视条件);
		播放效果(事件玩家, 正面状态施加声音, 颜色(白色), 事件玩家, 50);
		大字体信息(事件玩家, 字符串("{0} / {1}", 事件玩家.F, 全局.O));
		根据条件跳过(事件玩家.F != 2, 1);
		事件玩家.R = 真;
		根据条件跳过(事件玩家.F < 全局.O, 1);
		事件玩家.N = 事件玩家.F;
		根据条件跳过(事件玩家.F == 全局.O, 1);
		事件玩家.N = 事件玩家.F + 1;
	}
}

规则("shift key is pressed (acceleration)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(技能1)) == 真;
	}

	动作
	{
		设置移动速度(事件玩家, 事件玩家.S);
	}
}

规则("shift key is not pressed (slowdown)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(技能1)) == 假;
	}

	动作
	{
		设置移动速度(事件玩家, 110);
	}
}

规则("spacebar is pressed (fly)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(跳跃)) == 真;
		事件玩家.F >= 全局.Y;
	}

	动作
	{
		设置引力(事件玩家, 0);
	}
}

规则("spacebar is not pressed (gravity)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(跳跃)) == 假;
		事件玩家.F >= 全局.Y;
	}

	动作
	{
		设置引力(事件玩家, 100);
	}
}

规则("right click shows picture")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(辅助攻击模式)) == 真;
		事件玩家.I == 假;
		事件玩家.Z == 0;
		事件玩家.X == 假;
	}

	动作
	{
		根据条件跳过(事件玩家.F < 全局.O, 1);
		事件玩家.N = 事件玩家.F;
		根据条件跳过(事件玩家.F == 全局.O, 1);
		事件玩家.N = 事件玩家.F + 1;
		开始镜头(事件玩家, 全局.C[事件玩家.N], 全局.D[事件玩家.N], 0);
		事件玩家.T = 假;
		根据条件跳过(事件玩家.U == 假, 1);
		事件玩家.O = 真;
		根据条件跳过(事件玩家.G > 0, 3);
		根据条件跳过(相距距离(所选位置(事件玩家), 全局.D[事件玩家.F + 1]) < 50, 1);
		小字体信息(事件玩家, 字符串("{0} {1} {2}", 字符串("对象"), 字符串("远"), 图标字符串(停止)));
		事件玩家.G = 1;
	}
}

规则("right mouse button is not pressed")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(辅助攻击模式)) == 假;
		事件玩家.I == 假;
		事件玩家.Z == 0;
		事件玩家.X == 假;
	}

	动作
	{
		停止镜头(事件玩家);
		清除状态(事件玩家, 定身);
		根据条件跳过(事件玩家.U == 假, 1);
		事件玩家.O = 真;
		根据条件跳过(事件玩家.F < 全局.O, 1);
		事件玩家.N = 事件玩家.F;
		根据条件跳过(事件玩家.F == 全局.O, 1);
		事件玩家.N = 事件玩家.F + 1;
	}
}

规则("left mouse button shows previous objects")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(主要攻击模式)) == 真;
		按钮被按下(事件玩家, 按钮(辅助攻击模式)) == 真;
		事件玩家.I == 假;
		事件玩家.X == 假;
		事件玩家.Z == 0;
	}

	动作
	{
		事件玩家.N -= 1;
		根据条件跳过(事件玩家.N > 0, 4);
		根据条件跳过(事件玩家.F == 全局.O, 1);
		事件玩家.N = 事件玩家.F + 1;
		根据条件跳过(事件玩家.F != 全局.O, 1);
		事件玩家.N = 事件玩家.F;
	}
}

规则("player found all objects (victory!)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.F == 全局.O;
	}

	动作
	{
		事件玩家.Z = 5;
		设置状态(事件玩家, 无, 定身, 9999);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 30);
		播放效果(事件玩家, 环状爆炸, 颜色(亮紫色), 全局.D[事件玩家.F], 6);
		播放效果(事件玩家, 有益爆炸, 颜色(橙色), 全局.D[事件玩家.F], 10);
		播放效果(事件玩家, 有益选择效果 , 颜色(橙色), 全局.D[事件玩家.F], 10);
		全局.K = 真;
		等待(3, 无视条件);
		事件玩家.Z = 1;
	}
}

规则("everyone is watching the winner *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.W == 假;
		事件玩家.Z == 0;
		全局.W == 真;
		事件玩家.F >= 2;
	}

	动作
	{
		设置状态(事件玩家, 无, 定身, 9999);
		开始镜头(事件玩家, 矢量(15.613, 31.546, 160.568), 矢量(5.853, 25.817, 145.145), 0);
		等待(0.100, 无视条件);
		开始镜头(事件玩家, 矢量(15.613, 45.615, 160.568), 矢量(-15.768, 62.589, 109.618), 1);
		等待(2, 无视条件);
		等待(2, 无视条件);
		全局.K = 假;
		等待(0.300, 无视条件);
		开始镜头(事件玩家, 矢量(-64.292, 44.990, 164.933), 矢量(-15.768, 62.589, 109.618), 3);
		等待(0.300, 无视条件);
		开始镜头(事件玩家, 矢量(-77.421, 53.252, 96.045), 矢量(-15.768, 62.589, 109.618), 3);
		等待(0.300, 无视条件);
		开始镜头(事件玩家, 矢量(-42.074, 57.955, 79.155), 矢量(-15.768, 62.589, 109.618), 3);
		等待(0.300, 无视条件);
		开始镜头(事件玩家, 矢量(11.823, 60.521, 95.902), 矢量(-15.768, 62.589, 109.618), 3);
		等待(0.300, 无视条件);
		开始镜头(事件玩家, 矢量(8.202, 61.388, 110.557), 矢量(-15.768, 62.589, 109.618), 3);
		等待(2, 无视条件);
		等待(3, 无视条件);
		开始镜头(事件玩家, 矢量(22.646, 68.845, 144.410), 矢量(-4.735, 63.052, 103.703), 0);
		等待(3, 无视条件);
		清除状态(事件玩家, 定身);
		全局.W = 假;
		停止镜头(事件玩家);
		事件玩家.X = 假;
	}
}

规则("automatically show next object")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.T == 真;
		事件玩家.U == 假;
	}

	动作
	{
		等待(3, 无视条件);
		如条件为“假”则中止;
		事件玩家.Q = 真;
		设置状态(事件玩家, 无, 定身, 5);
		开始镜头(事件玩家, 全局.C[事件玩家.F + 1], 全局.D[事件玩家.F + 1], 0);
		根据条件跳过(事件玩家.F != 0, 1);
		大字体信息(事件玩家, 字符串("{0} {1}", 字符串("寻找"), 字符串("对象")));
		根据条件跳过(事件玩家.F == 0, 1);
		大字体信息(事件玩家, 字符串("{0} {1}", 字符串("寻找"), 字符串("下一批对象")));
		等待(5, 无视条件);
		事件玩家.T = 假;
		停止镜头(事件玩家);
		事件玩家.Q = 假;
	}
}

规则("cancel auto preview")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.T == 真;
		事件玩家.Q == 真;
		事件玩家.Z == 0;
		事件玩家.X == 假;
	}

	动作
	{
		根据条件跳过(按钮被按下(事件玩家, 按钮(主要攻击模式)) != 真, 4);
		事件玩家.T = 假;
		清除状态(事件玩家, 定身);
		停止镜头(事件玩家);
		事件玩家.Q = 假;
		根据条件跳过(按钮被按下(事件玩家, 按钮(辅助攻击模式)) != 真, 4);
		事件玩家.T = 假;
		清除状态(事件玩家, 定身);
		停止镜头(事件玩家);
		事件玩家.Q = 假;
		根据条件跳过(按钮被按下(事件玩家, 按钮(跳跃)) != 真, 4);
		事件玩家.T = 假;
		清除状态(事件玩家, 定身);
		停止镜头(事件玩家);
		事件玩家.Q = 假;
		根据条件跳过(按钮被按下(事件玩家, 按钮(终极技能)) != 真, 4);
		事件玩家.T = 假;
		清除状态(事件玩家, 定身);
		停止镜头(事件玩家);
		事件玩家.Q = 假;
		根据条件跳过(按钮被按下(事件玩家, 按钮(技能2)) != 真, 4);
		事件玩家.T = 假;
		清除状态(事件玩家, 定身);
		停止镜头(事件玩家);
		事件玩家.Q = 假;
	}
}

规则("message about flying")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.F == 全局.Y;
	}

	动作
	{
		等待(8, 无视条件);
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("{0} - {1}", 字符串("跳跃"), 字符串("飞行")), 图标字符串(光晕)));
		等待(30, 无视条件);
		如条件为“假”则中止;
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("{0} - {1}", 字符串("跳跃"), 字符串("飞行")), 图标字符串(光晕)));
		等待(30, 无视条件);
		如条件为“假”则中止;
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("{0} - {1}", 字符串("跳跃"), 字符串("飞行")), 图标字符串(光晕)));
		等待(30, 无视条件);
		如条件为“假”则中止;
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("{0} - {1}", 字符串("跳跃"), 字符串("飞行")), 图标字符串(光晕)));
		等待(30, 无视条件);
		如条件为“假”则中止;
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("{0} - {1}", 字符串("跳跃"), 字符串("飞行")), 图标字符串(光晕)));
	}
}

规则("player left game")
{
	事件
	{
		玩家离开比赛;
		双方;
		全部;
	}

	动作
	{
		全局.K = 假;
		消除效果(事件玩家.E[1]);
		消除效果(事件玩家.E[2]);
		消除效果(事件玩家.E[3]);
		消除效果(事件玩家.E[4]);
		消除效果(事件玩家.E[5]);
		消除效果(事件玩家.E[6]);
		消除效果(事件玩家.E[7]);
		消除效果(事件玩家.E[8]);
		根据条件跳过(全局.L[1] != 事件玩家, 1);
		所有玩家(所有队伍).K = 3;
		根据条件跳过(全局.L[2] != 事件玩家, 1);
		所有玩家(所有队伍).K = 3;
		根据条件跳过(全局.L[3] != 事件玩家, 1);
		所有玩家(所有队伍).K = 3;
		设置慢动作(100);
		消除HUD文本(事件玩家.AA);
	}
}

规则("speed upgrade")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.U == 真;
		事件玩家.F != 全局.Y;
		事件玩家.F != 全局.O;
	}

	动作
	{
		播放效果(事件玩家, 环状爆炸, 颜色(天蓝色), 全局.D[事件玩家.F], 6);
		创建光束效果(事件玩家, 有益光束, 全局.D[事件玩家.F], 事件玩家, 颜色(天蓝色), 可见，位置和半径);
		事件玩家.E[1] = 最后创建的实体;
		创建效果(事件玩家, 能量声音, 颜色(白色), 事件玩家, 30, 可见，位置和半径);
		事件玩家.E[2] = 最后创建的实体;
		根据条件跳过(事件玩家.S > 410, 1);
		事件玩家.S += 全局.V;
		等待(1, 无视条件);
		消除效果(事件玩家.E[1]);
		消除效果(事件玩家.E[2]);
		小字体信息(事件玩家, 字符串("{0} {1}", 图标字符串(箭头：向上), 字符串("{0}！", 字符串("等级提升"))));
		大字体信息(事件玩家, 字符串("{0} {1} {2}", 字符串("速度"), 字符串("{0}！", 字符串("升级")), 图标字符串(箭矢)));
		等待(1, 无视条件);
		事件玩家.U = 假;
		根据条件跳过(事件玩家.O == 真, 1);
		事件玩家.T = 真;
		根据条件跳过(事件玩家.O == 假, 1);
		事件玩家.O = 假;
		事件玩家.R = 真;
	}
}

规则("flying upgrade")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.U == 真;
		事件玩家.F == 全局.Y;
	}

	动作
	{
		播放效果(事件玩家, 环状爆炸, 颜色(亮紫色), 全局.D[事件玩家.F], 7);
		创建光束效果(事件玩家, 有益光束, 全局.D[事件玩家.F], 事件玩家, 颜色(橙色), 可见，位置和半径);
		事件玩家.E[1] = 最后创建的实体;
		创建效果(事件玩家, 能量声音, 颜色(白色), 事件玩家, 30, 可见，位置和半径);
		事件玩家.E[2] = 最后创建的实体;
		事件玩家.Y = 真;
		等待(1, 无视条件);
		消除效果(事件玩家.E[1]);
		消除效果(事件玩家.E[2]);
		小字体信息(事件玩家, 字符串("{0} {1}", 图标字符串(箭头：向上), 字符串("{0}！", 字符串("等级提升"))));
		大字体信息(事件玩家, 字符串("{0} {1} {2}", 字符串("飞行"), 字符串("{0}！", 字符串("升级")), 图标字符串(光晕)));
		等待(1, 无视条件);
		事件玩家.U = 假;
		根据条件跳过(事件玩家.O == 真, 1);
		事件玩家.T = 真;
		根据条件跳过(事件玩家.O == 假, 1);
		事件玩家.O = 假;
	}
}

规则("rating")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		全局.R[1] == 真;
	}

	动作
	{
		根据条件跳过(全局.R[2] < 1, 4);
		根据条件跳过(全局.R[3] >= 1, 3);
		创建HUD文本(所有玩家(所有队伍), 无, 无, 字符串("{0} {1}", 字符串("最佳"), 字符串("{0}:", 字符串("玩家"))), 右边, 0, 颜色(白色), 颜色(白色), 颜色(橙色), 可见和字符串, 默认可见度);
		创建HUD文本(所有玩家(所有队伍), 无, 无, 字符串("{0} {1} {2}", 英雄图标字符串(所用英雄(全局.L[1])), 全局.L[1], 字符串("{0} / {1}", 全局.L[1].F, 全局.O)), 右边, 1, 颜色(白色),
			颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		全局.R[3] = 1;
		根据条件跳过(全局.R[2] < 2, 3);
		根据条件跳过(全局.R[3] >= 2, 2);
		创建HUD文本(所有玩家(所有队伍), 无, 无, 字符串("{0} {1} {2}", 英雄图标字符串(所用英雄(全局.L[2])), 全局.L[2], 字符串("{0} / {1}", 全局.L[2].F, 全局.O)), 右边, 2, 颜色(白色),
			颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		全局.R[3] = 2;
		根据条件跳过(全局.R[2] != 3, 3);
		根据条件跳过(全局.R[3] == 3, 2);
		创建HUD文本(所有玩家(所有队伍), 无, 无, 字符串("{0} {1} {2}", 英雄图标字符串(所用英雄(全局.L[3])), 全局.L[3], 字符串("{0} / {1}", 全局.L[3].F, 全局.O)), 右边, 3, 颜色(白色),
			颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		全局.R[3] = 3;
		等待(1, 无视条件);
		根据条件循环(全局.R[2] > 全局.R[3]);
		全局.R[1] = 假;
	}
}

规则("rating update")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.K > 0;
	}

	动作
	{
		根据条件跳过(全局.L[1] != 事件玩家, 2);
		事件玩家.K = 0;
		中止;
		根据条件跳过(全局.L[2] != 事件玩家, 5);
		根据条件跳过(事件玩家.F <= 全局.L[1].F, 4);
		全局.L[2] = 全局.L[1];
		全局.L[1] = 事件玩家;
		事件玩家.K = 0;
		中止;
		根据条件跳过(全局.L[3] != 事件玩家, 3);
		根据条件跳过(事件玩家.F <= 全局.L[2].F, 2);
		全局.L[3] = 全局.L[2];
		全局.L[2] = 事件玩家;
		根据条件跳过(全局.L[1] == 事件玩家, 4);
		根据条件跳过(全局.L[2] == 事件玩家, 3);
		根据条件跳过(全局.L[3] == 事件玩家, 2);
		根据条件跳过(事件玩家.F <= 全局.L[3].F, 1);
		全局.L[3] = 事件玩家;
		等待(0.050, 无视条件);
		事件玩家.K -= 1;
		如条件为”真“则循环;
	}
}

规则("search time")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.W == 假;
		事件玩家.G > 0;
	}

	动作
	{
		等待(30, 无视条件);
		事件玩家.G -= 1;
		如条件为”真“则循环;
	}
}

规则("graphic settings warning 1 *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.F == 全局.AA;
	}

	动作
	{
		等待(3, 无视条件);
		如条件为“假”则中止;
		消除HUD文本(事件玩家.AA);
		等待(0.250, 无视条件);
		创建HUD文本(事件玩家, 图标字符串(眼睛), 自定义字符串("Set medium or higher model detail settings to see all objects"), 自定义字符串(
			"Options > Video > Graphics quality > Advanced > Model Detail"), 顶部, 1, 颜色(橙色), 颜色(白色), 颜色(橙色), 字符串, 默认可见度);
		事件玩家.AA = 上一个文本ID;
	}
}

规则("graphic settings warning 2 *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.F == 全局.AA + 1;
	}

	动作
	{
		消除HUD文本(事件玩家.AA);
	}
}

规则("hint near the first object *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		相距距离(事件玩家, 全局.D[1]) <= 5;
		事件玩家.F == 0;
	}

	动作
	{
		小字体信息(事件玩家, 字符串("{0} {1} {2}", 字符串("互动"), 字符串("{0}！", 字符串("此处")), 字符串("({0})", 输入绑定字符串(按钮(互动)))));
	}
}

规则("message about right button")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.M == 真;
	}

	动作
	{
		等待(9, 无视条件);
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("{0} - {1}", 输入绑定字符串(按钮(辅助攻击模式)), 字符串("当前目标")), 图标字符串(眼睛)));
		事件玩家.M = 假;
	}
}

规则("message about previous objects")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.F >= 10;
	}

	动作
	{
		等待(25, 无视条件);
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("{0} = {1}", 字符串("{0} + {1}", 输入绑定字符串(按钮(辅助攻击模式)), 输入绑定字符串(按钮(主要攻击模式))), 字符串("对象")), 图标字符串(回收)));
	}
}

规则("message about running")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.R == 真;
	}

	动作
	{
		等待(8, 无视条件);
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("{0} - {1}", 自定义字符串("[Shift]"), 字符串("运行")), 图标字符串(箭矢)));
		事件玩家.R = 假;
	}
}
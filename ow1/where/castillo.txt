设置
{
	主程序
	{
		描述: "R65B5这是哪儿——城堡★在地图上寻找神秘地点 ★点击右键可以看到一个神秘图片，找到这个地方，对物品按下互动键（默认F）得到下一张照片，先找完的人获胜！ ★建议设置为中高模型特效获取更好的游戏体验★游戏结束后会获得奖励 ★按[shift]奔跑 ★提示和更多地图在owmot.net搜索★ Made by Foren#2660 ★ 国服搬运工：KDLin#5710"
	}

	大厅
	{
		地图轮换: 暂停轮换
		比赛结束后转换队伍: 否
		比赛语音聊天: 启用
		观战者人数上限: 3
		返回大厅: 从不
	}

	模式
	{
		死斗
		{
			启用地图
			{
				城堡
			}
		}

		综合
		{
			主动复生: 关闭
			复生时间: 0%
			急救包刷新: 禁用
			比赛模式开始: 即时
			消灭提示: 关闭
			消灭镜头: 关闭
			英雄限制: 关闭
		}
	}

	英雄
	{
		综合
		{
			D.Va
			{
				主要攻击模式: 关闭
				微型飞弹: 关闭
				推进器: 关闭
				终极技能（自毁）: 关闭
				近身攻击: 关闭
				防御矩阵: 关闭
			}

			半藏
			{
				主要攻击模式: 关闭
				岚: 关闭
				终极技能（竜）: 关闭
				跃: 关闭
				近身攻击: 关闭
				音: 关闭
			}

			卢西奥
			{
				主要攻击模式: 关闭
				切歌: 关闭
				强音: 关闭
				终极技能（音障）: 关闭
				近身攻击: 关闭
				音波: 关闭
			}

			回声
			{
				主要攻击模式: 关闭
				滑翔: 关闭
				终极技能（人格复制）: 关闭
				聚焦光线: 关闭
				近身攻击: 关闭
				飞行: 关闭
				黏性炸弹: 关闭
			}

			堡垒
			{
				主要攻击模式: 关闭
				切换模式: 关闭
				终极技能（坦克模式）: 关闭
				自我修复: 关闭
				近身攻击: 关闭
			}

			士兵：76
			{
				主要攻击模式: 关闭
				生物力场: 关闭
				疾跑: 关闭
				终极技能（战术目镜）: 关闭
				螺旋飞弹: 关闭
				近身攻击: 关闭
			}

			天使
			{
				主要攻击模式: 关闭
				守护天使: 关闭
				终极技能（女武神）: 关闭
				自动恢复: 关闭
				辅助攻击模式: 关闭
				近身攻击: 关闭
				重生: 关闭
			}

			奥丽莎
			{
				主要攻击模式: 关闭
				强固防御: 关闭
				站住别动: 关闭
				终极技能（超充能器）: 关闭
				近身攻击: 关闭
				防护屏障: 关闭
			}

			安娜
			{
				主要攻击模式: 关闭
				生物手雷: 关闭
				终极技能（纳米激素）: 关闭
				近身攻击: 关闭
				重生时终极技能充能完毕: 开启
				麻醉镖: 关闭
			}

			巴蒂斯特
			{
				愈合冲击: 关闭
				终极技能（增幅矩阵）: 关闭
				维生力场: 关闭
				近身攻击: 关闭
			}

			布丽吉塔
			{
				主要攻击模式: 关闭
				屏障护盾: 关闭
				恢复包: 关闭
				流星飞锤: 关闭
				终极技能（集结号令）: 关闭
				能量盾击: 关闭
				近身攻击: 关闭
			}

			托比昂
			{
				主要攻击模式: 关闭
				热力过载: 关闭
				终极技能（熔火核心）: 关闭
				辅助攻击模式: 关闭
				近身攻击: 关闭
				部署炮台: 关闭
			}

			末日铁拳
			{
				上勾重拳: 关闭
				主要攻击模式: 关闭
				火箭重拳: 关闭
				终极技能（毁天灭地）: 关闭
				裂地重拳: 关闭
				近身攻击: 关闭
			}

			查莉娅
			{
				主要攻击模式: 关闭
				投射屏障: 关闭
				粒子屏障: 关闭
				终极技能（重力喷涌）: 关闭
				辅助攻击模式: 关闭
				近身攻击: 关闭
			}

			死神
			{
				主要攻击模式: 关闭
				幽灵形态: 关闭
				暗影步: 关闭
				终极技能（死亡绽放）: 关闭
				近身攻击: 关闭
			}

			法老之鹰
			{
				主要攻击模式: 关闭
				悬浮背包: 关闭
				推进背包: 关闭
				终极技能（火箭弹幕）: 关闭
				近身攻击: 关闭
				震荡冲击: 关闭
			}

			温斯顿
			{
				主要攻击模式: 关闭
				喷射背包: 关闭
				屏障发射器: 关闭
				终极技能（原始暴怒）: 关闭
				近身攻击: 关闭
			}

			源氏
			{
				主要攻击模式: 关闭
				影: 关闭
				终极技能（斩）: 关闭
				辅助攻击模式: 关闭
				近身攻击: 关闭
				闪: 关闭
			}

			狂鼠
			{
				主要攻击模式: 关闭
				捕兽夹: 关闭
				终极技能（炸弹轮胎）: 关闭
				近身攻击: 关闭
				震荡地雷: 关闭
			}

			猎空
			{
				主要攻击模式: 关闭
				终极技能（脉冲炸弹）: 关闭
				近身攻击: 关闭
				闪回: 关闭
				闪现: 关闭
			}

			破坏球
			{
				主要攻击模式: 关闭
				动力铁球: 关闭
				工程抓钩: 关闭
				感应护盾: 关闭
				终极技能（地雷禁区）: 关闭
				近身攻击: 关闭
				重力坠击: 关闭
			}

			禅雅塔
			{
				主要攻击模式: 关闭
				乱: 关闭
				终极技能自动充能速度 圣: 0%
				谐: 关闭
				辅助攻击模式: 关闭
				近身攻击: 关闭
			}

			秩序之光
			{
				主要攻击模式: 关闭
				传送面板: 关闭
				哨戒炮: 关闭
				终极技能（光子屏障）: 关闭
				辅助攻击模式: 关闭
				近身攻击: 关闭
			}

			美
			{
				主要攻击模式: 关闭
				冰墙: 关闭
				急冻: 关闭
				终极技能（暴雪）: 关闭
				辅助攻击模式: 关闭
				近身攻击: 关闭
			}

			艾什
			{
				主要攻击模式: 关闭
				延时雷管: 关闭
				短筒猎枪: 关闭
				终极技能（召唤鲍勃）: 关闭
				近身攻击: 关闭
			}

			莫伊拉
			{
				主要攻击模式: 关闭
				消散: 关闭
				生化之球: 关闭
				终极技能（聚合射线）: 关闭
				辅助攻击模式: 关闭
				近身攻击: 关闭
			}

			莱因哈特
			{
				主要攻击模式: 关闭
				冲锋: 关闭
				屏障力场: 关闭
				烈焰打击: 关闭
				终极技能（裂地猛击）: 关闭
				近身攻击: 关闭
			}

			西格玛
			{
				主要攻击模式: 关闭
				动能俘获: 关闭
				实验屏障: 关闭
				终极技能（引力乱流）: 关闭
				质量吸附: 关闭
				近身攻击: 关闭
			}

			路霸
			{
				主要攻击模式: 关闭
				呼吸器: 关闭
				终极技能（鸡飞狗跳）: 关闭
				辅助攻击模式: 关闭
				近身攻击: 关闭
				链钩: 关闭
			}

			麦克雷
			{
				主要攻击模式: 关闭
				战术翻滚: 关闭
				终极技能（神射手）: 关闭
				辅助攻击模式: 关闭
				近身攻击: 关闭
				闪光弹: 关闭
			}

			黑影
			{
				主要攻击模式: 关闭
				位移传动: 关闭
				终极技能（电磁脉冲）: 关闭
				近身攻击: 关闭
				隐秘潜行: 关闭
				黑客入侵: 关闭
			}

			黑百合
			{
				主要攻击模式: 关闭
				剧毒诡雷: 关闭
				抓钩: 关闭
				终极技能（红外侦测）: 关闭
				近身攻击: 关闭
			}

			禁用英雄
			{
				半藏
				破坏球
				西格玛
			}
		}
	}
}

变量
{
	全局:
		26: AA
		27: AB
		28: AC
		29: AD

	玩家:
		26: AA
}

规则("// copy and paste the following line into the game title: *")
{
	事件
	{
		持续 - 全局;
	}
}

规则("WHERE IS IT? ★ Castillo ★ No limits")
{
	事件
	{
		持续 - 全局;
	}
}

规则("// all maps and additional info: bit.do/whereisit")
{
	事件
	{
		持续 - 全局;
	}
}

规则("// \"WHERE IS IT?\" ver. 1.4")
{
	事件
	{
		持续 - 全局;
	}
}

规则("// original mode is made by Foren#2660")
{
	事件
	{
		持续 - 全局;
	}
}

规则("all objects *")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.N = 0;
		全局.N += 1;
		全局.C[全局.N] = 矢量(-128.579, 35.799, 68.916);
		全局.D[全局.N] = 矢量(-129.382, 35.849, 69.247);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-97.647, 33.932, 93.271);
		全局.D[全局.N] = 矢量(-97.494, 33.747, 93.394);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-113.787, 33.915, 21.870);
		全局.D[全局.N] = 矢量(-113.809, 33.684, 21.931);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-119.351, 35.863, 58.344);
		全局.D[全局.N] = 矢量(-119.004, 35.633, 58.287);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-103.038, 33.645, 87.094);
		全局.D[全局.N] = 矢量(-103.032, 33.495, 87.090);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-111.742, 33.047, 32.174);
		全局.D[全局.N] = 矢量(-111.699, 33.250, 32.346);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-97.659, 35.151, 96.581);
		全局.D[全局.N] = 矢量(-97.661, 34.911, 96.575);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-112.892, 35.675, 73.033);
		全局.D[全局.N] = 矢量(-112.891, 35.555, 73.034);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-115.064, 33.710, 24.887);
		全局.D[全局.N] = 矢量(-115.064, 33.711, 25.007);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-124.439, 35.057, 49.953);
		全局.D[全局.N] = 矢量(-124.681, 35.203, 50.222);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-103.825, 33.450, 86.977);
		全局.D[全局.N] = 矢量(-103.815, 33.240, 86.989);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-112.165, 33.678, 30.459);
		全局.D[全局.N] = 矢量(-112.219, 33.430, 30.618);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-81.484, 39.587, 64.468);
		全局.D[全局.N] = 矢量(-81.469, 39.814, 64.545);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-119.808, 32.866, 24.674);
		全局.D[全局.N] = 矢量(-119.762, 32.664, 24.640);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-102.091, 35.346, 86.359);
		全局.D[全局.N] = 矢量(-102.125, 35.342, 86.183);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-118.664, 35.858, 47.926);
		全局.D[全局.N] = 矢量(-118.629, 35.701, 47.846);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-113.055, 32.846, 21.672);
		全局.D[全局.N] = 矢量(-112.936, 32.934, 21.311);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-84.317, 32.577, 37.476);
		全局.D[全局.N] = 矢量(-84.172, 32.771, 37.356);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-109.275, 32.734, 23.211);
		全局.D[全局.N] = 矢量(-109.253, 32.654, 23.245);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-81.674, 38.772, 63.483);
		全局.D[全局.N] = 矢量(-81.675, 38.682, 63.482);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-100.872, 35.932, 97.387);
		全局.D[全局.N] = 矢量(-100.838, 35.790, 97.420);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-90.038, 38.901, 50.143);
		全局.D[全局.N] = 矢量(-90.043, 38.639, 50.210);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-105.120, 34.505, 25.167);
		全局.D[全局.N] = 矢量(-105.076, 34.225, 25.730);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-118.246, 40.230, 45.576);
		全局.D[全局.N] = 矢量(-118.294, 40.254, 45.780);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-114.770, 32.900, 25.433);
		全局.D[全局.N] = 矢量(-114.778, 32.966, 25.265);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-90.192, 35.763, 59.270);
		全局.D[全局.N] = 矢量(-90.104, 35.763, 59.253);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-124.976, 33.922, 39.312);
		全局.D[全局.N] = 矢量(-124.918, 34.518, 39.352);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-93, 34.703, 88.747);
		全局.D[全局.N] = 矢量(-92.899, 34.696, 88.683);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-100.941, 36.188, 58.908);
		全局.D[全局.N] = 矢量(-100.878, 35.927, 58.934);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-120.424, 35.024, 25.387);
		全局.D[全局.N] = 矢量(-120.483, 35.021, 25.397);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-74.897, 34.936, 22.176);
		全局.D[全局.N] = 矢量(-74.390, 33.696, 24.451);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-105.466, 32.958, 27.068);
		全局.D[全局.N] = 矢量(-105.102, 33.145, 26.975);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-85.817, 62.046, 55.072);
		全局.D[全局.N] = 矢量(-85.735, 60.548, 55.057);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-117.138, 34.849, 47.919);
		全局.D[全局.N] = 矢量(-117.306, 34.883, 48.165);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-120.197, 33.065, 27.500);
		全局.D[全局.N] = 矢量(-120.018, 32.687, 27.466);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-106.703, 36.822, 84.978);
		全局.D[全局.N] = 矢量(-106.668, 36.830, 85.123);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-126.189, 35.667, 51.916);
		全局.D[全局.N] = 矢量(-126.395, 35.650, 51.878);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-106.154, 36.733, 32.221);
		全局.D[全局.N] = 矢量(-105.934, 36.626, 32.336);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-93.716, 33.193, 88.798);
		全局.D[全局.N] = 矢量(-93.891, 33.155, 88.639);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-103.313, 38.866, 58.611);
		全局.D[全局.N] = 矢量(-103.135, 39.178, 58.588);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-127.057, 47.028, 50.432);
		全局.D[全局.N] = 矢量(-127.031, 47.021, 50.315);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-85.716, 45.722, 55.071);
		全局.D[全局.N] = 矢量(-85.645, 47.221, 55.058);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-116.509, 36.804, 47.764);
		全局.D[全局.N] = 矢量(-116.478, 36.805, 47.556);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-90.328, 32.824, 85.726);
		全局.D[全局.N] = 矢量(-90.302, 32.646, 85.723);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-98.201, 38.601, 28.290);
		全局.D[全局.N] = 矢量(-98.219, 38.572, 28.144);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-115.771, 34.757, 55.115);
		全局.D[全局.N] = 矢量(-116.013, 34.750, 55.234);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-81.013, 36.439, 51.088);
		全局.D[全局.N] = 矢量(-80.762, 36.528, 51.044);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-102.325, 36.038, 28.771);
		全局.D[全局.N] = 矢量(-102.519, 36.034, 28.631);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-85.290, 47.977, 58.755);
		全局.D[全局.N] = 矢量(-85.183, 48.791, 59.310);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-124.742, 33.776, 41.768);
		全局.D[全局.N] = 矢量(-124.791, 34.102, 41.775);
	}
}

规则("intro *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.I == 真;
	}

	动作
	{
		设置状态(事件玩家, 无, 定身, 99);
		开始镜头(事件玩家, 矢量(-63.802, 12.145, 86.508), 矢量(-61.789, 15.165, 30.255), 0);
		等待(1, 无视条件);
		开始镜头(事件玩家, 矢量(-63.802, 12.145, 86.508), 矢量(-61.789, 15.165, 30.255), 0);
		等待(0.250, 无视条件);
		开始镜头(事件玩家, 矢量(-62.336, 14.345, 45.533), 矢量(-72.569, 15.296, 16.689), 1);
		等待(2, 无视条件);
		开始镜头(事件玩家, 矢量(-65.741, 14.611, 34.949), 矢量(-22.091, 13.881, 5.180), 1);
		等待(2, 无视条件);
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("欢迎"), 字符串("{0}！", 事件玩家)));
		等待(3, 无视条件);
		停止镜头(事件玩家);
		开始镜头(事件玩家, 矢量(-101.135, 36.340, 58.135), 矢量(-102.421, 35.623, 58.552), 0);
		等待(0.250, 无视条件);
		开始镜头(事件玩家, 矢量(-102.011, 40.870, 57.053), 矢量(-103.432, 37.232, 60.143), 0.500);
		等待(7, 无视条件);
		开始镜头(事件玩家, 矢量(-102.011, 40.870, 57.053), 矢量(-103.432, 37.232, 60.143), 10);
		小字体信息(事件玩家, 自定义字符串("Stop!"));
		传送(事件玩家, 矢量(-121.536, 34.722, 72.042));
		设置朝向(事件玩家, 矢量(1, 0, 0), 至地图);
		等待(2, 无视条件);
		小字体信息(事件玩家, 自定义字符串("You're Under Arrest!"));
		等待(1, 无视条件);
		
		开始镜头(事件玩家, 矢量(-119.659, 36.083, 72.871), 矢量(-121.333, 36.062, 72.209), 0);
		等待(0.250, 无视条件);
		开始镜头(事件玩家, 矢量(-116.301, 36.147, 72.950), 矢量(-121.218, 36.054, 72.834), 0.500);
		等待(1.500, 无视条件);
		小字体信息(事件玩家, 自定义字符串("For Being Too Cute"));
		等待(5, 无视条件);
		事件玩家.I = 假;
		停止镜头(事件玩家);
		事件玩家.T = 真;
		清除状态(事件玩家, 定身);
		事件玩家.M = 真;
		取消与玩家的移动碰撞(事件玩家);
		小字体信息(事件玩家, 自定义字符串("Try to escape"));
		
	}
}

规则("intro 2")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		创建地图文本(范围内玩家(矢量(-119.608, 34.918, 73.546), 1, 所有队伍, 关闭), 自定义字符串("Drink me (hold R)"), 矢量(-119.503, 34.766, 73.603), 0.800, 根据表面截取,
			可见，位置和字符串, 自定义颜色(58, 35, 28, 255), 默认可见度);
		创建效果(所有玩家(所有队伍), 球体, 自定义颜色(65, 30, 22, 255), 矢量(-119.479, 34.667, 73.620), 0.100, 可见，位置和半径);
	}
}

规则("intro 3")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.H == 1;
		按钮被按下(事件玩家, 按钮(装填)) == 真;
		相距距离(事件玩家, 矢量(-119.631, 36.117, 73.486)) <= 2;
		事件玩家.C > 0.100;
	}

	动作
	{
		如条件为“假”则中止;
		等待(0.500, 无视条件);
		如条件为“假”则中止;
		等待(0.500, 无视条件);
		如条件为“假”则中止;
		等待(0.500, 无视条件);
		如条件为“假”则中止;
		事件玩家.C -= 0.150;
		开始调整玩家大小(事件玩家, 事件玩家.C, 真);
		播放效果(事件玩家, 负面状态施加声音, 颜色(白色), 事件玩家, 50);
		播放效果(事件玩家, 有害爆炸, 颜色(天蓝色), 事件玩家, 3);
		If(事件玩家.C <= 0.150);
			事件玩家.H = 2;
			取消与环境的移动碰撞(事件玩家, 假);
		End;
		如条件为”真“则循环;
	}
}

规则("intro 4")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		相距距离(事件玩家, 矢量(-119.146, 34.755, 72.901)) <= 1;
		事件玩家.H == 2;
	}

	动作
	{
		取消与环境的移动碰撞(事件玩家, 假);
	}
}

规则("intro 5")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		相距距离(事件玩家, 矢量(-119.146, 34.755, 72.901)) > 1;
		事件玩家.H == 2;
	}

	动作
	{
		开启与环境的移动碰撞(事件玩家);
	}
}

规则("intro 6")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		相距距离(事件玩家, 矢量(-122.001, 35.742, 72.858)) > 6;
		事件玩家.H == 2;
	}

	动作
	{
		开启与环境的移动碰撞(事件玩家);
		事件玩家.H = 3;
		停止调整玩家大小(事件玩家);
		播放效果(事件玩家, 有害爆炸, 颜色(橙色), 事件玩家, 3);
		播放效果(事件玩家, 正面状态施加声音, 颜色(白色), 事件玩家, 50);
		小字体信息(事件玩家, 自定义字符串("You escaped! Let's start the game"));
		
	}
}

规则("intro 7")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		创建效果(所有玩家(所有队伍), 球体, 颜色(白色), 矢量(-102.477, 40.156, 58.335), 0.050, 可见，位置和半径);
		创建效果(所有玩家(所有队伍), 球体, 颜色(白色), 矢量(-102.587, 40.176, 58.265), 0.050, 可见，位置和半径);
		创建效果(所有玩家(所有队伍), 球体, 颜色(黑色), 矢量(-102.457, 40.176, 58.285), 0.025, 可见，位置和半径);
		创建效果(所有玩家(所有队伍), 球体, 颜色(黑色), 矢量(-102.577, 40.196, 58.225), 0.025, 可见，位置和半径);
	}
}

规则("outro *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.Z == 1;
	}

	动作
	{
		事件玩家.Z = 2;
		事件玩家.W = 真;
		消除效果(事件玩家.E[5]);
		消除效果(事件玩家.E[6]);
		全局.W = 真;
		设置状态(事件玩家, 无, 定身, 9999);
		开始镜头(事件玩家, 矢量(-98.987, 37.114, 47.019), 矢量(-99.348, 37.277, 48.120), 0);
		等待(1, 无视条件);
		小字体信息(所有玩家(所有队伍), 自定义字符串("Oh my"));
		开始镜头(事件玩家, 矢量(-102.056, 39.805, 56.743), 矢量(-102.614, 39.940, 58.512), 20);
		传送(事件玩家, 矢量(-93.467, 43.279, 42.696));
		设置朝向(事件玩家, 矢量(-0.500, -0.300, 0.810), 至地图);
		开始调整玩家大小(事件玩家, 7, 真);
		等待(3, 无视条件);
		开始镜头(事件玩家, 矢量(-104.734, 37.553, 61.174), 矢量(-81.247, 53.418, 28.665), 0);
		
		等待(0.200, 无视条件);
		开始镜头(事件玩家, 矢量(-104.675, 40.123, 60.848), 矢量(-81.247, 53.418, 28.665), 0.800);
		等待(1, 无视条件);
		大字体信息(所有玩家(所有队伍), 字符串("{0} {1} {2}", 英雄图标字符串(所用英雄(事件玩家)), 事件玩家, 字符串("{0}！", 字符串("胜者"))));
		等待(4, 无视条件);
		开始镜头(事件玩家, 矢量(-89.657, 53.305, 44.101), 矢量(-93.432, 48.491, 44.273), 0);
		等待(1, 无视条件);
		全局.K = 假;
		交流(事件玩家, 问候);
		等待(0.500, 无视条件);
		播放效果(所有玩家(所有队伍), 有害爆炸, 颜色(橙色), 矢量(-102.454, 39.309, 58.096), 5);
		播放效果(所有玩家(所有队伍), 环状爆炸声音, 颜色(白色), 矢量(-102.287, 39.051, 57.737), 100);
		等待(0.100, 无视条件);
		播放效果(所有玩家(所有队伍), 有害爆炸, 自定义颜色(253, 76, 29, 255), 矢量(-102.346, 40.178, 58.149), 4);
		播放效果(所有玩家(所有队伍), 爆炸声音, 颜色(白色), 矢量(-102.287, 39.051, 57.737), 100);
		等待(0.100, 无视条件);
		播放效果(所有玩家(所有队伍), 有害爆炸, 颜色(橙色), 矢量(-101.526, 37.635, 58.250), 3);
		播放效果(所有玩家(所有队伍), 环状爆炸声音, 颜色(白色), 矢量(-102.287, 39.051, 57.737), 100);
		等待(0.100, 无视条件);
		播放效果(所有玩家(所有队伍), 有害爆炸, 自定义颜色(253, 76, 29, 255), 矢量(-102.755, 39.250, 57.550), 5);
		播放效果(所有玩家(所有队伍), 爆炸声音, 颜色(白色), 矢量(-102.287, 39.051, 57.737), 100);
		等待(0.100, 无视条件);
		播放效果(所有玩家(所有队伍), 有害爆炸, 颜色(橙色), 矢量(-102.062, 39.469, 58.753), 3);
		播放效果(所有玩家(所有队伍), 环状爆炸声音, 颜色(白色), 矢量(-102.287, 39.051, 57.737), 100);
		等待(0.100, 无视条件);
		播放效果(所有玩家(所有队伍), 有害爆炸, 自定义颜色(253, 76, 29, 255), 矢量(-102.437, 38.995, 57.742), 4);
		播放效果(所有玩家(所有队伍), 环状爆炸声音, 颜色(白色), 矢量(-102.287, 39.051, 57.737), 100);
		等待(0.100, 无视条件);
		播放效果(所有玩家(所有队伍), 有害爆炸, 颜色(橙色), 矢量(-102.454, 39.309, 58.096), 5);
		播放效果(所有玩家(所有队伍), 爆炸声音, 颜色(白色), 矢量(-102.287, 39.051, 57.737), 100);
		等待(0.100, 无视条件);
		播放效果(所有玩家(所有队伍), 有害爆炸, 自定义颜色(253, 76, 29, 255), 矢量(-102.346, 40.178, 58.149), 4);
		播放效果(所有玩家(所有队伍), 环状爆炸声音, 颜色(白色), 矢量(-102.287, 39.051, 57.737), 70);
		等待(0.100, 无视条件);
		播放效果(所有玩家(所有队伍), 有害爆炸, 颜色(橙色), 矢量(-101.526, 37.635, 58.250), 3);
		播放效果(所有玩家(所有队伍), 爆炸声音, 颜色(白色), 矢量(-102.287, 39.051, 57.737), 100);
		等待(0.100, 无视条件);
		播放效果(所有玩家(所有队伍), 有害爆炸, 自定义颜色(253, 76, 29, 255), 矢量(-102.755, 39.250, 57.550), 5);
		播放效果(所有玩家(所有队伍), 环状爆炸声音, 颜色(白色), 矢量(-102.287, 39.051, 57.737), 80);
		等待(0.100, 无视条件);
		播放效果(所有玩家(所有队伍), 有害爆炸, 颜色(橙色), 矢量(-102.062, 39.469, 58.753), 3);
		播放效果(所有玩家(所有队伍), 环状爆炸声音, 颜色(白色), 矢量(-102.287, 39.051, 57.737), 100);
		等待(0.100, 无视条件);
		播放效果(所有玩家(所有队伍), 有害爆炸, 自定义颜色(253, 76, 29, 255), 矢量(-102.437, 38.995, 57.742), 4);
		播放效果(所有玩家(所有队伍), 爆炸声音, 颜色(白色), 矢量(-102.287, 39.051, 57.737), 90);
		开始镜头(事件玩家, 矢量(-92.842, 39.148, 56.517), 矢量(-81.235, 41.150, 54.223), 0);
		开始调整玩家大小(事件玩家, 2, 真);
		传送(事件玩家, 矢量(-84.132, 40.191, 54.802));
		设置朝向(事件玩家, 矢量(0.980, 0, -0.180), 至地图);
		播放效果(所有玩家(所有队伍), 环状爆炸声音, 颜色(白色), 矢量(-102.287, 39.051, 57.737), 30);
		等待(0.100, 无视条件);
		播放效果(所有玩家(所有队伍), 爆炸声音, 颜色(白色), 矢量(-102.287, 39.051, 57.737), 50);
		等待(0.100, 无视条件);
		播放效果(所有玩家(所有队伍), 环状爆炸声音, 颜色(白色), 矢量(-102.287, 39.051, 57.737), 80);
		等待(0.100, 无视条件);
		播放效果(所有玩家(所有队伍), 环状爆炸声音, 颜色(白色), 矢量(-102.287, 39.051, 57.737), 50);
		等待(0.100, 无视条件);
		播放效果(所有玩家(所有队伍), 环状爆炸声音, 颜色(白色), 矢量(-102.287, 39.051, 57.737), 60);
		等待(0.100, 无视条件);
		播放效果(所有玩家(所有队伍), 爆炸声音, 颜色(白色), 矢量(-102.287, 39.051, 57.737), 80);
		等待(0.100, 无视条件);
		播放效果(所有玩家(所有队伍), 环状爆炸声音, 颜色(白色), 矢量(-102.287, 39.051, 57.737), 20);
		等待(0.100, 无视条件);
		播放效果(所有玩家(所有队伍), 环状爆炸声音, 颜色(白色), 矢量(-102.287, 39.051, 57.737), 50);
		播放效果(所有玩家(所有队伍), 环状爆炸声音, 颜色(白色), 矢量(-102.287, 39.051, 57.737), 80);
		等待(0.100, 无视条件);
		播放效果(所有玩家(所有队伍), 环状爆炸声音, 颜色(白色), 矢量(-102.287, 39.051, 57.737), 60);
		等待(0.100, 无视条件);
		播放效果(所有玩家(所有队伍), 爆炸声音, 颜色(白色), 矢量(-102.287, 39.051, 57.737), 80);
		等待(0.100, 无视条件);
		播放效果(所有玩家(所有队伍), 环状爆炸声音, 颜色(白色), 矢量(-102.287, 39.051, 57.737), 20);
		等待(0.100, 无视条件);
		播放效果(所有玩家(所有队伍), 环状爆炸声音, 颜色(白色), 矢量(-102.287, 39.051, 57.737), 50);
		等待(0.100, 无视条件);
		播放效果(所有玩家(所有队伍), 爆炸声音, 颜色(白色), 矢量(-102.287, 39.051, 57.737), 80);
		交流(事件玩家, 表情（上）);
		设置慢动作(30);
		开始镜头(事件玩家, 矢量(-87.173, 39.408, 55.395), 矢量(-81.978, 41.750, 54.368), 1);
		等待(3, 无视条件);
		设置慢动作(100);
		等待(3, 无视条件);
		停止镜头(事件玩家);
		创建效果(所有玩家(所有队伍), 火花, 颜色(青绿色), 事件玩家, 1.500, 可见，位置和半径);
		事件玩家.E[3] = 最后创建的实体;
		创建效果(所有玩家(所有队伍), 火花, 颜色(橙色), 事件玩家, 1.500, 可见，位置和半径);
		事件玩家.E[4] = 最后创建的实体;
		全局.W = 假;
		停止调整玩家大小(事件玩家);
		大字体信息(事件玩家, 字符串("{0}！", 字符串("恭喜")));
		清除状态(事件玩家, 定身);
		等待(10, 无视条件);
		播放效果(事件玩家, 状态爆炸声音, 颜色(白色), 事件玩家, 10);
		消除HUD文本(事件玩家.AA);
		等待(0.250, 无视条件);
		创建HUD文本(事件玩家, 图标字符串(对号), 自定义字符串("Try other maps!"), 自定义字符串("bit.do/whereisit "), 顶部, 1, 颜色(灰绿色), 颜色(白色), 颜色(灰绿色), 字符串, 默认可见度);
		事件玩家.AA = 上一个文本ID;
		等待(90, 无视条件);
		事件玩家.W = 假;
		事件玩家.Z = 0;
		消除效果(事件玩家.E[3]);
		消除效果(事件玩家.E[4]);
		
		禁用 小字体信息(事件玩家, 字符串("{0} {1}", 事件玩家, 字符串("不可见")));
	}
}

规则("total number of objects")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.O = 全局.N;
	}
}

规则("beginning of the game *")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.V = 30;
		全局.AB = 0;
		全局.AC = 矢量(-20.655, 39, 5.855);
		修改全局变量(J, 添加至数组, 5);
		修改全局变量(J, 添加至数组, 10);
		修改全局变量(J, 添加至数组, 15);
		修改全局变量(J, 添加至数组, 20);
		修改全局变量(J, 添加至数组, 25);
		修改全局变量(J, 添加至数组, 30);
		修改全局变量(J, 添加至数组, 35);
		修改全局变量(J, 添加至数组, 40);
		修改全局变量(J, 添加至数组, 45);
		修改全局变量(J, 添加至数组, 50);
		全局.Y = 30;
		全局.W = 假;
		全局.U = 假;
		全局.M = 假;
		全局.R[1] = 假;
		全局.R[3] = 0;
		全局.D[0] = 矢量(0, -50, 0);
		全局.AA = 7;
		关闭游戏预设音乐模式;
		关闭游戏预设通告模式;
		关闭游戏预设完成条件;
		关闭游戏预设计分模式;
		设置比赛时间(1);
		等待(2, 无视条件);
		设置比赛时间(3600);
		全局.AD = 0;
		禁用 创建HUD文本(所有玩家(所有队伍), 无, 字符串("尝试"), 无, 顶部, 0, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		全局.K = 假;
	}
}

规则("player spawn *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
		是否是机器人(事件玩家) == 假;
	}

	动作
	{
		隐藏英雄HUD(事件玩家);
		事件玩家.C = 1;
		事件玩家.H = 1;
		隐藏游戏模式HUD(事件玩家);
		开始强制设置玩家轮廓(事件玩家, 所有玩家(所有队伍), 假, 颜色(白色), 默认);
		事件玩家.F = 0;
		传送(事件玩家, 矢量(-100.731, 35.031, 63.206));
		设置启用技能 1(事件玩家, 假);
		设置启用技能 2(事件玩家, 假);
		事件玩家.I = 真;
		事件玩家.G = 5;
		事件玩家.N = 1;
		事件玩家.U = 假;
		事件玩家.V = 假;
		事件玩家.R = 假;
		事件玩家.W = 假;
		事件玩家.O = 假;
		事件玩家.Z = 0;
		事件玩家.X = 假;
		事件玩家.L = 假;
		根据条件跳过(全局.R[2] >= 3, 2);
		全局.R[2] += 1;
		全局.R[1] = 真;
		创建效果(事件玩家, 有益光环, 颜色(橙色), 全局.D[事件玩家.F], 2, 可见，位置和半径);
		事件玩家.E[5] = 最后创建的实体;
		创建效果(事件玩家, 火花, 颜色(橙色), 全局.D[事件玩家.F], 3, 可见，位置和半径);
		事件玩家.E[6] = 最后创建的实体;
		创建HUD文本(事件玩家, 字符串("{0} {1}", 图标字符串(方块), 事件玩家.N), 无, 无, 左边, 1, 颜色(橙色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		事件玩家.E[7] = 最后创建的实体;
		创建HUD文本(事件玩家, 无, 无, 字符串("对象"), 左边, 0, 颜色(白色), 颜色(白色), 颜色(橙色), 可见和字符串, 默认可见度);
		事件玩家.E[8] = 最后创建的实体;
		
		设置状态(事件玩家, 无, 无敌, 9999);
		事件玩家.S = 150;
		根据条件跳过(全局.L[1] != 无, 2);
		全局.L[1] = 事件玩家;
		中止;
		根据条件跳过(全局.L[2] != 无, 2);
		全局.L[2] = 事件玩家;
		中止;
		根据条件跳过(全局.L[3] != 无, 2);
		全局.L[3] = 事件玩家;
		中止;
	}
}

规则("infinite match time")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		比赛时间 <= 1800;
		比赛时间 > 10;
		游戏正在进行中 == 真;
	}

	动作
	{
		设置比赛时间(3600);
	}
}

规则("player pressed \"F\" key on the empty place")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		相距距离(事件玩家, 全局.D[事件玩家.F]) > 3;
		相距距离(事件玩家, 全局.D[事件玩家.F + 1]) > 3;
		事件玩家.I == 假;
		事件玩家.T == 假;
		具有状态(事件玩家, 冰冻) == 假;
		事件玩家.F < 全局.O;
		全局.K == 假;
		事件玩家.X == 假;
	}

	动作
	{
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("否"), 字符串("物品")));
		播放效果(事件玩家, 负面状态施加声音, 颜色(白色), 事件玩家, 30);
		设置状态(事件玩家, 无, 冰冻, 1);
		修改玩家分数(事件玩家, -1);
	}
}

规则("player found item")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		相距距离(事件玩家, 全局.D[事件玩家.F + 1]) <= 3;
		具有状态(事件玩家, 冰冻) == 假;
		事件玩家.F < 全局.O;
		事件玩家.H == 3;
		全局.K == 假;
		事件玩家.X == 假;
	}

	动作
	{
		小字体信息(事件玩家, 字符串("{0}！", 字符串("好")));
		播放效果(事件玩家, 环状爆炸, 颜色(橙色), 全局.D[事件玩家.F + 1], 5);
		播放效果(事件玩家, 环状爆炸, 颜色(橙色), 全局.D[事件玩家.F + 1], 7);
		播放效果(事件玩家, 正面状态施加声音, 颜色(白色), 事件玩家, 50);
		事件玩家.F += 1;
		事件玩家.K = 3;
		事件玩家.U = 真;
		事件玩家.G = 10;
		根据条件跳过(事件玩家.F == 全局.J[10], 11);
		根据条件跳过(事件玩家.F == 全局.J[9], 10);
		根据条件跳过(事件玩家.F == 全局.J[8], 9);
		根据条件跳过(事件玩家.F == 全局.J[7], 8);
		根据条件跳过(事件玩家.F == 全局.J[6], 7);
		根据条件跳过(事件玩家.F == 全局.J[5], 6);
		根据条件跳过(事件玩家.F == 全局.J[4], 5);
		根据条件跳过(事件玩家.F == 全局.J[3], 4);
		根据条件跳过(事件玩家.F == 全局.J[2], 3);
		根据条件跳过(事件玩家.F == 全局.J[1], 2);
		事件玩家.U = 假;
		事件玩家.T = 真;
		等待(1, 无视条件);
		播放效果(事件玩家, 正面状态施加声音, 颜色(白色), 事件玩家, 50);
		大字体信息(事件玩家, 字符串("{0} / {1}", 事件玩家.F, 全局.O));
		根据条件跳过(事件玩家.F != 2, 1);
		事件玩家.R = 真;
		根据条件跳过(事件玩家.F < 全局.O, 1);
		事件玩家.N = 事件玩家.F;
		根据条件跳过(事件玩家.F == 全局.O, 1);
		事件玩家.N = 事件玩家.F + 1;
	}
}

规则("shift key is pressed (acceleration)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(技能1)) == 真;
	}

	动作
	{
		设置移动速度(事件玩家, 事件玩家.S);
	}
}

规则("shift key is not pressed (slowdown)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(技能1)) == 假;
	}

	动作
	{
		设置移动速度(事件玩家, 110);
	}
}

规则("spacebar is pressed (fly)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(跳跃)) == 真;
		事件玩家.F >= 全局.Y;
	}

	动作
	{
		设置引力(事件玩家, 0);
	}
}

规则("spacebar is not pressed (gravity)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(跳跃)) == 假;
		事件玩家.F >= 全局.Y;
	}

	动作
	{
		设置引力(事件玩家, 100);
	}
}

规则("right click shows picture")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(辅助攻击模式)) == 真;
		事件玩家.I == 假;
		事件玩家.Z == 0;
		事件玩家.X == 假;
		事件玩家.H == 3;
	}

	动作
	{
		根据条件跳过(事件玩家.F < 全局.O, 1);
		事件玩家.N = 事件玩家.F;
		根据条件跳过(事件玩家.F == 全局.O, 1);
		事件玩家.N = 事件玩家.F + 1;
		开始镜头(事件玩家, 全局.C[事件玩家.N], 全局.D[事件玩家.N], 0);
		事件玩家.T = 假;
		根据条件跳过(事件玩家.U == 假, 1);
		事件玩家.O = 真;
		根据条件跳过(事件玩家.G > 0, 3);
		根据条件跳过(相距距离(所选位置(事件玩家), 全局.D[事件玩家.F + 1]) < 50, 1);
		小字体信息(事件玩家, 字符串("{0} {1} {2}", 字符串("对象"), 字符串("远"), 图标字符串(停止)));
		事件玩家.G = 1;
	}
}

规则("right mouse button is not pressed")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(辅助攻击模式)) == 假;
		事件玩家.I == 假;
		事件玩家.Z == 0;
		事件玩家.X == 假;
		事件玩家.H == 3;
	}

	动作
	{
		停止镜头(事件玩家);
		清除状态(事件玩家, 定身);
		根据条件跳过(事件玩家.U == 假, 1);
		事件玩家.O = 真;
		根据条件跳过(事件玩家.F < 全局.O, 1);
		事件玩家.N = 事件玩家.F;
		根据条件跳过(事件玩家.F == 全局.O, 1);
		事件玩家.N = 事件玩家.F + 1;
	}
}

规则("left mouse button shows previous objects")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(主要攻击模式)) == 真;
		按钮被按下(事件玩家, 按钮(辅助攻击模式)) == 真;
		事件玩家.I == 假;
		事件玩家.X == 假;
		事件玩家.Z == 0;
		事件玩家.H == 3;
	}

	动作
	{
		事件玩家.N -= 1;
		根据条件跳过(事件玩家.N > 0, 4);
		根据条件跳过(事件玩家.F == 全局.O, 1);
		事件玩家.N = 事件玩家.F + 1;
		根据条件跳过(事件玩家.F != 全局.O, 1);
		事件玩家.N = 事件玩家.F;
	}
}

规则("player found all objects (victory!)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.F == 全局.O;
	}

	动作
	{
		事件玩家.Z = 5;
		设置状态(事件玩家, 无, 定身, 9999);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 30);
		播放效果(事件玩家, 环状爆炸, 颜色(亮紫色), 全局.D[事件玩家.F], 6);
		播放效果(事件玩家, 有益爆炸, 颜色(橙色), 全局.D[事件玩家.F], 10);
		播放效果(事件玩家, 有益选择效果 , 颜色(橙色), 全局.D[事件玩家.F], 10);
		全局.K = 真;
		等待(3, 无视条件);
		事件玩家.Z = 1;
	}
}

规则("everyone is watching the winner *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.W == 假;
		事件玩家.Z == 0;
		全局.W == 真;
		事件玩家.F >= 2;
		事件玩家.H == 3;
	}

	动作
	{
		设置状态(事件玩家, 无, 定身, 9999);
		事件玩家.X = 真;
		开始镜头(事件玩家, 矢量(-98.987, 37.114, 47.019), 矢量(-99.348, 37.277, 48.120), 0);
		等待(1, 无视条件);
		开始镜头(事件玩家, 矢量(-102.056, 39.805, 56.743), 矢量(-102.614, 39.940, 58.512), 20);
		等待(3, 无视条件);
		开始镜头(事件玩家, 矢量(-104.734, 37.553, 61.174), 矢量(-81.247, 53.418, 28.665), 0);
		等待(0.200, 无视条件);
		开始镜头(事件玩家, 矢量(-104.675, 40.123, 60.848), 矢量(-81.247, 53.418, 28.665), 0.800);
		等待(1, 无视条件);
		等待(4, 无视条件);
		全局.K = 假;
		开始镜头(事件玩家, 矢量(-89.657, 53.305, 44.101), 矢量(-93.432, 48.491, 44.273), 0);
		等待(1, 无视条件);
		等待(0.500, 无视条件);
		等待(0.100, 无视条件);
		等待(0.100, 无视条件);
		等待(0.100, 无视条件);
		等待(0.100, 无视条件);
		等待(0.100, 无视条件);
		等待(0.100, 无视条件);
		等待(0.100, 无视条件);
		等待(0.100, 无视条件);
		等待(0.100, 无视条件);
		等待(0.100, 无视条件);
		等待(0.100, 无视条件);
		开始镜头(事件玩家, 矢量(-92.842, 39.148, 56.517), 矢量(-81.235, 41.150, 54.223), 0);
		等待(0.100, 无视条件);
		等待(0.100, 无视条件);
		等待(0.100, 无视条件);
		等待(0.100, 无视条件);
		等待(0.100, 无视条件);
		等待(0.100, 无视条件);
		等待(0.100, 无视条件);
		等待(0.100, 无视条件);
		等待(0.100, 无视条件);
		等待(0.100, 无视条件);
		等待(0.100, 无视条件);
		等待(0.100, 无视条件);
		开始镜头(事件玩家, 矢量(-87.173, 39.408, 55.395), 矢量(-81.978, 41.750, 54.368), 1);
		等待(3, 无视条件);
		等待(3, 无视条件);
		清除状态(事件玩家, 定身);
		全局.W = 假;
		停止镜头(事件玩家);
		事件玩家.X = 假;
	}
}

规则("automatically show next object")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.T == 真;
		事件玩家.U == 假;
		事件玩家.H == 3;
	}

	动作
	{
		等待(3, 无视条件);
		如条件为“假”则中止;
		事件玩家.Q = 真;
		设置状态(事件玩家, 无, 定身, 5);
		开始镜头(事件玩家, 全局.C[事件玩家.F + 1], 全局.D[事件玩家.F + 1], 0);
		根据条件跳过(事件玩家.F != 0, 1);
		大字体信息(事件玩家, 字符串("{0} {1}", 字符串("寻找"), 字符串("对象")));
		根据条件跳过(事件玩家.F == 0, 1);
		大字体信息(事件玩家, 字符串("{0} {1}", 字符串("寻找"), 字符串("下一批对象")));
		等待(5, 无视条件);
		事件玩家.T = 假;
		停止镜头(事件玩家);
		事件玩家.Q = 假;
	}
}

规则("cancel auto preview")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.T == 真;
		事件玩家.Q == 真;
		事件玩家.Z == 0;
		事件玩家.X == 假;
	}

	动作
	{
		根据条件跳过(按钮被按下(事件玩家, 按钮(主要攻击模式)) != 真, 4);
		事件玩家.T = 假;
		清除状态(事件玩家, 定身);
		停止镜头(事件玩家);
		事件玩家.Q = 假;
		根据条件跳过(按钮被按下(事件玩家, 按钮(辅助攻击模式)) != 真, 4);
		事件玩家.T = 假;
		清除状态(事件玩家, 定身);
		停止镜头(事件玩家);
		事件玩家.Q = 假;
		根据条件跳过(按钮被按下(事件玩家, 按钮(跳跃)) != 真, 4);
		事件玩家.T = 假;
		清除状态(事件玩家, 定身);
		停止镜头(事件玩家);
		事件玩家.Q = 假;
		根据条件跳过(按钮被按下(事件玩家, 按钮(终极技能)) != 真, 4);
		事件玩家.T = 假;
		清除状态(事件玩家, 定身);
		停止镜头(事件玩家);
		事件玩家.Q = 假;
		根据条件跳过(按钮被按下(事件玩家, 按钮(技能2)) != 真, 4);
		事件玩家.T = 假;
		清除状态(事件玩家, 定身);
		停止镜头(事件玩家);
		事件玩家.Q = 假;
	}
}

规则("message about flying")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.F == 全局.Y;
	}

	动作
	{
		等待(8, 无视条件);
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("{0} - {1}", 字符串("跳跃"), 字符串("飞行")), 图标字符串(光晕)));
		等待(30, 无视条件);
		如条件为“假”则中止;
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("{0} - {1}", 字符串("跳跃"), 字符串("飞行")), 图标字符串(光晕)));
		等待(30, 无视条件);
		如条件为“假”则中止;
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("{0} - {1}", 字符串("跳跃"), 字符串("飞行")), 图标字符串(光晕)));
		等待(30, 无视条件);
		如条件为“假”则中止;
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("{0} - {1}", 字符串("跳跃"), 字符串("飞行")), 图标字符串(光晕)));
		等待(30, 无视条件);
		如条件为“假”则中止;
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("{0} - {1}", 字符串("跳跃"), 字符串("飞行")), 图标字符串(光晕)));
	}
}

规则("player left game")
{
	事件
	{
		玩家离开比赛;
		双方;
		全部;
	}

	动作
	{
		全局.K = 假;
		消除效果(事件玩家.E[1]);
		消除效果(事件玩家.E[2]);
		消除效果(事件玩家.E[3]);
		消除效果(事件玩家.E[4]);
		消除效果(事件玩家.E[5]);
		消除效果(事件玩家.E[6]);
		消除效果(事件玩家.E[7]);
		消除效果(事件玩家.E[8]);
		根据条件跳过(全局.L[1] != 事件玩家, 1);
		所有玩家(所有队伍).K = 3;
		根据条件跳过(全局.L[2] != 事件玩家, 1);
		所有玩家(所有队伍).K = 3;
		根据条件跳过(全局.L[3] != 事件玩家, 1);
		所有玩家(所有队伍).K = 3;
		设置慢动作(100);
		消除HUD文本(事件玩家.AA);
	}
}

规则("speed upgrade")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.U == 真;
		事件玩家.F != 全局.Y;
		事件玩家.F != 全局.O;
	}

	动作
	{
		播放效果(事件玩家, 环状爆炸, 颜色(天蓝色), 全局.D[事件玩家.F], 6);
		创建光束效果(事件玩家, 有益光束, 全局.D[事件玩家.F], 事件玩家, 颜色(天蓝色), 可见，位置和半径);
		事件玩家.E[1] = 最后创建的实体;
		创建效果(事件玩家, 能量声音, 颜色(白色), 事件玩家, 30, 可见，位置和半径);
		事件玩家.E[2] = 最后创建的实体;
		根据条件跳过(事件玩家.S > 410, 1);
		事件玩家.S += 全局.V;
		等待(1, 无视条件);
		消除效果(事件玩家.E[1]);
		消除效果(事件玩家.E[2]);
		小字体信息(事件玩家, 字符串("{0} {1}", 图标字符串(箭头：向上), 字符串("{0}！", 字符串("等级提升"))));
		大字体信息(事件玩家, 字符串("{0} {1} {2}", 字符串("速度"), 字符串("{0}！", 字符串("升级")), 图标字符串(箭矢)));
		等待(1, 无视条件);
		事件玩家.U = 假;
		根据条件跳过(事件玩家.O == 真, 1);
		事件玩家.T = 真;
		根据条件跳过(事件玩家.O == 假, 1);
		事件玩家.O = 假;
		事件玩家.R = 真;
	}
}

规则("flying upgrade")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.U == 真;
		事件玩家.F == 全局.Y;
	}

	动作
	{
		播放效果(事件玩家, 环状爆炸, 颜色(亮紫色), 全局.D[事件玩家.F], 7);
		创建光束效果(事件玩家, 有益光束, 全局.D[事件玩家.F], 事件玩家, 颜色(橙色), 可见，位置和半径);
		事件玩家.E[1] = 最后创建的实体;
		创建效果(事件玩家, 能量声音, 颜色(白色), 事件玩家, 30, 可见，位置和半径);
		事件玩家.E[2] = 最后创建的实体;
		事件玩家.Y = 真;
		等待(1, 无视条件);
		消除效果(事件玩家.E[1]);
		消除效果(事件玩家.E[2]);
		小字体信息(事件玩家, 字符串("{0} {1}", 图标字符串(箭头：向上), 字符串("{0}！", 字符串("等级提升"))));
		大字体信息(事件玩家, 字符串("{0} {1} {2}", 字符串("飞行"), 字符串("{0}！", 字符串("升级")), 图标字符串(光晕)));
		等待(1, 无视条件);
		事件玩家.U = 假;
		根据条件跳过(事件玩家.O == 真, 1);
		事件玩家.T = 真;
		根据条件跳过(事件玩家.O == 假, 1);
		事件玩家.O = 假;
	}
}

规则("rating")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		全局.R[1] == 真;
	}

	动作
	{
		根据条件跳过(全局.R[2] < 1, 4);
		根据条件跳过(全局.R[3] >= 1, 3);
		创建HUD文本(所有玩家(所有队伍), 无, 无, 字符串("{0} {1}", 字符串("最佳"), 字符串("{0}:", 字符串("玩家"))), 右边, 0, 颜色(白色), 颜色(白色), 颜色(橙色), 可见和字符串, 默认可见度);
		创建HUD文本(所有玩家(所有队伍), 无, 无, 字符串("{0} {1} {2}", 英雄图标字符串(所用英雄(全局.L[1])), 全局.L[1], 字符串("{0} / {1}", 全局.L[1].F, 全局.O)), 右边, 1, 颜色(白色),
			颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		全局.R[3] = 1;
		根据条件跳过(全局.R[2] < 2, 3);
		根据条件跳过(全局.R[3] >= 2, 2);
		创建HUD文本(所有玩家(所有队伍), 无, 无, 字符串("{0} {1} {2}", 英雄图标字符串(所用英雄(全局.L[2])), 全局.L[2], 字符串("{0} / {1}", 全局.L[2].F, 全局.O)), 右边, 2, 颜色(白色),
			颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		全局.R[3] = 2;
		根据条件跳过(全局.R[2] != 3, 3);
		根据条件跳过(全局.R[3] == 3, 2);
		创建HUD文本(所有玩家(所有队伍), 无, 无, 字符串("{0} {1} {2}", 英雄图标字符串(所用英雄(全局.L[3])), 全局.L[3], 字符串("{0} / {1}", 全局.L[3].F, 全局.O)), 右边, 3, 颜色(白色),
			颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		全局.R[3] = 3;
		等待(1, 无视条件);
		根据条件循环(全局.R[2] > 全局.R[3]);
		全局.R[1] = 假;
	}
}

规则("rating update")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.K > 0;
	}

	动作
	{
		根据条件跳过(全局.L[1] != 事件玩家, 2);
		事件玩家.K = 0;
		中止;
		根据条件跳过(全局.L[2] != 事件玩家, 5);
		根据条件跳过(事件玩家.F <= 全局.L[1].F, 4);
		全局.L[2] = 全局.L[1];
		全局.L[1] = 事件玩家;
		事件玩家.K = 0;
		中止;
		根据条件跳过(全局.L[3] != 事件玩家, 3);
		根据条件跳过(事件玩家.F <= 全局.L[2].F, 2);
		全局.L[3] = 全局.L[2];
		全局.L[2] = 事件玩家;
		根据条件跳过(全局.L[1] == 事件玩家, 4);
		根据条件跳过(全局.L[2] == 事件玩家, 3);
		根据条件跳过(全局.L[3] == 事件玩家, 2);
		根据条件跳过(事件玩家.F <= 全局.L[3].F, 1);
		全局.L[3] = 事件玩家;
		等待(0.050, 无视条件);
		事件玩家.K -= 1;
		如条件为”真“则循环;
	}
}

规则("search time")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.W == 假;
		事件玩家.G > 0;
		事件玩家.H == 3;
	}

	动作
	{
		等待(30, 无视条件);
		事件玩家.G -= 1;
		如条件为”真“则循环;
	}
}

规则("graphic settings warning 1 *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.F == 全局.AA;
	}

	动作
	{
		等待(3, 无视条件);
		如条件为“假”则中止;
		消除HUD文本(事件玩家.AA);
		等待(0.250, 无视条件);
		创建HUD文本(事件玩家, 图标字符串(眼睛), 自定义字符串("Set medium or higher model detail settings to see all objects"), 自定义字符串(
			"Options > Video > Graphics quality > Advanced > Model Detail"), 顶部, 1, 颜色(橙色), 颜色(白色), 颜色(橙色), 字符串, 默认可见度);
		事件玩家.AA = 上一个文本ID;
	}
}

规则("graphic settings warning 2 *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.F == 全局.AA + 1;
	}

	动作
	{
		消除HUD文本(事件玩家.AA);
	}
}

规则("hint near the first object *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		相距距离(事件玩家, 全局.D[1]) <= 3;
		事件玩家.F == 0;
		事件玩家.H == 3;
	}

	动作
	{
		小字体信息(事件玩家, 字符串("{0} {1} {2}", 字符串("互动"), 字符串("{0}！", 字符串("此处")), 字符串("({0})", 输入绑定字符串(按钮(互动)))));
	}
}

规则("message about right button")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.M == 真;
		事件玩家.H == 3;
	}

	动作
	{
		等待(9, 无视条件);
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("{0} - {1}", 输入绑定字符串(按钮(辅助攻击模式)), 字符串("当前目标")), 图标字符串(眼睛)));
		事件玩家.M = 假;
	}
}

规则("message about previous objects")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.F >= 10;
	}

	动作
	{
		等待(25, 无视条件);
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("{0} = {1}", 字符串("{0} + {1}", 输入绑定字符串(按钮(辅助攻击模式)), 输入绑定字符串(按钮(主要攻击模式))), 字符串("对象")), 图标字符串(回收)));
	}
}

规则("message about running")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.R == 真;
	}

	动作
	{
		等待(8, 无视条件);
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("{0} - {1}", 自定义字符串("[Shift]"), 字符串("运行")), 图标字符串(箭矢)));
		事件玩家.R = 假;
	}
}
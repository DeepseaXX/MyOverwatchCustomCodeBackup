设置
{
	主程序
	{
		描述: "[Right click] to see a picture of a secret place ★ Find this place and press [F] to get the next picture ★ Find all places to win! ★ Set medium or higher model detail settings for 100% fun ★ Try other maps: bit.do/whereisit ★ Made by Foren#2660"
	}

	大厅
	{
		地图轮换: 暂停轮换
		比赛结束后转换队伍: 否
		比赛语音聊天: 启用
		自由混战人数上限: 11
		观战者人数上限: 3
		返回大厅: 从不
	}

	模式
	{
		死斗
		{
			主动重生: 关闭

			启用地图
			{
				万圣节吉拉德堡
			}
		}

		综合
		{
			急救包刷新: 禁用
			比赛模式开始: 即时
			消灭提示: 关闭
			消灭镜头: 关闭
			英雄限制: 关闭
		}
	}

	英雄
	{
		综合
		{
			D.Va
			{
				主要攻击模式: 关闭
				微型飞弹: 关闭
				推进器: 关闭
				终极技能（自毁）: 关闭
				近身攻击: 关闭
				防御矩阵: 关闭
			}

			半藏
			{
				主要攻击模式: 关闭
				岚: 关闭
				终极技能（竜）: 关闭
				跃: 关闭
				近身攻击: 关闭
				音: 关闭
			}

			卢西奥
			{
				主要攻击模式: 关闭
				切歌: 关闭
				强音: 关闭
				终极技能（音障）: 关闭
				近身攻击: 关闭
				音波: 关闭
			}

			回声
			{
				主要攻击模式: 关闭
				滑翔: 关闭
				终极技能（人格复制）: 关闭
				聚焦光线: 关闭
				近身攻击: 关闭
				飞行: 关闭
				黏性炸弹: 关闭
			}

			堡垒
			{
				主要攻击模式: 关闭
				切换模式: 关闭
				终极技能（坦克模式）: 关闭
				自我修复: 关闭
				近身攻击: 关闭
			}

			士兵：76
			{
				主要攻击模式: 关闭
				生物力场: 关闭
				疾跑: 关闭
				终极技能（战术目镜）: 关闭
				螺旋飞弹: 关闭
				近身攻击: 关闭
			}

			天使
			{
				主要攻击模式: 关闭
				守护天使: 关闭
				终极技能（女武神）: 关闭
				自动恢复: 关闭
				辅助攻击模式: 关闭
				近身攻击: 关闭
				重生: 关闭
			}

			奥丽莎
			{
				主要攻击模式: 关闭
				强固防御: 关闭
				站住别动: 关闭
				终极技能（超充能器）: 关闭
				近身攻击: 关闭
				防护屏障: 关闭
			}

			安娜
			{
				主要攻击模式: 关闭
				生物手雷: 关闭
				终极技能（纳米激素）: 关闭
				近身攻击: 关闭
				重生时终极技能充能完毕: 开启
				麻醉镖: 关闭
			}

			巴蒂斯特
			{
				愈合冲击: 关闭
				终极技能（增幅矩阵）: 关闭
				维生力场: 关闭
				近身攻击: 关闭
			}

			布丽吉塔
			{
				主要攻击模式: 关闭
				屏障护盾: 关闭
				恢复包: 关闭
				流星飞锤: 关闭
				终极技能（集结号令）: 关闭
				能量盾击: 关闭
				近身攻击: 关闭
			}

			托比昂
			{
				主要攻击模式: 关闭
				热力过载: 关闭
				终极技能（熔火核心）: 关闭
				辅助攻击模式: 关闭
				近身攻击: 关闭
				部署炮台: 关闭
			}

			末日铁拳
			{
				上勾重拳: 关闭
				主要攻击模式: 关闭
				火箭重拳: 关闭
				终极技能（毁天灭地）: 关闭
				裂地重拳: 关闭
				近身攻击: 关闭
			}

			查莉娅
			{
				主要攻击模式: 关闭
				投射屏障: 关闭
				粒子屏障: 关闭
				终极技能（重力喷涌）: 关闭
				辅助攻击模式: 关闭
				近身攻击: 关闭
			}

			死神
			{
				主要攻击模式: 关闭
				幽灵形态: 关闭
				战斗时终极技能充能速度 死亡绽放: 0%
				暗影步: 关闭
				终极技能充能速度（死亡绽放）: 10%
				终极技能自动充能速度 死亡绽放: 0%
				近身攻击: 关闭
			}

			法老之鹰
			{
				主要攻击模式: 关闭
				悬浮背包: 关闭
				推进背包: 关闭
				终极技能（火箭弹幕）: 关闭
				近身攻击: 关闭
				震荡冲击: 关闭
			}

			温斯顿
			{
				主要攻击模式: 关闭
				喷射背包: 关闭
				屏障发射器: 关闭
				终极技能（原始暴怒）: 关闭
				近身攻击: 关闭
			}

			源氏
			{
				主要攻击模式: 关闭
				影: 关闭
				终极技能（斩）: 关闭
				辅助攻击模式: 关闭
				近身攻击: 关闭
				闪: 关闭
			}

			狂鼠
			{
				主要攻击模式: 关闭
				捕兽夹: 关闭
				终极技能（炸弹轮胎）: 关闭
				近身攻击: 关闭
				震荡地雷: 关闭
			}

			猎空
			{
				主要攻击模式: 关闭
				终极技能（脉冲炸弹）: 关闭
				近身攻击: 关闭
				闪回: 关闭
				闪现: 关闭
			}

			破坏球
			{
				主要攻击模式: 关闭
				动力铁球: 关闭
				工程抓钩: 关闭
				感应护盾: 关闭
				终极技能（地雷禁区）: 关闭
				近身攻击: 关闭
				重力坠击: 关闭
			}

			禅雅塔
			{
				主要攻击模式: 关闭
				乱: 关闭
				终极技能自动充能速度 圣: 0%
				谐: 关闭
				辅助攻击模式: 关闭
				近身攻击: 关闭
			}

			秩序之光
			{
				主要攻击模式: 关闭
				传送面板: 关闭
				哨戒炮: 关闭
				终极技能（光子屏障）: 关闭
				辅助攻击模式: 关闭
				近身攻击: 关闭
			}

			美
			{
				主要攻击模式: 关闭
				冰墙: 关闭
				急冻: 关闭
				终极技能（暴雪）: 关闭
				辅助攻击模式: 关闭
				近身攻击: 关闭
			}

			艾什
			{
				主要攻击模式: 关闭
				延时雷管: 关闭
				短筒猎枪: 关闭
				终极技能（召唤鲍勃）: 关闭
				近身攻击: 关闭
			}

			莫伊拉
			{
				主要攻击模式: 关闭
				消散: 关闭
				生化之球: 关闭
				终极技能（聚合射线）: 关闭
				辅助攻击模式: 关闭
				近身攻击: 关闭
			}

			莱因哈特
			{
				主要攻击模式: 关闭
				冲锋: 关闭
				屏障力场: 关闭
				烈焰打击: 关闭
				终极技能（裂地猛击）: 关闭
				近身攻击: 关闭
			}

			西格玛
			{
				主要攻击模式: 关闭
				动能俘获: 关闭
				实验屏障: 关闭
				终极技能（引力乱流）: 关闭
				质量吸附: 关闭
				近身攻击: 关闭
			}

			路霸
			{
				主要攻击模式: 关闭
				呼吸器: 关闭
				终极技能（鸡飞狗跳）: 关闭
				辅助攻击模式: 关闭
				近身攻击: 关闭
				链钩: 关闭
			}

			麦克雷
			{
				主要攻击模式: 关闭
				战术翻滚: 关闭
				终极技能（神射手）: 关闭
				辅助攻击模式: 关闭
				近身攻击: 关闭
				闪光弹: 关闭
			}

			黑影
			{
				主要攻击模式: 关闭
				位移传动: 关闭
				终极技能（电磁脉冲）: 关闭
				近身攻击: 关闭
				隐秘潜行: 关闭
				黑客入侵: 关闭
			}

			黑百合
			{
				主要攻击模式: 关闭
				剧毒诡雷: 关闭
				抓钩: 关闭
				终极技能（红外侦测）: 关闭
				近身攻击: 关闭
			}

			禁用英雄
			{
				半藏
				死神
				破坏球
			}
		}
	}
}

变量
{
	全局:
		26: AA
		27: AB
		28: AC
		29: AD

	玩家:
		26: AA
}

规则("// copy and paste the following line into the game title: *")
{
	事件
	{
		持续 - 全局;
	}
}

规则("WHERE IS IT? ★ Château Guillard ★ No limits")
{
	事件
	{
		持续 - 全局;
	}
}

规则("// all maps and additional info: bit.do/whereisit")
{
	事件
	{
		持续 - 全局;
	}
}

规则("// \"WHERE IS IT?\" ver. 1.3")
{
	事件
	{
		持续 - 全局;
	}
}

规则("// original mode is made by Foren#2660")
{
	事件
	{
		持续 - 全局;
	}
}

规则("all objects *")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.N = 0;
		全局.N += 1;
		全局.C[全局.N] = 矢量(196.063, 16.990, 46.857);
		全局.D[全局.N] = 矢量(195.225, 16.954, 45.686);
		全局.N += 1;
		全局.C[全局.N] = 矢量(167.056, 6.864, 80.506);
		全局.D[全局.N] = 矢量(166.831, 6.783, 80.487);
		全局.N += 1;
		全局.C[全局.N] = 矢量(224.739, 2.126, 77.707);
		全局.D[全局.N] = 矢量(224.949, 1.828, 77.846);
		全局.N += 1;
		全局.C[全局.N] = 矢量(230.627, 4.219, 113.112);
		全局.D[全局.N] = 矢量(231.063, 4.323, 113.070);
		全局.N += 1;
		全局.C[全局.N] = 矢量(176.798, 10.105, 101.242);
		全局.D[全局.N] = 矢量(176.794, 10.015, 101.240);
		全局.N += 1;
		全局.C[全局.N] = 矢量(222.492, 10.377, 80.990);
		全局.D[全局.N] = 矢量(222.912, 10.380, 80.991);
		全局.N += 1;
		全局.C[全局.N] = 矢量(202.467, 0.294, 77.083);
		全局.D[全局.N] = 矢量(202.506, 0.088, 77.066);
		全局.N += 1;
		全局.C[全局.N] = 矢量(179.091, 6.583, 81.974);
		全局.D[全局.N] = 矢量(178.858, 5.899, 81.053);
		全局.N += 1;
		全局.C[全局.N] = 矢量(175.310, 11.669, 106.570);
		全局.D[全局.N] = 矢量(175.106, 11.595, 106.673);
		全局.N += 1;
		全局.C[全局.N] = 矢量(219.137, 2.692, 74.106);
		全局.D[全局.N] = 矢量(219.061, 2.519, 73.835);
		全局.N += 1;
		全局.C[全局.N] = 矢量(189.667, 8.485, 97.163);
		全局.D[全局.N] = 矢量(189.671, 8.127, 97.126);
		全局.N += 1;
		全局.C[全局.N] = 矢量(206.118, 14.686, 55.760);
		全局.D[全局.N] = 矢量(206.142, 15.174, 55.614);
		全局.N += 1;
		全局.C[全局.N] = 矢量(180.918, 10.459, 108.326);
		全局.D[全局.N] = 矢量(180.786, 10.762, 108.181);
		全局.N += 1;
		全局.C[全局.N] = 矢量(218.757, 1.568, 75.595);
		全局.D[全局.N] = 矢量(218.792, 1.180, 75.596);
		全局.N += 1;
		全局.C[全局.N] = 矢量(179.152, 9.899, 97.691);
		全局.D[全局.N] = 矢量(179.041, 9.912, 97.735);
		全局.N += 1;
		全局.C[全局.N] = 矢量(181.638, 3.122, 85.390);
		全局.D[全局.N] = 矢量(181.534, 3.237, 85.780);
		全局.N += 1;
		全局.C[全局.N] = 矢量(222.392, 9.083, 61.278);
		全局.D[全局.N] = 矢量(222.863, 9.399, 60.618);
		全局.N += 1;
		全局.C[全局.N] = 矢量(210.838, 0.299, 77.817);
		全局.D[全局.N] = 矢量(210.717, 0.638, 77.820);
		全局.N += 1;
		全局.C[全局.N] = 矢量(176.601, 10.018, 101.985);
		全局.D[全局.N] = 矢量(176.600, 9.957, 101.985);
		全局.N += 1;
		全局.C[全局.N] = 矢量(223.264, 10.126, 69.856);
		全局.D[全局.N] = 矢量(223.245, 9.647, 69.861);
		全局.N += 1;
		全局.C[全局.N] = 矢量(165.596, 6.082, 81.813);
		全局.D[全局.N] = 矢量(165.070, 6.370, 81.825);
		全局.N += 1;
		全局.C[全局.N] = 矢量(224.971, 1.809, 76.114);
		全局.D[全局.N] = 矢量(224.992, 2.164, 76.165);
		全局.N += 1;
		全局.C[全局.N] = 矢量(204.278, 9.252, 70.664);
		全局.D[全局.N] = 矢量(204.185, 9.134, 70.664);
		全局.N += 1;
		全局.C[全局.N] = 矢量(177.720, 9.988, 102.199);
		全局.D[全局.N] = 矢量(177.743, 9.659, 102.209);
		全局.N += 1;
		全局.C[全局.N] = 矢量(187.248, 6.411, 93.358);
		全局.D[全局.N] = 矢量(187.270, 6.537, 94.612);
		全局.N += 1;
		全局.C[全局.N] = 矢量(175.732, 0.118, 52.436);
		全局.D[全局.N] = 矢量(175.693, 0.135, 52.292);
		全局.N += 1;
		全局.C[全局.N] = 矢量(222.771, 8.377, 86.240);
		全局.D[全局.N] = 矢量(222.607, 8.128, 86.276);
		全局.N += 1;
		全局.C[全局.N] = 矢量(206.528, 0.339, 90.356);
		全局.D[全局.N] = 矢量(206.499, 0.217, 85.617);
		全局.N += 1;
		全局.C[全局.N] = 矢量(174.484, 6.741, 94.197);
		全局.D[全局.N] = 矢量(174.449, 6.385, 94.042);
		全局.N += 1;
		全局.C[全局.N] = 矢量(193.360, -1.613, 112.300);
		全局.D[全局.N] = 矢量(193.360, 6.830, 112.637);
		全局.N += 1;
		全局.C[全局.N] = 矢量(207.782, 20.476, 79.817);
		全局.D[全局.N] = 矢量(207.842, 21.243, 79.565);
		全局.N += 1;
		全局.C[全局.N] = 矢量(175.341, 14.232, 105.034);
		全局.D[全局.N] = 矢量(175.126, 14.228, 105.139);
		全局.N += 1;
		全局.C[全局.N] = 矢量(216.703, 26.515, 54.208);
		全局.D[全局.N] = 矢量(217.477, 26.308, 54.460);
		全局.N += 1;
		全局.C[全局.N] = 矢量(215.077, 9.714, 85.616);
		全局.D[全局.N] = 矢量(215.375, 9.756, 85.481);
		全局.N += 1;
		全局.C[全局.N] = 矢量(237.999, 4.091, 105.115);
		全局.D[全局.N] = 矢量(238.431, 4.163, 105.217);
		全局.N += 1;
		全局.C[全局.N] = 矢量(204.380, 16.630, 87.380);
		全局.D[全局.N] = 矢量(204.220, 16.440, 87.486);
		全局.N += 1;
		全局.C[全局.N] = 矢量(171.733, 16.221, 118.829);
		全局.D[全局.N] = 矢量(169.928, 16.151, 118.386);
		全局.N += 1;
		全局.C[全局.N] = 矢量(213.891, 2.282, 78.053);
		全局.D[全局.N] = 矢量(213.869, 1.382, 78.051);
		全局.N += 1;
		全局.C[全局.N] = 矢量(187.660, 1.327, 70.425);
		全局.D[全局.N] = 矢量(186.053, 2.378, 72.102);
		全局.N += 1;
		全局.C[全局.N] = 矢量(172.235, 5.310, 87.886);
		全局.D[全局.N] = 矢量(171.973, 5.307, 87.820);
		全局.N += 1;
		全局.C[全局.N] = 矢量(235.021, 6.094, 66.859);
		全局.D[全局.N] = 矢量(235.311, 8.779, 66.862);
		全局.N += 1;
		全局.C[全局.N] = 矢量(176.571, 6.965, 63.268);
		全局.D[全局.N] = 矢量(177.203, 7.729, 63.030);
		全局.N += 1;
		全局.C[全局.N] = 矢量(215.291, 1.114, 73.136);
		全局.D[全局.N] = 矢量(215.230, 1.116, 74.064);
		全局.N += 1;
		全局.C[全局.N] = 矢量(177.251, 0.087, 50.382);
		全局.D[全局.N] = 矢量(177.248, 0.437, 49.932);
		全局.N += 1;
		全局.C[全局.N] = 矢量(218.330, 27.150, 78.075);
		全局.D[全局.N] = 矢量(218.333, 20.973, 77.904);
		全局.N += 1;
		全局.C[全局.N] = 矢量(179.831, 10.442, 60.159);
		全局.D[全局.N] = 矢量(180.020, 10.601, 60.421);
		全局.N += 1;
		全局.C[全局.N] = 矢量(219.154, 16.830, 92.058);
		全局.D[全局.N] = 矢量(219.154, 17.245, 91.998);
		全局.N += 1;
		全局.C[全局.N] = 矢量(214.874, 8.486, 50.317);
		全局.D[全局.N] = 矢量(214.643, 8.295, 50.316);
		全局.N += 1;
		全局.C[全局.N] = 矢量(190.027, 27.880, 70.452);
		全局.D[全局.N] = 矢量(190.124, 27.514, 71.065);
		全局.N += 1;
		全局.C[全局.N] = 矢量(177.596, 10.903, 80.982);
		全局.D[全局.N] = 矢量(177.866, 10.917, 80.981);
	}
}

规则("total number of objects")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.O = 全局.N;
	}
}

规则("beginning of the game *")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.E = 2;
		全局.V = 10;
		全局.AB = 0;
		全局.AC = 矢量(-20.655, 39, 5.855);
		修改全局变量(J, 添加至数组, 5);
		修改全局变量(J, 添加至数组, 10);
		修改全局变量(J, 添加至数组, 15);
		修改全局变量(J, 添加至数组, 20);
		修改全局变量(J, 添加至数组, 25);
		修改全局变量(J, 添加至数组, 30);
		修改全局变量(J, 添加至数组, 35);
		修改全局变量(J, 添加至数组, 40);
		修改全局变量(J, 添加至数组, 45);
		修改全局变量(J, 添加至数组, 50);
		全局.Y = 30;
		全局.W = 假;
		全局.U = 假;
		全局.M = 假;
		全局.R[1] = 假;
		全局.R[3] = 0;
		全局.D[0] = 矢量(0, -50, 0);
		全局.AA = 8;
		关闭游戏预设音乐模式;
		关闭游戏预设通告模式;
		关闭游戏预设完成条件;
		关闭游戏预设计分模式;
		设置比赛时间(2);
		等待(3, 无视条件);
		设置比赛时间(3600);
		全局.AD = 0;
		禁用 创建HUD文本(所有玩家(所有队伍), 无, 字符串("尝试"), 无, 顶部, 0, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		全局.A[1] = 矢量(99, -99, 99);
		全局.A[3] = 矢量(99, -99, 99);
		全局.A[2] = 矢量(99, -99, 99);
		全局.A[4] = 矢量(99, -99, 99);
		全局.A[5] = 矢量(99, -99, 99);
		全局.A[6] = 矢量(99, -99, 99);
		创建光束效果(所有玩家(所有队伍), 有害光束, 全局.A[1], 全局.A[2], 颜色(紫色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 有害光束, 全局.A[3], 全局.A[4], 颜色(紫色), 可见，位置和半径);
		创建效果(所有玩家(所有队伍), 能量声音, 颜色(白色), 全局.A[5], 100, 可见，位置和半径);
		创建效果(所有玩家(所有队伍), 有害光环, 颜色(紫色), 全局.A[6], 2, 可见，位置和半径);
		全局.K = 假;
	}
}

规则("intro *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.I == 真;
	}

	动作
	{
		设置状态(事件玩家, 无, 定身, 99);
		等待(0.200, 无视条件);
		开始镜头(事件玩家, 矢量(231.541, 23.264, 67.987), 矢量(231.151, 23.258, 67.987), 0);
		等待(2, 无视条件);
		开始镜头(事件玩家, 矢量(231.541, 23.264, 67.987), 矢量(231.151, 23.258, 67.987), 0);
		等待(1, 无视条件);
		开始镜头(事件玩家, 矢量(231.529, 23.264, 59.977), 矢量(230.329, 23.243, 59.979), 0);
		等待(1.500, 无视条件);
		开始镜头(事件玩家, 矢量(90.437, -0.645, -154.452), 矢量(180.944, 0.520, 51.593), 0);
		等待(0.200, 无视条件);
		开始镜头(事件玩家, 矢量(180.944, 0.520, 51.593), 矢量(201.612, 27.910, 88.312), 0.700);
		等待(1, 无视条件);
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("欢迎"), 字符串("{0}！", 事件玩家)));
		等待(1, 无视条件);
		开始镜头(事件玩家, 矢量(175.601, -0.504, 45.596), 矢量(201.612, 27.910, 88.312), 0.700);
		等待(7, 无视条件);
		停止镜头(事件玩家);
		开始镜头(事件玩家, 矢量(206.534, 4.653, 88.592), 矢量(206.540, 0.686, 89.244), 0);
		等待(0.250, 无视条件);
		开始镜头(事件玩家, 矢量(206.538, 3.449, 88.790), 矢量(206.545, 2.856, 88.880), 0.600);
		等待(1, 无视条件);
		小字体信息(事件玩家, 字符串("{0} {1}", 自定义字符串("Beware of the Monster"), 图标字符串(骷髅)));
		传送(事件玩家, 矢量(179.965, 2.058, 52.627));
		等待(4, 无视条件);
		事件玩家.I = 假;
		设置朝向(事件玩家, 矢量(0.850, 0.520, 0.010), 至地图);
		停止镜头(事件玩家);
		事件玩家.T = 真;
		清除状态(事件玩家, 定身);
		事件玩家.M = 真;
	}
}

规则("outro *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.Z == 1;
	}

	动作
	{
		事件玩家.Z = 2;
		事件玩家.W = 真;
		消除效果(事件玩家.E[5]);
		消除效果(事件玩家.E[6]);
		设置状态(事件玩家, 无, 定身, 9999);
		全局.W = 真;
		传送(此位置的玩家(11, 所有队伍), 矢量(222.662, 36.350, 62.986));
		取消与环境的移动碰撞(此位置的玩家(11, 所有队伍), 假);
		停止限制阈值(此位置的玩家(11, 所有队伍));
		停止定向阈值(此位置的玩家(11, 所有队伍));
		设置引力(此位置的玩家(11, 所有队伍), 100);
		
		If(所用英雄(此位置的玩家(11, 所有队伍)) != 英雄(死神));
			开始强制玩家选择英雄(此位置的玩家(11, 所有队伍), 英雄(死神));
		End;
		全局.E = 2;
		传送(事件玩家, 矢量(169.998, 6.550, 80.797));
		设置朝向(事件玩家, 矢量(1, 0, 0), 至地图);
		开始镜头(事件玩家, 矢量(176.246, 10.769, 79.886), 矢量(177.798, 10.386, 80.895), 0);
		等待(1.500, 无视条件);
		全局.K = 假;
		设置引力(此位置的玩家(11, 所有队伍), 0);
		等待(1, 无视条件);
		取消与环境的移动碰撞(此位置的玩家(11, 所有队伍), 真);
		传送(此位置的玩家(11, 所有队伍), 矢量(180.600, 8, 80.954));
		设置朝向(此位置的玩家(11, 所有队伍), 矢量(-1, 0, 0.020), 至地图);
		开始定向阈值(此位置的玩家(11, 所有队伍), 矢量(-1, 0, 0.020), 0.080, 至地图, 替换现有阈值, 方向和幅度);
		等待(5, 无视条件);
		开始镜头(事件玩家, 矢量(168.914, 5.085, 79.676), 矢量(171.100, 6.268, 81.610), 0);
		设置状态(事件玩家, 无, 击倒, 9999);
		清除状态(事件玩家, 无敌);
		设置状态(事件玩家, 无, 无法杀死, 9999);
		设置玩家生命值(事件玩家, 40);
		开始持续伤害(事件玩家, 无, 15, 1);
		等待(4, 无视条件);
		开始镜头(事件玩家, 矢量(178.441, 9.715, 80.945), 矢量(170.312, 9.152, 81.038), 0);
		等待(5, 无视条件);
		设置终极技能充能(此位置的玩家(11, 所有队伍), 100);
		按下按键(此位置的玩家(11, 所有队伍), 按钮(终极技能));
		等待(4, 无视条件);
		开始镜头(事件玩家, 矢量(169.548, 5.800, 80.516), 矢量(169.387, 5.101, 80.734), 0);
		等待(0.250, 无视条件);
		交流(事件玩家, 不行);
		等待(1, 无视条件);
		开始镜头(事件玩家, 矢量(177.507, 12.618, 81.047), 矢量(165.078, 8.240, 80.994), 0);
		等待(0.250, 无视条件);
		清除状态(事件玩家, 击倒);
		交流(事件玩家, 正在进攻);
		等待(1, 无视条件);
		开始镜头(事件玩家, 矢量(170.983, 13.732, 85.788), 矢量(169.747, 12.080, 84.818), 0);
		等待(0.250, 无视条件);
		全局.A[1] = 矢量(169.160, 12.629, 85.365);
		全局.A[2] = 此位置的玩家(11, 所有队伍);
		全局.A[5] = 矢量(172.043, 10.704, 80.899);
		全局.A[6] = 此位置的玩家(11, 所有队伍);
		播放效果(所有玩家(所有队伍), 环状爆炸声音, 颜色(白色), 全局.A[1], 100);
		等待(0.500, 无视条件);
		开始镜头(事件玩家, 矢量(170.753, 14.313, 76.723), 矢量(169.897, 13.047, 76.794), 0);
		等待(0.250, 无视条件);
		全局.A[3] = 矢量(169.140, 12.676, 76.609);
		全局.A[4] = 此位置的玩家(11, 所有队伍);
		播放效果(所有玩家(所有队伍), 环状爆炸声音, 颜色(白色), 全局.A[3], 100);
		等待(0.500, 无视条件);
		开始镜头(事件玩家, 矢量(177.507, 12.618, 81.047), 矢量(165.078, 8.240, 80.994), 0);
		设置状态(此位置的玩家(11, 所有队伍), 无, 点燃, 6);
		追踪全局变量频率(E, 0.100, 0.400, 速率及最终值);
		If(所用英雄(事件玩家) == 英雄(禅雅塔));
			设置终极技能充能(事件玩家, 100);
			等待(0.250, 无视条件);
			按下按键(事件玩家, 按钮(终极技能));
			开始朝向(事件玩家, 矢量(-0.710, 0, 0.710), 300, 至玩家, 方向及角速率);
		Else;
			等待(0.250, 无视条件);
			交流(事件玩家, 表情（上）);
		End;
		创建效果(所有玩家(所有队伍), 火花, 颜色(紫色), 事件玩家, 1.500, 可见，位置和半径);
		事件玩家.E[3] = 最后创建的实体;
		创建效果(所有玩家(所有队伍), 火花, 颜色(橙色), 事件玩家, 1.500, 可见，位置和半径);
		事件玩家.E[4] = 最后创建的实体;
		大字体信息(所有玩家(所有队伍), 字符串("{0} {1} {2}", 英雄图标字符串(所用英雄(事件玩家)), 事件玩家, 字符串("{0}！", 字符串("胜者"))));
		等待(0.250, 无视条件);
		停止镜头(事件玩家);
		开始镜头(事件玩家, 矢量(177.507, 12.618, 81.047), 矢量(165.078, 8.240, 80.994), 0);
		设置慢动作(40);
		治疗(事件玩家, 无, 1000);
		等待(1, 无视条件);
		开始镜头(事件玩家, 矢量(171.002, 5.060, 83.697), 矢量(169.533, 6.716, 81.628), 0);
		等待(2, 无视条件);
		开始镜头(事件玩家, 矢量(166.144, 13.395, 76.462), 矢量(168.176, 10.656, 78.702), 0);
		等待(1, 无视条件);
		播放效果(所有玩家(所有队伍), 环状爆炸, 颜色(紫色), 此位置的玩家(11, 所有队伍), 3);
		等待(1, 无视条件);
		设置慢动作(100);
		传送(此位置的玩家(11, 所有队伍), 矢量(191.272, 145.272, 87.119));
		停止追踪全局变量(E);
		全局.E = 2;
		停止朝向(事件玩家);
		全局.A[1] = 矢量(99, -99, 99);
		全局.A[3] = 矢量(99, -99, 99);
		全局.A[2] = 矢量(99, -99, 99);
		全局.A[4] = 矢量(99, -99, 99);
		全局.A[5] = 矢量(99, -99, 99);
		播放效果(所有玩家(所有队伍), 环状爆炸声音, 颜色(白色), 矢量(169.940, 6.608, 80.797), 50);
		开始镜头(事件玩家, 矢量(178.571, 18.139, 74.430), 矢量(169.872, 7.874, 80.375), 0);
		交流(事件玩家, 再见);
		等待(2, 无视条件);
		全局.A[6] = 矢量(99, -99, 99);
		停止镜头(事件玩家);
		全局.W = 假;
		清除状态(事件玩家, 定身);
		等待(10, 无视条件);
		清除状态(事件玩家, 无法杀死);
		设置状态(事件玩家, 无, 无敌, 9999);
		播放效果(事件玩家, 状态爆炸声音, 颜色(白色), 事件玩家, 10);
		消除HUD文本(事件玩家.AA);
		等待(0.250, 无视条件);
		创建HUD文本(事件玩家, 图标字符串(对号), 自定义字符串("Try other maps!"), 自定义字符串("bit.do/whereisit "), 顶部, 1, 颜色(灰绿色), 颜色(白色), 颜色(灰绿色), 字符串, 默认可见度);
		事件玩家.AA = 上一个文本ID;
		等待(90, 无视条件);
		事件玩家.W = 假;
		事件玩家.Z = 0;
		消除效果(事件玩家.E[3]);
		消除效果(事件玩家.E[4]);
		
		小字体信息(事件玩家, 字符串("{0} {1}", 事件玩家, 字符串("不可见")));
	}
}

规则("player spawn *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
		是否是机器人(事件玩家) == 假;
	}

	动作
	{
		隐藏游戏模式HUD(事件玩家);
		
		隐藏英雄HUD(事件玩家);
		开始强制设置玩家轮廓(事件玩家, 所有玩家(所有队伍), 真, 颜色(紫色), 默认);
		事件玩家.F = 0;
		传送(事件玩家, 矢量(231.979, 3.550, 93.635));
		设置启用技能 1(事件玩家, 假);
		设置启用技能 2(事件玩家, 假);
		事件玩家.I = 真;
		事件玩家.G = 5;
		事件玩家.N = 1;
		事件玩家.U = 假;
		事件玩家.V = 假;
		事件玩家.R = 假;
		事件玩家.W = 假;
		事件玩家.O = 假;
		事件玩家.Z = 0;
		事件玩家.X = 假;
		事件玩家.L = 假;
		根据条件跳过(全局.R[2] >= 3, 2);
		全局.R[2] += 1;
		全局.R[1] = 真;
		创建效果(事件玩家, 有益光环, 颜色(橙色), 全局.D[事件玩家.F], 2, 可见，位置和半径);
		事件玩家.E[5] = 最后创建的实体;
		创建效果(事件玩家, 火花, 颜色(橙色), 全局.D[事件玩家.F], 3, 可见，位置和半径);
		事件玩家.E[6] = 最后创建的实体;
		创建HUD文本(事件玩家, 字符串("{0} {1}", 图标字符串(方块), 事件玩家.N), 无, 无, 左边, 1, 颜色(橙色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		事件玩家.E[7] = 最后创建的实体;
		创建HUD文本(事件玩家, 无, 无, 字符串("对象"), 左边, 0, 颜色(白色), 颜色(白色), 颜色(橙色), 可见和字符串, 默认可见度);
		事件玩家.E[8] = 最后创建的实体;
		设置状态(事件玩家, 无, 无敌, 9999);
		事件玩家.S = 150;
		根据条件跳过(全局.L[1] != 无, 2);
		全局.L[1] = 事件玩家;
		中止;
		根据条件跳过(全局.L[2] != 无, 2);
		全局.L[2] = 事件玩家;
		中止;
		根据条件跳过(全局.L[3] != 无, 2);
		全局.L[3] = 事件玩家;
		中止;
	}
}

规则("infinite match time")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		比赛时间 <= 1800;
		比赛时间 > 10;
		游戏正在进行中 == 真;
	}

	动作
	{
		设置比赛时间(3600);
	}
}

规则("player pressed \"F\" key on the empty place")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		相距距离(事件玩家, 全局.D[事件玩家.F]) > 5;
		相距距离(事件玩家, 全局.D[事件玩家.F + 1]) > 5;
		事件玩家.I == 假;
		事件玩家.T == 假;
		具有状态(事件玩家, 冻结) == 假;
		事件玩家.F < 全局.O;
		全局.K == 假;
		事件玩家.X == 假;
	}

	动作
	{
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("否"), 字符串("物品")));
		播放效果(事件玩家, 负面状态施加声音, 颜色(白色), 事件玩家, 30);
		设置状态(事件玩家, 无, 冻结, 1);
		修改玩家分数(事件玩家, -1);
	}
}

规则("player found item")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		相距距离(事件玩家, 全局.D[事件玩家.F + 1]) <= 5;
		具有状态(事件玩家, 冻结) == 假;
		事件玩家.F < 全局.O;
		全局.K == 假;
		事件玩家.X == 假;
	}

	动作
	{
		小字体信息(事件玩家, 字符串("{0}！", 字符串("好")));
		播放效果(事件玩家, 环状爆炸, 颜色(橙色), 全局.D[事件玩家.F + 1], 5);
		播放效果(事件玩家, 环状爆炸, 颜色(橙色), 全局.D[事件玩家.F + 1], 7);
		播放效果(事件玩家, 正面状态施加声音, 颜色(白色), 事件玩家, 50);
		事件玩家.F += 1;
		事件玩家.K = 3;
		事件玩家.U = 真;
		事件玩家.G = 10;
		根据条件跳过(事件玩家.F == 全局.J[10], 11);
		根据条件跳过(事件玩家.F == 全局.J[9], 10);
		根据条件跳过(事件玩家.F == 全局.J[8], 9);
		根据条件跳过(事件玩家.F == 全局.J[7], 8);
		根据条件跳过(事件玩家.F == 全局.J[6], 7);
		根据条件跳过(事件玩家.F == 全局.J[5], 6);
		根据条件跳过(事件玩家.F == 全局.J[4], 5);
		根据条件跳过(事件玩家.F == 全局.J[3], 4);
		根据条件跳过(事件玩家.F == 全局.J[2], 3);
		根据条件跳过(事件玩家.F == 全局.J[1], 2);
		事件玩家.U = 假;
		事件玩家.T = 真;
		等待(1, 无视条件);
		播放效果(事件玩家, 正面状态施加声音, 颜色(白色), 事件玩家, 50);
		大字体信息(事件玩家, 字符串("{0} / {1}", 事件玩家.F, 全局.O));
		根据条件跳过(事件玩家.F != 2, 1);
		事件玩家.R = 真;
		根据条件跳过(事件玩家.F < 全局.O, 1);
		事件玩家.N = 事件玩家.F;
		根据条件跳过(事件玩家.F == 全局.O, 1);
		事件玩家.N = 事件玩家.F + 1;
	}
}

规则("shift key is pressed (acceleration)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(技能1)) == 真;
	}

	动作
	{
		设置移动速度(事件玩家, 事件玩家.S);
	}
}

规则("shift key is not pressed (slowdown)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(技能1)) == 假;
	}

	动作
	{
		设置移动速度(事件玩家, 110);
	}
}

规则("spacebar is pressed (fly)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(跳跃)) == 真;
		事件玩家.F >= 全局.Y;
		全局.W == 假;
	}

	动作
	{
		设置引力(事件玩家, 0);
	}
}

规则("spacebar is not pressed (gravity)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(跳跃)) == 假;
		事件玩家.F >= 全局.Y;
	}

	动作
	{
		设置引力(事件玩家, 100);
	}
}

规则("right click shows picture")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(辅助攻击模式)) == 真;
		事件玩家.I == 假;
		事件玩家.Z == 0;
		事件玩家.X == 假;
	}

	动作
	{
		根据条件跳过(事件玩家.F < 全局.O, 1);
		事件玩家.N = 事件玩家.F;
		根据条件跳过(事件玩家.F == 全局.O, 1);
		事件玩家.N = 事件玩家.F + 1;
		开始镜头(事件玩家, 全局.C[事件玩家.N], 全局.D[事件玩家.N], 0);
		事件玩家.T = 假;
		根据条件跳过(事件玩家.U == 假, 1);
		事件玩家.O = 真;
		根据条件跳过(事件玩家.G > 0, 3);
		根据条件跳过(相距距离(所选位置(事件玩家), 全局.D[事件玩家.F + 1]) < 50, 1);
		小字体信息(事件玩家, 字符串("{0} {1} {2}", 字符串("对象"), 字符串("远"), 图标字符串(停止)));
		事件玩家.G = 1;
	}
}

规则("right mouse button is not pressed")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(辅助攻击模式)) == 假;
		事件玩家.I == 假;
		事件玩家.Z == 0;
		事件玩家.X == 假;
	}

	动作
	{
		停止镜头(事件玩家);
		清除状态(事件玩家, 定身);
		根据条件跳过(事件玩家.U == 假, 1);
		事件玩家.O = 真;
		根据条件跳过(事件玩家.F < 全局.O, 1);
		事件玩家.N = 事件玩家.F;
		根据条件跳过(事件玩家.F == 全局.O, 1);
		事件玩家.N = 事件玩家.F + 1;
	}
}

规则("left mouse button shows previous objects")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(主要攻击模式)) == 真;
		按钮被按下(事件玩家, 按钮(辅助攻击模式)) == 真;
		事件玩家.I == 假;
		事件玩家.X == 假;
		事件玩家.Z == 0;
	}

	动作
	{
		事件玩家.N -= 1;
		根据条件跳过(事件玩家.N > 0, 4);
		根据条件跳过(事件玩家.F == 全局.O, 1);
		事件玩家.N = 事件玩家.F + 1;
		根据条件跳过(事件玩家.F != 全局.O, 1);
		事件玩家.N = 事件玩家.F;
	}
}

规则("player found all objects (victory!)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.F == 全局.O;
	}

	动作
	{
		停止定向阈值(事件玩家);
		设置引力(事件玩家, 100);
		停止按下按钮(事件玩家, 按钮(跳跃));
		事件玩家.Z = 5;
		设置状态(事件玩家, 无, 定身, 9999);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 30);
		播放效果(事件玩家, 环状爆炸, 颜色(紫色), 全局.D[事件玩家.F], 6);
		播放效果(事件玩家, 有益爆炸, 颜色(橙色), 全局.D[事件玩家.F], 10);
		播放效果(事件玩家, 有益选择效果 , 颜色(橙色), 全局.D[事件玩家.F], 10);
		全局.K = 真;
		等待(3, 无视条件);
		事件玩家.Z = 1;
	}
}

规则("everyone is watching the winner *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.W == 假;
		事件玩家.Z == 0;
		全局.W == 真;
		事件玩家.F >= 2;
	}

	动作
	{
		设置状态(事件玩家, 无, 定身, 9999);
		事件玩家.X = 真;
		开始镜头(事件玩家, 矢量(176.246, 10.769, 79.886), 矢量(177.798, 10.386, 80.895), 0);
		等待(2.500, 无视条件);
		全局.K = 假;
		等待(5, 无视条件);
		开始镜头(事件玩家, 矢量(168.914, 5.085, 79.676), 矢量(171.100, 6.268, 81.610), 0);
		等待(4, 无视条件);
		开始镜头(事件玩家, 矢量(178.441, 9.715, 80.945), 矢量(170.312, 9.152, 81.038), 0);
		等待(5, 无视条件);
		等待(4, 无视条件);
		开始镜头(事件玩家, 矢量(169.548, 5.800, 80.516), 矢量(169.387, 5.101, 80.734), 0);
		等待(0.250, 无视条件);
		等待(1, 无视条件);
		开始镜头(事件玩家, 矢量(177.507, 12.618, 81.047), 矢量(165.078, 8.240, 80.994), 0);
		等待(0.250, 无视条件);
		等待(1, 无视条件);
		开始镜头(事件玩家, 矢量(170.983, 13.732, 85.788), 矢量(169.747, 12.080, 84.818), 0);
		等待(0.250, 无视条件);
		等待(0.500, 无视条件);
		开始镜头(事件玩家, 矢量(170.753, 14.313, 76.723), 矢量(169.897, 13.047, 76.794), 0);
		等待(0.250, 无视条件);
		等待(0.500, 无视条件);
		开始镜头(事件玩家, 矢量(177.507, 12.618, 81.047), 矢量(165.078, 8.240, 80.994), 0);
		等待(0.250, 无视条件);
		等待(0.250, 无视条件);
		等待(1, 无视条件);
		开始镜头(事件玩家, 矢量(171.002, 5.060, 83.697), 矢量(169.533, 6.716, 81.628), 0);
		等待(2, 无视条件);
		开始镜头(事件玩家, 矢量(166.144, 13.395, 76.462), 矢量(168.176, 10.656, 78.702), 0);
		等待(2, 无视条件);
		开始镜头(事件玩家, 矢量(178.571, 18.139, 74.430), 矢量(169.872, 7.874, 80.375), 0);
		等待(2, 无视条件);
		停止镜头(事件玩家);
		清除状态(事件玩家, 定身);
		全局.W = 假;
		停止镜头(事件玩家);
		事件玩家.X = 假;
	}
}

规则("automatically show next object")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.T == 真;
		事件玩家.U == 假;
	}

	动作
	{
		等待(3, 无视条件);
		如条件为“假”则中止;
		事件玩家.Q = 真;
		设置状态(事件玩家, 无, 定身, 5);
		开始镜头(事件玩家, 全局.C[事件玩家.F + 1], 全局.D[事件玩家.F + 1], 0);
		根据条件跳过(事件玩家.F != 0, 1);
		大字体信息(事件玩家, 字符串("{0} {1}", 字符串("寻找"), 字符串("对象")));
		根据条件跳过(事件玩家.F == 0, 1);
		大字体信息(事件玩家, 字符串("{0} {1}", 字符串("寻找"), 字符串("下一批对象")));
		等待(5, 无视条件);
		事件玩家.T = 假;
		停止镜头(事件玩家);
		事件玩家.Q = 假;
	}
}

规则("cancel auto preview")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.T == 真;
		事件玩家.Q == 真;
		事件玩家.Z == 0;
		事件玩家.X == 假;
	}

	动作
	{
		根据条件跳过(按钮被按下(事件玩家, 按钮(主要攻击模式)) != 真, 4);
		事件玩家.T = 假;
		清除状态(事件玩家, 定身);
		停止镜头(事件玩家);
		事件玩家.Q = 假;
		根据条件跳过(按钮被按下(事件玩家, 按钮(辅助攻击模式)) != 真, 4);
		事件玩家.T = 假;
		清除状态(事件玩家, 定身);
		停止镜头(事件玩家);
		事件玩家.Q = 假;
		根据条件跳过(按钮被按下(事件玩家, 按钮(跳跃)) != 真, 4);
		事件玩家.T = 假;
		清除状态(事件玩家, 定身);
		停止镜头(事件玩家);
		事件玩家.Q = 假;
		根据条件跳过(按钮被按下(事件玩家, 按钮(终极技能)) != 真, 4);
		事件玩家.T = 假;
		清除状态(事件玩家, 定身);
		停止镜头(事件玩家);
		事件玩家.Q = 假;
		根据条件跳过(按钮被按下(事件玩家, 按钮(技能2)) != 真, 4);
		事件玩家.T = 假;
		清除状态(事件玩家, 定身);
		停止镜头(事件玩家);
		事件玩家.Q = 假;
	}
}

规则("hint near the first object *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		相距距离(事件玩家, 全局.D[1]) <= 5;
		事件玩家.F == 0;
	}

	动作
	{
		小字体信息(事件玩家, 字符串("{0} {1} {2}", 字符串("互动"), 字符串("{0}！", 字符串("此处")), 字符串("({0})", 输入绑定字符串(按钮(互动)))));
	}
}

规则("message about right button")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.M == 真;
	}

	动作
	{
		等待(9, 无视条件);
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("{0} - {1}", 输入绑定字符串(按钮(辅助攻击模式)), 字符串("当前目标")), 图标字符串(眼睛)));
		事件玩家.M = 假;
	}
}

规则("message about running")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.R == 真;
	}

	动作
	{
		等待(8, 无视条件);
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("{0} - {1}", 自定义字符串("[Shift]"), 字符串("运行")), 图标字符串(箭矢)));
		事件玩家.R = 假;
	}
}

规则("message about flying")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.F == 全局.Y;
	}

	动作
	{
		等待(8, 无视条件);
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("{0} - {1}", 字符串("跳跃"), 字符串("飞行")), 图标字符串(光晕)));
		等待(30, 无视条件);
		如条件为“假”则中止;
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("{0} - {1}", 字符串("跳跃"), 字符串("飞行")), 图标字符串(光晕)));
		等待(30, 无视条件);
		如条件为“假”则中止;
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("{0} - {1}", 字符串("跳跃"), 字符串("飞行")), 图标字符串(光晕)));
		等待(30, 无视条件);
		如条件为“假”则中止;
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("{0} - {1}", 字符串("跳跃"), 字符串("飞行")), 图标字符串(光晕)));
		等待(30, 无视条件);
		如条件为“假”则中止;
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("{0} - {1}", 字符串("跳跃"), 字符串("飞行")), 图标字符串(光晕)));
	}
}

规则("player left game")
{
	事件
	{
		玩家离开比赛;
		双方;
		全部;
	}

	动作
	{
		全局.K = 假;
		消除效果(事件玩家.E[1]);
		消除效果(事件玩家.E[2]);
		消除效果(事件玩家.E[3]);
		消除效果(事件玩家.E[4]);
		消除效果(事件玩家.E[5]);
		消除效果(事件玩家.E[6]);
		消除效果(事件玩家.E[7]);
		消除效果(事件玩家.E[8]);
		根据条件跳过(全局.L[1] != 事件玩家, 1);
		所有玩家(所有队伍).K = 3;
		根据条件跳过(全局.L[2] != 事件玩家, 1);
		所有玩家(所有队伍).K = 3;
		根据条件跳过(全局.L[3] != 事件玩家, 1);
		所有玩家(所有队伍).K = 3;
		设置慢动作(100);
		消除HUD文本(事件玩家.AA);
	}
}

规则("speed upgrade")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.U == 真;
		事件玩家.F != 全局.Y;
		事件玩家.F != 全局.O;
	}

	动作
	{
		播放效果(事件玩家, 环状爆炸, 颜色(天蓝色), 全局.D[事件玩家.F], 6);
		创建光束效果(事件玩家, 有益光束, 全局.D[事件玩家.F], 事件玩家, 颜色(天蓝色), 可见，位置和半径);
		事件玩家.E[1] = 最后创建的实体;
		创建效果(事件玩家, 能量声音, 颜色(白色), 事件玩家, 30, 可见，位置和半径);
		事件玩家.E[2] = 最后创建的实体;
		根据条件跳过(事件玩家.S > 200, 1);
		事件玩家.S += 全局.V;
		等待(1, 无视条件);
		消除效果(事件玩家.E[1]);
		消除效果(事件玩家.E[2]);
		小字体信息(事件玩家, 字符串("{0} {1}", 图标字符串(箭头：向上), 字符串("{0}！", 字符串("等级提升"))));
		大字体信息(事件玩家, 字符串("{0} {1} {2}", 字符串("速度"), 字符串("{0}！", 字符串("升级")), 图标字符串(箭矢)));
		等待(1, 无视条件);
		事件玩家.U = 假;
		根据条件跳过(事件玩家.O == 真, 1);
		事件玩家.T = 真;
		根据条件跳过(事件玩家.O == 假, 1);
		事件玩家.O = 假;
		事件玩家.R = 真;
	}
}

规则("flying upgrade")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.U == 真;
		事件玩家.F == 全局.Y;
	}

	动作
	{
		播放效果(事件玩家, 环状爆炸, 颜色(紫色), 全局.D[事件玩家.F], 7);
		创建光束效果(事件玩家, 有益光束, 全局.D[事件玩家.F], 事件玩家, 颜色(橙色), 可见，位置和半径);
		事件玩家.E[1] = 最后创建的实体;
		创建效果(事件玩家, 能量声音, 颜色(白色), 事件玩家, 30, 可见，位置和半径);
		事件玩家.E[2] = 最后创建的实体;
		事件玩家.Y = 真;
		等待(1, 无视条件);
		消除效果(事件玩家.E[1]);
		消除效果(事件玩家.E[2]);
		小字体信息(事件玩家, 字符串("{0} {1}", 图标字符串(箭头：向上), 字符串("{0}！", 字符串("等级提升"))));
		大字体信息(事件玩家, 字符串("{0} {1} {2}", 字符串("飞行"), 字符串("{0}！", 字符串("升级")), 图标字符串(光晕)));
		等待(1, 无视条件);
		事件玩家.U = 假;
		根据条件跳过(事件玩家.O == 真, 1);
		事件玩家.T = 真;
		根据条件跳过(事件玩家.O == 假, 1);
		事件玩家.O = 假;
	}
}

规则("rating")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		全局.R[1] == 真;
	}

	动作
	{
		根据条件跳过(全局.R[2] < 1, 4);
		根据条件跳过(全局.R[3] >= 1, 3);
		创建HUD文本(所有玩家(所有队伍), 无, 无, 字符串("{0} {1}", 字符串("最佳"), 字符串("{0}:", 字符串("玩家"))), 右边, 0, 颜色(白色), 颜色(白色), 颜色(橙色), 可见和字符串, 默认可见度);
		创建HUD文本(所有玩家(所有队伍), 无, 无, 字符串("{0} {1} {2}", 英雄图标字符串(所用英雄(全局.L[1])), 全局.L[1], 字符串("{0} / {1}", 全局.L[1].F, 全局.O)), 右边, 1, 颜色(白色),
			颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		全局.R[3] = 1;
		根据条件跳过(全局.R[2] < 2, 3);
		根据条件跳过(全局.R[3] >= 2, 2);
		创建HUD文本(所有玩家(所有队伍), 无, 无, 字符串("{0} {1} {2}", 英雄图标字符串(所用英雄(全局.L[2])), 全局.L[2], 字符串("{0} / {1}", 全局.L[2].F, 全局.O)), 右边, 2, 颜色(白色),
			颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		全局.R[3] = 2;
		根据条件跳过(全局.R[2] != 3, 3);
		根据条件跳过(全局.R[3] == 3, 2);
		创建HUD文本(所有玩家(所有队伍), 无, 无, 字符串("{0} {1} {2}", 英雄图标字符串(所用英雄(全局.L[3])), 全局.L[3], 字符串("{0} / {1}", 全局.L[3].F, 全局.O)), 右边, 3, 颜色(白色),
			颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		全局.R[3] = 3;
		等待(1, 无视条件);
		根据条件循环(全局.R[2] > 全局.R[3]);
		全局.R[1] = 假;
	}
}

规则("rating update")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.K > 0;
	}

	动作
	{
		根据条件跳过(全局.L[1] != 事件玩家, 2);
		事件玩家.K = 0;
		中止;
		根据条件跳过(全局.L[2] != 事件玩家, 5);
		根据条件跳过(事件玩家.F <= 全局.L[1].F, 4);
		全局.L[2] = 全局.L[1];
		全局.L[1] = 事件玩家;
		事件玩家.K = 0;
		中止;
		根据条件跳过(全局.L[3] != 事件玩家, 3);
		根据条件跳过(事件玩家.F <= 全局.L[2].F, 2);
		全局.L[3] = 全局.L[2];
		全局.L[2] = 事件玩家;
		根据条件跳过(全局.L[1] == 事件玩家, 4);
		根据条件跳过(全局.L[2] == 事件玩家, 3);
		根据条件跳过(全局.L[3] == 事件玩家, 2);
		根据条件跳过(事件玩家.F <= 全局.L[3].F, 1);
		全局.L[3] = 事件玩家;
		等待(0.050, 无视条件);
		事件玩家.K -= 1;
		如条件为”真“则循环;
	}
}

规则("search time")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.W == 假;
		事件玩家.G > 0;
	}

	动作
	{
		等待(30, 无视条件);
		事件玩家.G -= 1;
		如条件为”真“则循环;
	}
}

规则("message about previous objects")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.F >= 10;
	}

	动作
	{
		等待(25, 无视条件);
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("{0} = {1}", 字符串("{0} + {1}", 输入绑定字符串(按钮(辅助攻击模式)), 输入绑定字符串(按钮(主要攻击模式))), 字符串("对象")), 图标字符串(回收)));
	}
}

规则("graphic settings warning 1 *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.F == 全局.AA;
	}

	动作
	{
		等待(3, 无视条件);
		如条件为“假”则中止;
		消除HUD文本(事件玩家.AA);
		等待(0.250, 无视条件);
		创建HUD文本(事件玩家, 图标字符串(眼睛), 自定义字符串("Set medium or higher model detail settings to see all objects"), 自定义字符串(
			"Options > Video > Graphics quality > Advanced > Model Detail"), 顶部, 1, 颜色(橙色), 颜色(白色), 颜色(橙色), 字符串, 默认可见度);
		事件玩家.AA = 上一个文本ID;
	}
}

规则("graphic settings warning 2 *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.F == 全局.AA + 1;
	}

	动作
	{
		消除HUD文本(事件玩家.AA);
	}
}

规则("bug camera *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(装填)) == 真;
		事件玩家.I == 假;
		全局.W == 假;
	}

	动作
	{
		If(事件玩家.P == 真);
			停止镜头(事件玩家);
			事件玩家.P = 假;
		Else;
			开始镜头(事件玩家, 矢量(193.450, 5.318, 96.766), 矢量(193.506, 6.627, 97.667), 0);
			事件玩家.P = 真;
		End;
	}
}

规则("Reaper 1")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		生成机器人(英雄(死神), 所有队伍, 11, 矢量(206.644, 2.263, 78.606), 矢量(0, 0, 0));
		等待(3, 无视条件);
		设置玩家分数(此位置的玩家(11, 所有队伍), -999);
	}
}

规则("Reaper 2")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		位置 11;
	}

	条件
	{
		已重生(事件玩家) == 真;
		是否是机器人(事件玩家) == 真;
	}

	动作
	{
		开始修改英雄语音(事件玩家, 0.500, 真);
		等待(2, 无视条件);
		设置引力(事件玩家, 0);
		取消与环境的移动碰撞(事件玩家, 真);
		开始强制设置玩家轮廓(此位置的玩家(11, 所有队伍), 所有玩家(所有队伍), 假, 颜色(白色), 默认);
		开始调整玩家大小(此位置的玩家(11, 所有队伍), 全局.E, 真);
		设置造成伤害(事件玩家, 1);
	}
}

规则("Reaper 3")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		位置 11;
	}

	条件
	{
		已重生(事件玩家) == 真;
		是否是机器人(事件玩家) == 真;
	}

	动作
	{
		等待(4, 无视条件);
		If(全局.W == 假);
			停止定向阈值(事件玩家);
			全局.S = 随机整数(1, 23);
			If(全局.S >= 1);
				If(全局.S <= 9);
					全局.G = 矢量(随机实数(0, 1), 0, 随机实数(0, 1));
					If(全局.S == 1);
						传送(事件玩家, 矢量(194.803, 2.459, 85.927));
					Else If(全局.S == 2);
						传送(事件玩家, 矢量(206.266, 9.410, 87.467));
					Else If(全局.S == 3);
						传送(事件玩家, 矢量(178.596, 9.191, 80.984));
					Else If(全局.S == 4);
						传送(事件玩家, 矢量(217.396, 10.182, 65.560));
					Else If(全局.S == 5);
						传送(事件玩家, 矢量(224.943, 4.323, 96.654));
					Else If(全局.S == 6);
						传送(事件玩家, 矢量(197.998, 2.355, 70.063));
					Else If(全局.S == 7);
						传送(事件玩家, 矢量(186.257, 11.586, 96.423));
					Else If(全局.S == 8);
						传送(事件玩家, 矢量(200.160, 3.467, 78.025));
					Else If(全局.S == 9);
						传送(事件玩家, 矢量(212.294, 3.687, 78.032));
					End;
				End;
			End;
			If(全局.S >= 10);
				If(全局.S <= 12);
					全局.G = 矢量(1, 0, 0);
					If(全局.S == 10);
						传送(事件玩家, 矢量(212.108, 3.778, 90.818));
					Else If(全局.S == 11);
						传送(事件玩家, 矢量(172.509, 10.650, 101.987));
					Else If(全局.S == 12);
						传送(事件玩家, 矢量(177.190, 2.089, 83.131));
					End;
				End;
			End;
			If(全局.S >= 13);
				If(全局.S <= 15);
					全局.G = 矢量(0, 0, 1);
					If(全局.S == 13);
						传送(事件玩家, 矢量(221.182, 10.117, 58.047));
					Else If(全局.S == 14);
						传送(事件玩家, 矢量(206.209, 10.101, 86.495));
					Else If(全局.S == 15);
						传送(事件玩家, 矢量(216.523, 10.379, 70.628));
					End;
				End;
			End;
			If(全局.S >= 16);
				If(全局.S <= 19);
					全局.G = 矢量(-1, 0, 0);
					If(全局.S == 16);
						传送(事件玩家, 矢量(227.221, 3.167, 77.771));
					Else If(全局.S == 17);
						传送(事件玩家, 矢量(190.971, 8.464, 87.423));
					Else If(全局.S == 18);
						传送(事件玩家, 矢量(225.288, 10.103, 97.904));
					Else If(全局.S == 19);
						传送(事件玩家, 矢量(180.140, 9.160, 65.857));
					End;
				End;
			End;
			If(全局.S >= 20);
				If(全局.S <= 23);
					全局.G = 矢量(0, 0, -1);
					If(全局.S == 20);
						传送(事件玩家, 矢量(180.462, 12.430, 110.626));
					Else If(全局.S == 21);
						传送(事件玩家, 矢量(206.160, 10.553, 87.090));
					Else If(全局.S == 22);
						传送(事件玩家, 矢量(206.647, 1.187, 96.418));
					Else If(全局.S == 23);
						传送(事件玩家, 矢量(187.474, 2.622, 96.298));
					End;
				End;
			End;
			开始定向阈值(事件玩家, 全局.G, 0.200, 至地图, 替换现有阈值, 方向和幅度);
			设置朝向(事件玩家, 全局.G, 至地图);
			全局.A[1] = 矢量(99, -99, 99);
			全局.A[3] = 矢量(99, -99, 99);
			全局.A[2] = 矢量(99, -99, 99);
			全局.A[4] = 矢量(99, -99, 99);
			全局.A[5] = 矢量(99, -99, 99);
			全局.A[6] = 矢量(99, -99, 99);
		End;
		等待(20, 无视条件);
		If(全局.W == 假);
			播放效果(所有玩家(所有队伍), 有益选择效果 , 颜色(红色), 事件玩家, 2);
			等待(0.250, 无视条件);
			根据条件循环(全局.W == 真);
			传送(事件玩家, 矢量(222.662, 36.350, 62.986));
			取消与环境的移动碰撞(事件玩家, 假);
			停止限制阈值(事件玩家);
			停止定向阈值(事件玩家);
			设置引力(事件玩家, 100);
			等待(2, 无视条件);
			根据条件循环(全局.W == 真);
			设置引力(事件玩家, 0);
			等待(1, 无视条件);
			根据条件循环(全局.W == 真);
			取消与环境的移动碰撞(事件玩家, 真);
		Else;
			等待(60, 无视条件);
		End;
		循环;
	}
}

规则("Reaper 4")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		位置 11;
	}

	条件
	{
		已重生(事件玩家) == 真;
		是否是机器人(事件玩家) == 真;
	}

	动作
	{
		等待(随机实数(25, 40), 无视条件);
		If(全局.W == 假);
			全局.T = 随机整数(1, 5);
			If(全局.T == 1);
				交流(事件玩家, 问候);
			Else If(全局.T == 2);
				交流(事件玩家, 不行);
			Else If(全局.T == 3);
				交流(事件玩家, 再见);
			Else If(全局.T == 4);
				交流(事件玩家, 抱歉);
			Else If(全局.T == 5);
				交流(事件玩家, 好的);
			End;
		End;
		如条件为”真“则循环;
	}
}

规则("Reaper 5")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		是否是机器人(事件玩家) == 假;
		相距距离(事件玩家, 此位置的玩家(11, 所有队伍)) <= 10;
		在视线内(事件玩家, 眼睛位置(此位置的玩家(11, 所有队伍)), 屏障不会阻挡视线) == 真;
		在视野内(此位置的玩家(11, 所有队伍), 事件玩家, 45) == 真;
		正在移动(事件玩家) == 真;
		全局.W == 假;
		事件玩家.W == 假;
		事件玩家.I == 假;
		事件玩家.X == 假;
		事件玩家.F < 50;
	}

	动作
	{
		停止镜头(事件玩家);
		开始镜头(事件玩家, 眼睛位置(事件玩家), 眼睛位置(此位置的玩家(11, 所有队伍)), 1);
		开始朝向(此位置的玩家(11, 所有队伍), 方向(眼睛位置(此位置的玩家(11, 所有队伍)), 眼睛位置(事件玩家)), 200, 至地图, 方向及角速率);
		小字体信息(事件玩家, 字符串("{0} {1}", 自定义字符串("Don't move!"), 图标字符串(骷髅)));
		等待(1, 无视条件);
		If(正在移动(事件玩家) == 真);
			修改玩家分数(事件玩家, -1);
			击杀(事件玩家, 此位置的玩家(11, 所有队伍));
			
			播放效果(所有玩家(所有队伍), 爆炸声音, 颜色(白色), 此位置的玩家(11, 所有队伍), 20);
			交流(此位置的玩家(11, 所有队伍), 再见);
			停止朝向(此位置的玩家(11, 所有队伍));
			等待(2, 无视条件);
		Else;
			停止朝向(此位置的玩家(11, 所有队伍));
			等待(0.500, 无视条件);
			If(正在移动(事件玩家) == 真);
				修改玩家分数(事件玩家, -1);
				击杀(事件玩家, 此位置的玩家(11, 所有队伍));
				
				播放效果(所有玩家(所有队伍), 爆炸声音, 颜色(白色), 此位置的玩家(11, 所有队伍), 20);
				交流(此位置的玩家(11, 所有队伍), 再见);
				停止朝向(此位置的玩家(11, 所有队伍));
				等待(2, 无视条件);
			End;
		End;
		停止镜头(事件玩家);
	}
}

规则("Reaper 6")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		是否是机器人(事件玩家) == 假;
		相距距离(事件玩家, 此位置的玩家(11, 所有队伍)) <= 5;
		在视线内(事件玩家, 眼睛位置(此位置的玩家(11, 所有队伍)), 屏障不会阻挡视线) == 真;
		正在与人交流(事件玩家) == 真;
		全局.W == 假;
		事件玩家.W == 假;
		事件玩家.I == 假;
		事件玩家.X == 假;
		事件玩家.F < 50;
	}

	动作
	{
		根据条件中止(正在使用表情交流(事件玩家) == 真);
		等待(1, 无视条件);
		停止镜头(事件玩家);
		开始镜头(事件玩家, 眼睛位置(事件玩家), 眼睛位置(此位置的玩家(11, 所有队伍)), 1);
		开始朝向(此位置的玩家(11, 所有队伍), 方向(眼睛位置(此位置的玩家(11, 所有队伍)), 眼睛位置(事件玩家)), 200, 至地图, 方向及角速率);
		小字体信息(事件玩家, 字符串("{0} {1}", 自定义字符串("Shhhh!"), 图标字符串(骷髅)));
		等待(1, 无视条件);
		击杀(事件玩家, 此位置的玩家(11, 所有队伍));
		
		播放效果(所有玩家(所有队伍), 爆炸声音, 颜色(白色), 此位置的玩家(11, 所有队伍), 20);
		修改玩家分数(事件玩家, -1);
		交流(此位置的玩家(11, 所有队伍), 再见);
		停止朝向(此位置的玩家(11, 所有队伍));
		等待(2, 无视条件);
		停止镜头(事件玩家);
	}
}

规则("Reaper 7")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		死神;
	}

	条件
	{
		具有状态(事件玩家, 点燃) == 真;
		是否是机器人(事件玩家) == 真;
	}

	动作
	{
		设置朝向(事件玩家, 矢量(随机实数(-1, 1), 随机实数(-1, 1), 随机实数(-1, 1)), 至地图);
		等待(0.200, 无视条件);
		如条件为”真“则循环;
	}
}

规则("Reaper 8")
{
	事件
	{
		玩家阵亡;
		双方;
		全部;
	}

	条件
	{
		事件为环境事件 == 真;
	}

	动作
	{
		等待(2, 无视条件);
		重生(事件玩家);
	}
}

规则("Reaper 9")
{
	事件
	{
		玩家阵亡;
		双方;
		全部;
	}

	条件
	{
		是否是机器人(事件玩家) == 假;
	}

	动作
	{
		等待(11, 无视条件);
		If(事件玩家.W == 假);
			
		End;
	}
}
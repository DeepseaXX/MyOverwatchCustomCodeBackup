设置
{
	主程序
	{
		描述: "这是哪儿——地平线：月球基地★在地图上寻找神秘地点 ★点击右键可以看到一个神秘图片，找到这个地方，对物品按下互动键（默认F）得到下一张照片，先找完的人获胜！ ★建议设置为中高模型特效获取更好的游戏体验★游戏结束后会获得奖励 ★按[shift]奔跑 ★提示和更多地图在owmot.net搜索★ Made by Foren#2660 ★ 国服搬运工：KDLin#5710阿育托耶：E3W66城堡：R65B5监测站：直布罗陀：2SYQ4"
	}


	大厅
	{
		地图轮换: 暂停轮换
		比赛结束后转换队伍: 否
		比赛语音聊天: 启用
		玩家上限 队伍1: 0
		玩家上限 队伍2: 12
		观战者人数上限: 3
		返回大厅: 从不
	}

	模式
	{
		突击模式
		{
			启用地图
			{
				“地平线”月球基地
			}
		}

		综合
		{
			复生时间: 0%
			急救包刷新: 禁用
			比赛模式开始: 即时
			消灭提示: 关闭
			消灭镜头: 关闭
			英雄限制: 关闭
		}
	}

	英雄
	{
		综合
		{
			主要攻击模式: 关闭
			仅爆头有效: 开启
			战斗时终极技能充能速度: 0%
			技能冷却时间: 50%
			移动速度: 110%
			终极技能充能速度: 10%
			终极技能自动充能速度: 0%
			近身攻击: 关闭

			D.Va
			{
				主要攻击模式: 关闭
				微型飞弹: 关闭
				推进器: 关闭
				终极技能（自毁）: 关闭
				防御矩阵: 关闭
			}

			半藏
			{
				主要攻击模式: 关闭
				岚: 关闭
				终极技能（竜）: 关闭
				跃: 关闭
				音: 关闭
			}

			卢西奥
			{
				主要攻击模式: 关闭
				切歌: 关闭
				强音: 关闭
				终极技能（音障）: 关闭
				音波: 关闭
			}

			回声
			{
				主要攻击模式: 关闭
				滑翔: 关闭
				终极技能（人格复制）: 关闭
				聚焦光线: 关闭
				重生时终极技能充能完毕: 开启
				飞行: 关闭
				黏性炸弹: 关闭
			}

			堡垒
			{
				主要攻击模式: 关闭
				切换模式: 关闭
				终极技能（坦克模式）: 关闭
				自我修复: 关闭
			}

			士兵：76
			{
				主要攻击模式: 关闭
				生物力场: 关闭
				疾跑: 关闭
				终极技能（战术目镜）: 关闭
				螺旋飞弹: 关闭
			}

			天使
			{
				主要攻击模式: 关闭
				守护天使: 关闭
				终极技能（女武神）: 关闭
				自动恢复: 关闭
				辅助攻击模式: 关闭
				重生: 关闭
			}

			奥丽莎
			{
				主要攻击模式: 关闭
				强固防御: 关闭
				站住别动: 关闭
				终极技能（超充能器）: 关闭
				防护屏障: 关闭
			}

			安娜
			{
				主要攻击模式: 关闭
				生物手雷: 关闭
				终极技能（纳米激素）: 关闭
				麻醉镖: 关闭
			}

			巴蒂斯特
			{
				主要攻击模式: 关闭
				愈合冲击: 关闭
				终极技能（增幅矩阵）: 关闭
				维生力场: 关闭
				辅助攻击模式: 关闭
			}

			布丽吉塔
			{
				主要攻击模式: 关闭
				屏障护盾: 关闭
				恢复包: 关闭
				流星飞锤: 关闭
				终极技能（集结号令）: 关闭
				能量盾击: 关闭
			}

			托比昂
			{
				主要攻击模式: 关闭
				热力过载: 关闭
				终极技能（熔火核心）: 关闭
				辅助攻击模式: 关闭
				部署炮台: 关闭
			}

			末日铁拳
			{
				上勾重拳: 关闭
				主要攻击模式: 关闭
				火箭重拳: 关闭
				终极技能（毁天灭地）: 关闭
				裂地重拳: 关闭
			}

			查莉娅
			{
				主要攻击模式: 关闭
				投射屏障: 关闭
				无需装弹: 开启
				粒子屏障: 关闭
				辅助攻击模式: 关闭
			}

			死神
			{
				主要攻击模式: 关闭
				幽灵形态: 关闭
				暗影步: 关闭
				终极技能（死亡绽放）: 关闭
			}

			法老之鹰
			{
				主要攻击模式: 关闭
				悬浮背包: 关闭
				推进背包: 关闭
				终极技能（火箭弹幕）: 关闭
				震荡冲击: 关闭
			}

			温斯顿
			{
				主要攻击模式: 关闭
				喷射背包: 关闭
				屏障发射器: 关闭
				终极技能（原始暴怒）: 关闭
			}

			源氏
			{
				主要攻击模式: 关闭
				影: 关闭
				终极技能（斩）: 关闭
				辅助攻击模式: 关闭
				闪: 关闭
			}

			狂鼠
			{
				主要攻击模式: 关闭
				捕兽夹: 关闭
				终极技能（炸弹轮胎）: 关闭
				震荡地雷: 关闭
			}

			猎空
			{
				主要攻击模式: 关闭
				终极技能（脉冲炸弹）: 关闭
				闪回: 关闭
				闪现: 关闭
			}

			破坏球
			{
				主要攻击模式: 关闭
				动力铁球: 关闭
				工程抓钩: 关闭
				感应护盾: 关闭
				终极技能（地雷禁区）: 关闭
				重力坠击: 关闭
			}

			禅雅塔
			{
				主要攻击模式: 关闭
				乱: 关闭
				谐: 关闭
				辅助攻击模式: 关闭
			}

			秩序之光
			{
				主要攻击模式: 关闭
				传送面板: 关闭
				哨戒炮: 关闭
				终极技能（光子屏障）: 关闭
				辅助攻击模式: 关闭
			}

			美
			{
				主要攻击模式: 关闭
				冰墙: 关闭
				急冻: 关闭
				终极技能（暴雪）: 关闭
				辅助攻击模式: 关闭
			}

			艾什
			{
				主要攻击模式: 关闭
				延时雷管: 关闭
				短筒猎枪: 关闭
				终极技能（召唤鲍勃）: 关闭
			}

			莫伊拉
			{
				主要攻击模式: 关闭
				消散: 关闭
				生化之球: 关闭
				终极技能（聚合射线）: 关闭
				辅助攻击模式: 关闭
			}

			莱因哈特
			{
				主要攻击模式: 关闭
				冲锋: 关闭
				屏障力场: 关闭
				烈焰打击: 关闭
				终极技能（裂地猛击）: 关闭
			}

			西格玛
			{
				主要攻击模式: 关闭
				动能俘获: 关闭
				实验屏障: 关闭
				终极技能（引力乱流）: 关闭
				质量吸附: 关闭
			}

			路霸
			{
				主要攻击模式: 关闭
				呼吸器: 关闭
				终极技能（鸡飞狗跳）: 关闭
				辅助攻击模式: 关闭
				链钩: 关闭
			}

			麦克雷
			{
				主要攻击模式: 关闭
				战术翻滚: 关闭
				终极技能（神射手）: 关闭
				辅助攻击模式: 关闭
				闪光弹: 关闭
			}

			黑影
			{
				主要攻击模式: 关闭
				位移传动: 关闭
				终极技能（电磁脉冲）: 关闭
				隐秘潜行: 关闭
				黑客入侵: 关闭
			}

			黑百合
			{
				主要攻击模式: 关闭
				剧毒诡雷: 关闭
				抓钩: 关闭
				终极技能（红外侦测）: 关闭
			}

			禁用英雄
			{
				半藏
			}
		}
	}
}

变量
{
	全局:
		26: AA

	玩家:
		26: AA
}

规则("all objects *")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.N = 0;
		全局.N += 1;
		全局.C[全局.N] = 矢量(-11.255, 8.586, -0.569);
		全局.D[全局.N] = 矢量(-11.307, 8.886, 0.050);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-27.158, 10.308, -20.891);
		全局.D[全局.N] = 矢量(-27.642, 10.311, -21.245);
		全局.N += 1;
		全局.C[全局.N] = 矢量(35.106, 7.484, -31.705);
		全局.D[全局.N] = 矢量(35.447, 7.119, -31.602);
		全局.N += 1;
		全局.C[全局.N] = 矢量(41.973, 9.289, -49.995);
		全局.D[全局.N] = 矢量(41.692, 9.276, -49.534);
		全局.N += 1;
		全局.C[全局.N] = 矢量(87.521, 8.210, -76.232);
		全局.D[全局.N] = 矢量(87.479, 7.885, -76.266);
		全局.N += 1;
		全局.C[全局.N] = 矢量(75.825, 9.845, -89.870);
		全局.D[全局.N] = 矢量(75.991, 9.832, -89.803);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-0.035, 6.684, -94.946);
		全局.D[全局.N] = 矢量(0.474, 6.048, -95.153);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-65.958, 6.760, -165.028);
		全局.D[全局.N] = 矢量(-65.453, 7.681, -166.140);
		全局.N += 1;
		全局.C[全局.N] = 矢量(33.227, 9.724, -92.240);
		全局.D[全局.N] = 矢量(33.264, 9.745, -92.567);
		全局.N += 1;
		全局.C[全局.N] = 矢量(86.632, 7.965, -61.614);
		全局.D[全局.N] = 矢量(86.667, 7.516, -61.612);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-18.763, 11.769, -6.901);
		全局.D[全局.N] = 矢量(-18.636, 8.240, -6.656);
		全局.N += 1;
		全局.C[全局.N] = 矢量(41.717, 7.790, -52.842);
		全局.D[全局.N] = 矢量(41.529, 7.726, -52.977);
		全局.N += 1;
		全局.C[全局.N] = 矢量(52.316, 7.860, -105.225);
		全局.D[全局.N] = 矢量(52.004, 8.356, -106.272);
		全局.N += 1;
		全局.C[全局.N] = 矢量(84.273, 7.297, -60.519);
		全局.D[全局.N] = 矢量(84.292, 6.788, -60.509);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-12.690, 9.096, -22.581);
		全局.D[全局.N] = 矢量(-12.784, 9.064, -22.693);
		全局.N += 1;
		全局.C[全局.N] = 矢量(83.477, 13.010, -71.841);
		全局.D[全局.N] = 矢量(83.362, 16.158, -71.846);
		全局.N += 1;
		全局.C[全局.N] = 矢量(62.648, 7.295, -19.533);
		全局.D[全局.N] = 矢量(62.832, 7.608, -19.677);
		全局.N += 1;
		全局.C[全局.N] = 矢量(45.945, 6.745, -68.554);
		全局.D[全局.N] = 矢量(45.722, 6.680, -68.692);
		全局.N += 1;
		全局.C[全局.N] = 矢量(36.584, 7.343, -28.718);
		全局.D[全局.N] = 矢量(36.418, 7.096, -28.466);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-25.694, 5.981, -160.302);
		全局.D[全局.N] = 矢量(-26.038, 5.929, -160.586);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-9.220, 9.109, -23.930);
		全局.D[全局.N] = 矢量(-9.406, 9.174, -23.858);
		全局.N += 1;
		全局.C[全局.N] = 矢量(86.050, 9.959, -75.211);
		全局.D[全局.N] = 矢量(86.292, 10.374, -75.200);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-2.325, 11.587, -110.719);
		全局.D[全局.N] = 矢量(-1.843, 11.882, -110.019);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-6.995, 12.474, -24.389);
		全局.D[全局.N] = 矢量(-7.011, 12.013, -24.171);
		全局.N += 1;
		全局.C[全局.N] = 矢量(40.514, 15.571, -67.448);
		全局.D[全局.N] = 矢量(40.458, 14.883, -67.449);
		全局.N += 1;
		全局.C[全局.N] = 矢量(9.287, 10.450, -17.409);
		全局.D[全局.N] = 矢量(9.632, 10.438, -17.591);
		全局.N += 1;
		全局.C[全局.N] = 矢量(72.796, 14.047, -60.402);
		全局.D[全局.N] = 矢量(72.771, 14.243, -60.937);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-63.887, 9.258, -168.400);
		全局.D[全局.N] = 矢量(-63.743, 8.776, -168.133);
		全局.N += 1;
		全局.C[全局.N] = 矢量(29.245, 7.295, -52.870);
		全局.D[全局.N] = 矢量(28.606, 7.368, -52.078);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-22.546, 4.102, -127.533);
		全局.D[全局.N] = 矢量(-22.213, 2.965, -127.106);
		全局.N += 1;
		全局.C[全局.N] = 矢量(59.207, 23.079, -84.629);
		全局.D[全局.N] = 矢量(59.622, 23.046, -84.334);
		全局.N += 1;
		全局.C[全局.N] = 矢量(77.396, 33.805, -76.753);
		全局.D[全局.N] = 矢量(77.415, 33.834, -77.743);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-22.926, 7.790, -16.314);
		全局.D[全局.N] = 矢量(-22.942, 8.419, -16.310);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-10.312, 3.620, -113.982);
		全局.D[全局.N] = 矢量(-10.104, 3.593, -114.098);
		全局.N += 1;
		全局.C[全局.N] = 矢量(86.270, 7.669, -62.183);
		全局.D[全局.N] = 矢量(86.129, 7.487, -62.250);
		全局.N += 1;
		全局.C[全局.N] = 矢量(4.421, 10.701, -30.728);
		全局.D[全局.N] = 矢量(4.329, 10.677, -30.881);
		全局.N += 1;
		全局.C[全局.N] = 矢量(49.831, 14.559, -84.192);
		全局.D[全局.N] = 矢量(49.221, 14.675, -83.970);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-47.596, 6.430, -119.926);
		全局.D[全局.N] = 矢量(-47.827, 6.437, -119.785);
		全局.N += 1;
		全局.C[全局.N] = 矢量(15.015, 8.807, -78.148);
		全局.D[全局.N] = 矢量(15.008, 8.555, -77.935);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-26.827, 16.486, 11.143);
		全局.D[全局.N] = 矢量(-26.042, 16.201, 10.734);
		全局.N += 1;
		全局.C[全局.N] = 矢量(79.770, 7.101, -67.961);
		全局.D[全局.N] = 矢量(79.334, 7.132, -68.415);
		全局.N += 1;
		全局.C[全局.N] = 矢量(38.327, 13.672, -23.954);
		全局.D[全局.N] = 矢量(38.359, 12.353, -24.001);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-27.319, 22.411, -93.585);
		全局.D[全局.N] = 矢量(-26.862, 23.663, -92.080);
		全局.N += 1;
		全局.C[全局.N] = 矢量(33.577, 9.236, -19.083);
		全局.D[全局.N] = 矢量(33.833, 9.228, -19.592);
		全局.N += 1;
		全局.C[全局.N] = 矢量(42.284, 14.984, -54.087);
		全局.D[全局.N] = 矢量(42.139, 15.184, -54.197);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-41.528, 11.801, -174.486);
		全局.D[全局.N] = 矢量(-39.505, 11.801, -175.539);
		全局.N += 1;
		全局.C[全局.N] = 矢量(6.994, 16.178, -43.687);
		全局.D[全局.N] = 矢量(7.735, 16.191, -44.779);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-51.446, 4.925, -105.695);
		全局.D[全局.N] = 矢量(-51.995, 5.008, -105.397);
		全局.N += 1;
		全局.C[全局.N] = 矢量(7.228, 13.132, -6.614);
		全局.D[全局.N] = 矢量(8.450, 13.176, -7.316);
		全局.N += 1;
		全局.C[全局.N] = 矢量(78.698, 12.259, -97.572);
		全局.D[全局.N] = 矢量(78.700, 12.257, -97.692);
	}
}

规则("// copy and paste the following line into the game title: *")
{
	事件
	{
		持续 - 全局;
	}
}

规则("WHERE IS IT? ★ Horizon ★ No limits")
{
	事件
	{
		持续 - 全局;
	}
}

规则("// all maps and additional info: bit.do/whereisit")
{
	事件
	{
		持续 - 全局;
	}
}

规则("// \"WHERE IS IT?\" ver. 1.4")
{
	事件
	{
		持续 - 全局;
	}
}

规则("// original mode is made by Foren#2660")
{
	事件
	{
		持续 - 全局;
	}
}

规则("total number of objects")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.O = 全局.N;
	}
}

规则("beginning of the game *")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.B = 0;
		全局.V = 30;
		修改全局变量(J, 添加至数组, 5);
		修改全局变量(J, 添加至数组, 10);
		修改全局变量(J, 添加至数组, 15);
		修改全局变量(J, 添加至数组, 20);
		修改全局变量(J, 添加至数组, 25);
		修改全局变量(J, 添加至数组, 30);
		修改全局变量(J, 添加至数组, 35);
		修改全局变量(J, 添加至数组, 40);
		修改全局变量(J, 添加至数组, 45);
		修改全局变量(J, 添加至数组, 50);
		全局.Y = 30;
		全局.W = 假;
		全局.U = 假;
		全局.M = 假;
		全局.R[1] = 假;
		全局.R[3] = 0;
		全局.D[0] = 矢量(0, -50, 0);
		全局.AA = 6;
		全局.K = 假;
	}
}

规则("intro *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.I == 真;
	}

	动作
	{
		开始镜头(事件玩家, 矢量(-384.374, -20.179, -45.907), 矢量(-384.165, -19.928, -45.864), 0);
		设置状态(事件玩家, 无, 定身, 99);
		等待(0.250, 无视条件);
		开始镜头(事件玩家, 矢量(-384.374, -20.179, -45.907), 矢量(-384.165, -19.928, -45.864), 0);
		等待(0.250, 无视条件);
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("欢迎"), 字符串("{0}！", 事件玩家)));
		等待(1, 无视条件);
		开始镜头(事件玩家, 矢量(-388.144, -32.573, -46.697), 矢量(-387.304, -31.610, -46.521), 0.500);
		等待(6, 无视条件);
		开始镜头(事件玩家, 矢量(-381.424, -30.391, -50.632), 矢量(-389.791, 54.623, 14.841), 0.100);
		等待(3, 无视条件);
		创建效果(事件玩家, 有害光环, 颜色(橙色), 事件玩家, 5, 可见，位置和半径);
		事件玩家.E[3] = 最后创建的实体;
		创建效果(事件玩家, 有益光环, 颜色(橙色), 事件玩家, 1.500, 可见，位置和半径);
		事件玩家.E[4] = 最后创建的实体;
		设置不可见(事件玩家, 无);
		传送(事件玩家, 矢量(-496.431, 400.207, 219.562));
		开始加速(事件玩家, 矢量(0.430, 0, -0.590), 80, 80, 至地图, 方向，速率，及最大速度);
		等待(5, 无视条件);
		停止加速(事件玩家);
		传送(事件玩家, 矢量(229.876, 956.759, -10.461));
		设置朝向(事件玩家, 矢量(-0.250, -0.970, 0.050), 至地图);
		开始加速(事件玩家, 矢量(-0.440, 0, -0.010), 150, 150, 至地图, 方向，速率，及最大速度);
		开始镜头(事件玩家, 矢量(216.006, 882.027, 9.272), 事件玩家, 0);
		等待(5.500, 无视条件);
		传送(事件玩家, 矢量(83.321, 255.264, -17.545));
		开始镜头(事件玩家, 矢量(-78.251, -10.770, 82.515), 事件玩家, 0);
		等待(5, 无视条件);
		停止镜头(事件玩家);
		等待(2.200, 无视条件);
		播放效果(事件玩家, 爆炸声音, 颜色(白色), 事件玩家, 80);
		播放效果(事件玩家, 有益爆炸, 颜色(橙色), 矢量(26.835, 28, -18.014), 25);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 80);
		等待(1, 无视条件);
		设置状态(事件玩家, 无, 击倒, 3);
		等待(0.500, 无视条件);
		停止加速(事件玩家);
		消除效果(事件玩家.E[3]);
		消除效果(事件玩家.E[4]);
		事件玩家.I = 假;
		停止镜头(事件玩家);
		事件玩家.T = 真;
		清除状态(事件玩家, 定身);
		事件玩家.M = 真;
	}
}

规则("outro 1 *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.Z == 1;
		全局.B == 1;
	}

	动作
	{
		全局.G = 矢量(0, -150, 0);
		事件玩家.Z = 2;
		事件玩家.W = 真;
		开始修改英雄语音(事件玩家, 0.500, 真);
		消除效果(事件玩家.E[5]);
		消除效果(事件玩家.E[6]);
		设置状态(事件玩家, 无, 定身, 9999);
		设置朝向(事件玩家, 矢量(0.880, 0, -0.480), 至地图);
		等待(0.250, 无视条件);
		交流(事件玩家, 表情（上）);
		等待(0.250, 无视条件);
		设置引力(事件玩家, 0);
		等待(0.250, 无视条件);
		停止镜头(事件玩家);
		设置慢动作(30);
		If(所用英雄(事件玩家) == 英雄(西格玛));
			传送(事件玩家, 矢量(36.704, 797.600, -59.147));
		Else If(所用英雄(事件玩家) == 英雄(回声));
			传送(事件玩家, 矢量(36.704, 797.600, -59.147));
		Else;
			传送(事件玩家, 矢量(36.704, 798.176, -59.147));
		End;
		全局.W = 真;
		开始镜头(事件玩家, 矢量(41.899, 798.224, -58.182), 矢量(41.861, 798.272, -58.285), 0);
		等待(0.100, 无视条件);
		全局.K = 假;
		大字体信息(所有玩家(所有队伍), 字符串("{0} {1} {2}", 英雄图标字符串(所用英雄(事件玩家)), 事件玩家, 字符串("{0}！", 字符串("胜者"))));
		开始镜头(事件玩家, 矢量(31.813, 798.224, -54.406), 矢量(13.589, 820.892, -103.090), 1.500);
		等待(2, 无视条件);
		停止镜头(事件玩家);
		开始镜头(事件玩家, 矢量(38.749, 798.299, -60.213), 矢量(36.261, 799.196, -58.798), 0);
		等待(0.100, 无视条件);
		开始镜头(事件玩家, 矢量(37.878, 798.613, -59.718), 矢量(36.261, 799.196, -58.798), 1.500);
		等待(1.500, 无视条件);
		全局.G = 矢量(22.674, 803.817, -51.036);
		设置慢动作(5);
		播放效果(所有玩家(所有队伍), 有益爆炸, 颜色(橙色), 矢量(33.997, 800.012, -57.511), 20);
		播放效果(所有玩家(所有队伍), 环状爆炸, 颜色(橙色), 矢量(33.997, 801, -57.511), 30);
		等待(0.100, 无视条件);
		播放效果(所有玩家(所有队伍), 有益爆炸, 颜色(橙色), 全局.G, 10);
		等待(0.090, 无视条件);
		播放效果(所有玩家(所有队伍), 有益爆炸, 颜色(橙色), 全局.G, 18);
		等待(0.120, 无视条件);
		播放效果(所有玩家(所有队伍), 有益爆炸, 颜色(橙色), 全局.G, 11);
		等待(0.090, 无视条件);
		播放效果(所有玩家(所有队伍), 有益爆炸, 颜色(橙色), 全局.G, 20);
		等待(0.500, 无视条件);
		停止镜头(事件玩家);
		设置慢动作(100);
		等待(0.250, 无视条件);
		全局.G = 矢量(0, -150, 0);
		全局.W = 假;
		施加推力(事件玩家, 矢量(随机实数(-1, 1), 1, 随机实数(-1, 1)), 2, 至玩家, 取消相反运动);
		清除状态(事件玩家, 定身);
		等待(10, 无视条件);
		播放效果(事件玩家, 状态爆炸声音, 颜色(白色), 事件玩家, 10);
		消除HUD文本(事件玩家.AA);
		等待(0.250, 无视条件);
		创建HUD文本(事件玩家, 图标字符串(对号), 自定义字符串("Try other maps!"), 自定义字符串("bit.do/whereisit "), 顶部, 1, 颜色(灰绿色), 颜色(白色), 颜色(灰绿色), 字符串, 默认可见度);
		事件玩家.AA = 上一个文本ID;
		事件玩家.W = 假;
		事件玩家.Z = 0;
		等待(90, 无视条件);
		消除效果(事件玩家.E[3]);
		消除效果(事件玩家.E[4]);
	}
}

规则("outro 2 *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.Z == 1;
		全局.B == 2;
	}

	动作
	{
		全局.G = 矢量(0, -150, 0);
		事件玩家.Z = 2;
		事件玩家.W = 真;
		开始修改英雄语音(事件玩家, 0.500, 真);
		消除效果(事件玩家.E[5]);
		消除效果(事件玩家.E[6]);
		设置状态(事件玩家, 无, 定身, 9999);
		设置朝向(事件玩家, 矢量(0.880, 0, -0.480), 至地图);
		等待(0.250, 无视条件);
		交流(事件玩家, 表情（上）);
		等待(0.250, 无视条件);
		设置引力(事件玩家, 0);
		等待(0.250, 无视条件);
		停止镜头(事件玩家);
		设置慢动作(30);
		设置不可见(事件玩家, 无);
		If(所用英雄(事件玩家) == 英雄(西格玛));
			传送(事件玩家, 矢量(36.704, 797.600, -59.147));
		Else If(所用英雄(事件玩家) == 英雄(回声));
			传送(事件玩家, 矢量(36.704, 797.600, -59.147));
		Else;
			传送(事件玩家, 矢量(36.704, 798.176, -59.147));
		End;
		全局.W = 真;
		开始镜头(事件玩家, 矢量(21.059, 782.918, -45.328), 矢量(36.731, 799.130, -59.135), 0);
		等待(0.100, 无视条件);
		全局.K = 假;
		大字体信息(所有玩家(所有队伍), 字符串("{0} {1} {2}", 英雄图标字符串(所用英雄(事件玩家)), 事件玩家, 字符串("{0}！", 字符串("胜者"))));
		等待(0.200, 无视条件);
		开始镜头(事件玩家, 矢量(16.101, 783.360, -55.517), 矢量(36.731, 799.130, -59.135), 2);
		等待(0.200, 无视条件);
		开始镜头(事件玩家, 矢量(20.612, 787.106, -70.931), 矢量(36.731, 799.130, -59.135), 2);
		等待(0.200, 无视条件);
		开始镜头(事件玩家, 矢量(35.467, 787.873, -82.794), 矢量(36.731, 799.130, -59.135), 2);
		等待(0.200, 无视条件);
		开始镜头(事件玩家, 矢量(59.973, 788.279, -77.269), 矢量(36.731, 799.130, -59.135), 2);
		等待(0.200, 无视条件);
		开始镜头(事件玩家, 矢量(62.083, 788.847, -72.908), 矢量(36.731, 799.130, -59.135), 2);
		等待(2, 无视条件);
		开始镜头(事件玩家, 矢量(37.878, 798.613, -59.718), 矢量(36.261, 799.196, -58.798), 3);
		等待(1.600, 无视条件);
		全局.G = 矢量(22.674, 803.817, -51.036);
		设置慢动作(5);
		播放效果(所有玩家(所有队伍), 有益爆炸, 颜色(橙色), 矢量(33.997, 800.012, -57.511), 20);
		播放效果(所有玩家(所有队伍), 环状爆炸, 颜色(橙色), 矢量(33.997, 801, -57.511), 30);
		等待(0.100, 无视条件);
		播放效果(所有玩家(所有队伍), 有益爆炸, 颜色(橙色), 全局.G, 10);
		等待(0.090, 无视条件);
		播放效果(所有玩家(所有队伍), 有益爆炸, 颜色(橙色), 全局.G, 18);
		等待(0.120, 无视条件);
		播放效果(所有玩家(所有队伍), 有益爆炸, 颜色(橙色), 全局.G, 11);
		等待(0.090, 无视条件);
		播放效果(所有玩家(所有队伍), 有益爆炸, 颜色(橙色), 全局.G, 20);
		等待(0.500, 无视条件);
		停止镜头(事件玩家);
		设置慢动作(100);
		等待(0.250, 无视条件);
		全局.G = 矢量(0, -150, 0);
		全局.W = 假;
		施加推力(事件玩家, 矢量(随机实数(-1, 1), 1, 随机实数(-1, 1)), 2, 至玩家, 取消相反运动);
		清除状态(事件玩家, 定身);
		等待(10, 无视条件);
		播放效果(事件玩家, 状态爆炸声音, 颜色(白色), 事件玩家, 10);
		消除HUD文本(事件玩家.AA);
		等待(0.250, 无视条件);
		创建HUD文本(事件玩家, 图标字符串(对号), 自定义字符串("Try other maps!"), 自定义字符串("bit.do/whereisit "), 顶部, 1, 颜色(灰绿色), 颜色(白色), 颜色(灰绿色), 字符串, 默认可见度);
		事件玩家.AA = 上一个文本ID;
		事件玩家.W = 假;
		事件玩家.Z = 0;
		等待(90, 无视条件);
		消除效果(事件玩家.E[3]);
		消除效果(事件玩家.E[4]);
	}
}

规则("outro 3 *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.Z == 1;
		全局.B == 3;
	}

	动作
	{
		全局.G = 矢量(0, -150, 0);
		事件玩家.Z = 2;
		事件玩家.W = 真;
		开始修改英雄语音(事件玩家, 0.500, 真);
		消除效果(事件玩家.E[5]);
		消除效果(事件玩家.E[6]);
		设置状态(事件玩家, 无, 定身, 9999);
		设置朝向(事件玩家, 矢量(0.880, 0, -0.480), 至地图);
		等待(0.250, 无视条件);
		交流(事件玩家, 表情（上）);
		等待(0.250, 无视条件);
		设置引力(事件玩家, 0);
		等待(0.250, 无视条件);
		停止镜头(事件玩家);
		设置慢动作(30);
		设置不可见(事件玩家, 无);
		If(所用英雄(事件玩家) == 英雄(西格玛));
			传送(事件玩家, 矢量(36.704, 797.600, -59.147));
		Else If(所用英雄(事件玩家) == 英雄(回声));
			传送(事件玩家, 矢量(36.704, 797.600, -59.147));
		Else;
			传送(事件玩家, 矢量(36.704, 798.176, -59.147));
		End;
		全局.W = 真;
		开始镜头(事件玩家, 矢量(32.541, 798.453, -56.659), 矢量(32.675, 798.708, -56.743), 0);
		等待(0.250, 无视条件);
		全局.K = 假;
		大字体信息(所有玩家(所有队伍), 字符串("{0} {1} {2}", 英雄图标字符串(所用英雄(事件玩家)), 事件玩家, 字符串("{0}！", 字符串("胜者"))));
		开始镜头(事件玩家, 矢量(32.541, 775.120, -56.659), 矢量(46.478, 801.649, -65.381), 1);
		等待(1.500, 无视条件);
		停止镜头(事件玩家);
		开始镜头(事件玩家, 矢量(40.032, 801.941, -60.896), 矢量(39.584, 802.103, -60.643), 0);
		等待(0.100, 无视条件);
		开始镜头(事件玩家, 矢量(40.032, 797.797, -60.896), 矢量(36.439, 799.100, -58.862), 7);
		等待(2, 无视条件);
		全局.G = 矢量(22.674, 803.817, -51.036);
		设置慢动作(5);
		播放效果(所有玩家(所有队伍), 有益爆炸, 颜色(橙色), 矢量(33.997, 800.012, -57.511), 20);
		播放效果(所有玩家(所有队伍), 环状爆炸, 颜色(橙色), 矢量(33.997, 801, -57.511), 30);
		等待(0.100, 无视条件);
		播放效果(所有玩家(所有队伍), 有益爆炸, 颜色(橙色), 全局.G, 10);
		等待(0.090, 无视条件);
		播放效果(所有玩家(所有队伍), 有益爆炸, 颜色(橙色), 全局.G, 18);
		等待(0.120, 无视条件);
		播放效果(所有玩家(所有队伍), 有益爆炸, 颜色(橙色), 全局.G, 11);
		等待(0.090, 无视条件);
		播放效果(所有玩家(所有队伍), 有益爆炸, 颜色(橙色), 全局.G, 20);
		等待(0.500, 无视条件);
		停止镜头(事件玩家);
		等待(0.250, 无视条件);
		全局.G = 矢量(0, -150, 0);
		设置慢动作(100);
		全局.W = 假;
		施加推力(事件玩家, 矢量(随机实数(-1, 1), 1, 随机实数(-1, 1)), 2, 至玩家, 取消相反运动);
		清除状态(事件玩家, 定身);
		等待(10, 无视条件);
		播放效果(事件玩家, 状态爆炸声音, 颜色(白色), 事件玩家, 10);
		消除HUD文本(事件玩家.AA);
		等待(0.250, 无视条件);
		创建HUD文本(事件玩家, 图标字符串(对号), 自定义字符串("Try other maps!"), 自定义字符串("bit.do/whereisit "), 顶部, 1, 颜色(灰绿色), 颜色(白色), 颜色(灰绿色), 字符串, 默认可见度);
		事件玩家.AA = 上一个文本ID;
		事件玩家.W = 假;
		事件玩家.Z = 0;
		等待(90, 无视条件);
		消除效果(事件玩家.E[3]);
		消除效果(事件玩家.E[4]);
	}
}

规则("outro 4 *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.Z == 1;
		全局.B == 4;
	}

	动作
	{
		全局.G = 矢量(0, -150, 0);
		事件玩家.Z = 2;
		事件玩家.W = 真;
		开始修改英雄语音(事件玩家, 0.500, 真);
		消除效果(事件玩家.E[5]);
		消除效果(事件玩家.E[6]);
		设置状态(事件玩家, 无, 定身, 9999);
		设置朝向(事件玩家, 矢量(0.880, 0, -0.480), 至地图);
		等待(0.250, 无视条件);
		交流(事件玩家, 表情（上）);
		等待(0.250, 无视条件);
		设置引力(事件玩家, 0);
		等待(0.250, 无视条件);
		停止镜头(事件玩家);
		设置慢动作(30);
		设置不可见(事件玩家, 无);
		If(所用英雄(事件玩家) == 英雄(西格玛));
			传送(事件玩家, 矢量(36.704, 797.600, -59.147));
		Else If(所用英雄(事件玩家) == 英雄(回声));
			传送(事件玩家, 矢量(36.704, 797.600, -59.147));
		Else;
			传送(事件玩家, 矢量(36.704, 798.176, -59.147));
		End;
		全局.W = 真;
		开始镜头(事件玩家, 矢量(31.626, 796.262, -56.272), 矢量(36.799, 799.153, -59.179), 0);
		等待(0.100, 无视条件);
		全局.K = 假;
		大字体信息(所有玩家(所有队伍), 字符串("{0} {1} {2}", 英雄图标字符串(所用英雄(事件玩家)), 事件玩家, 字符串("{0}！", 字符串("胜者"))));
		等待(0.200, 无视条件);
		开始镜头(事件玩家, 矢量(32.165, 797.030, -59.014), 矢量(36.799, 799.153, -59.179), 3);
		等待(0.200, 无视条件);
		开始镜头(事件玩家, 矢量(33.610, 797.540, -61.924), 矢量(36.799, 799.153, -59.179), 3);
		等待(0.200, 无视条件);
		开始镜头(事件玩家, 矢量(37.750, 798.230, -62.289), 矢量(36.799, 799.153, -59.179), 3);
		等待(0.200, 无视条件);
		开始镜头(事件玩家, 矢量(38.810, 798.177, -60.273), 矢量(36.799, 799.153, -59.179), 3);
		等待(2, 无视条件);
		开始镜头(事件玩家, 矢量(37.878, 798.613, -59.718), 矢量(36.261, 799.196, -58.798), 1);
		等待(1.500, 无视条件);
		全局.G = 矢量(22.674, 803.817, -51.036);
		设置慢动作(5);
		播放效果(所有玩家(所有队伍), 有益爆炸, 颜色(橙色), 矢量(33.997, 800.012, -57.511), 20);
		播放效果(所有玩家(所有队伍), 环状爆炸, 颜色(橙色), 矢量(33.997, 801, -57.511), 30);
		等待(0.100, 无视条件);
		播放效果(所有玩家(所有队伍), 有益爆炸, 颜色(橙色), 全局.G, 10);
		等待(0.090, 无视条件);
		播放效果(所有玩家(所有队伍), 有益爆炸, 颜色(橙色), 全局.G, 18);
		等待(0.120, 无视条件);
		播放效果(所有玩家(所有队伍), 有益爆炸, 颜色(橙色), 全局.G, 11);
		等待(0.090, 无视条件);
		播放效果(所有玩家(所有队伍), 有益爆炸, 颜色(橙色), 全局.G, 20);
		等待(0.500, 无视条件);
		停止镜头(事件玩家);
		设置慢动作(100);
		等待(0.250, 无视条件);
		全局.G = 矢量(0, -150, 0);
		全局.W = 假;
		施加推力(事件玩家, 矢量(随机实数(-1, 1), 1, 随机实数(-1, 1)), 2, 至玩家, 取消相反运动);
		清除状态(事件玩家, 定身);
		等待(10, 无视条件);
		播放效果(事件玩家, 状态爆炸声音, 颜色(白色), 事件玩家, 10);
		消除HUD文本(事件玩家.AA);
		等待(0.250, 无视条件);
		创建HUD文本(事件玩家, 图标字符串(对号), 自定义字符串("Try other maps!"), 自定义字符串("bit.do/whereisit "), 顶部, 1, 颜色(灰绿色), 颜色(白色), 颜色(灰绿色), 字符串, 默认可见度);
		事件玩家.AA = 上一个文本ID;
		事件玩家.W = 假;
		事件玩家.Z = 0;
		等待(90, 无视条件);
		消除效果(事件玩家.E[3]);
		消除效果(事件玩家.E[4]);
	}
}

规则("outro 5 *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.Z == 1;
		全局.B == 5;
	}

	动作
	{
		全局.G = 矢量(0, -150, 0);
		事件玩家.Z = 2;
		事件玩家.W = 真;
		开始修改英雄语音(事件玩家, 0.500, 真);
		消除效果(事件玩家.E[5]);
		消除效果(事件玩家.E[6]);
		设置状态(事件玩家, 无, 定身, 9999);
		设置朝向(事件玩家, 矢量(0.880, 0, -0.480), 至地图);
		等待(0.250, 无视条件);
		交流(事件玩家, 表情（上）);
		等待(0.250, 无视条件);
		设置引力(事件玩家, 0);
		等待(0.250, 无视条件);
		停止镜头(事件玩家);
		设置慢动作(30);
		设置不可见(事件玩家, 无);
		If(所用英雄(事件玩家) == 英雄(西格玛));
			传送(事件玩家, 矢量(36.704, 797.600, -59.147));
		Else If(所用英雄(事件玩家) == 英雄(回声));
			传送(事件玩家, 矢量(36.704, 797.600, -59.147));
		Else;
			传送(事件玩家, 矢量(36.704, 798.176, -59.147));
		End;
		全局.W = 真;
		开始镜头(事件玩家, 矢量(36.989, 797.880, -59.990), 矢量(37.659, 799.629, -58.742), 0);
		等待(0.250, 无视条件);
		全局.K = 假;
		大字体信息(所有玩家(所有队伍), 字符串("{0} {1} {2}", 英雄图标字符串(所用英雄(事件玩家)), 事件玩家, 字符串("{0}！", 字符串("胜者"))));
		开始镜头(事件玩家, 矢量(36.934, 798.124, -59.808), 矢量(37.175, 798.912, -59.259), 1);
		等待(1.500, 无视条件);
		开始镜头(事件玩家, 矢量(38.456, 798.310, -60.026), 矢量(38.799, 799.100, -59.602), 3);
		等待(0.300, 无视条件);
		开始镜头(事件玩家, 矢量(38.391, 798.344, -60.062), 矢量(36.831, 798.900, -59.217), 3);
		等待(0.600, 无视条件);
		开始镜头(事件玩家, 矢量(39.826, 797.832, -60.838), 矢量(36.831, 798.900, -59.217), 1);
		等待(2, 无视条件);
		全局.G = 矢量(22.674, 803.817, -51.036);
		设置慢动作(5);
		播放效果(所有玩家(所有队伍), 有益爆炸, 颜色(橙色), 矢量(33.997, 800.012, -57.511), 20);
		播放效果(所有玩家(所有队伍), 环状爆炸, 颜色(橙色), 矢量(33.997, 801, -57.511), 30);
		等待(0.100, 无视条件);
		播放效果(所有玩家(所有队伍), 有益爆炸, 颜色(橙色), 全局.G, 10);
		等待(0.090, 无视条件);
		播放效果(所有玩家(所有队伍), 有益爆炸, 颜色(橙色), 全局.G, 18);
		等待(0.120, 无视条件);
		播放效果(所有玩家(所有队伍), 有益爆炸, 颜色(橙色), 全局.G, 11);
		等待(0.090, 无视条件);
		播放效果(所有玩家(所有队伍), 有益爆炸, 颜色(橙色), 全局.G, 20);
		等待(0.500, 无视条件);
		停止镜头(事件玩家);
		等待(0.250, 无视条件);
		全局.G = 矢量(0, -150, 0);
		设置慢动作(100);
		全局.W = 假;
		施加推力(事件玩家, 矢量(随机实数(-1, 1), 1, 随机实数(-1, 1)), 2, 至玩家, 取消相反运动);
		清除状态(事件玩家, 定身);
		等待(10, 无视条件);
		播放效果(事件玩家, 状态爆炸声音, 颜色(白色), 事件玩家, 10);
		消除HUD文本(事件玩家.AA);
		等待(0.250, 无视条件);
		创建HUD文本(事件玩家, 图标字符串(对号), 自定义字符串("Try other maps!"), 自定义字符串("bit.do/whereisit "), 顶部, 1, 颜色(灰绿色), 颜色(白色), 颜色(灰绿色), 字符串, 默认可见度);
		事件玩家.AA = 上一个文本ID;
		事件玩家.W = 假;
		事件玩家.Z = 0;
		等待(90, 无视条件);
		消除效果(事件玩家.E[3]);
		消除效果(事件玩家.E[4]);
	}
}

规则("outro effects")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.G = 矢量(0, -150, 0);
		创建效果(所有玩家(所有队伍), 云, 颜色(橙色), 全局.G + 矢量(0, 6, 0), 14, 可见，位置和半径);
		创建效果(所有玩家(所有队伍), 云, 颜色(橙色), 全局.G + 矢量(0, 4, 0), 14, 可见，位置和半径);
		创建效果(所有玩家(所有队伍), 云, 颜色(橙色), 全局.G + 矢量(0, 2, 0), 14, 可见，位置和半径);
		创建效果(所有玩家(所有队伍), 云, 颜色(橙色), 全局.G + 矢量(0, 0, 0), 14, 可见，位置和半径);
		创建效果(所有玩家(所有队伍), 云, 颜色(橙色), 全局.G + 矢量(0, -2, 0), 14, 可见，位置和半径);
		创建效果(所有玩家(所有队伍), 云, 颜色(橙色), 全局.G + 矢量(0, -4, 0), 14, 可见，位置和半径);
	}
}

规则("player spawn *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
		是否是机器人(事件玩家) == 假;
	}

	动作
	{
		事件玩家.J = 0;
		隐藏英雄HUD(事件玩家);
		事件玩家.F = 0;
		传送(事件玩家, 矢量(47.390, 8.700, -20.014));
		设置启用技能 1(事件玩家, 假);
		设置启用技能 2(事件玩家, 假);
		事件玩家.I = 真;
		事件玩家.G = 5;
		事件玩家.N = 1;
		事件玩家.U = 假;
		事件玩家.V = 假;
		事件玩家.R = 假;
		事件玩家.W = 假;
		事件玩家.O = 假;
		事件玩家.Z = 0;
		事件玩家.X = 假;
		事件玩家.L = 假;
		根据条件跳过(全局.R[2] >= 3, 2);
		全局.R[2] += 1;
		全局.R[1] = 真;
		创建效果(事件玩家, 有益光环, 颜色(橙色), 全局.D[事件玩家.F], 2, 可见，位置和半径);
		事件玩家.E[5] = 最后创建的实体;
		创建效果(事件玩家, 火花, 颜色(橙色), 全局.D[事件玩家.F], 3, 可见，位置和半径);
		事件玩家.E[6] = 最后创建的实体;
		创建HUD文本(事件玩家, 字符串("{0} {1}", 图标字符串(方块), 事件玩家.N), 无, 无, 左边, 1, 颜色(橙色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		事件玩家.E[7] = 最后创建的实体;
		创建HUD文本(事件玩家, 无, 无, 字符串("对象"), 左边, 0, 颜色(白色), 颜色(白色), 颜色(橙色), 可见和字符串, 默认可见度);
		事件玩家.E[8] = 最后创建的实体;
		设置不可见(事件玩家, 全部);
		设置状态(事件玩家, 无, 无敌, 9999);
		事件玩家.S = 150;
		根据条件跳过(全局.L[1] != 无, 2);
		全局.L[1] = 事件玩家;
		中止;
		根据条件跳过(全局.L[2] != 无, 2);
		全局.L[2] = 事件玩家;
		中止;
		根据条件跳过(全局.L[3] != 无, 2);
		全局.L[3] = 事件玩家;
		中止;
	}
}

规则("infinite match time")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		比赛时间 <= 1800;
	}

	动作
	{
		设置比赛时间(3600);
	}
}

规则("player pressed \"F\" key on the empty place")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		相距距离(事件玩家, 全局.D[事件玩家.F]) > 5;
		相距距离(事件玩家, 全局.D[事件玩家.F + 1]) > 5;
		事件玩家.I == 假;
		事件玩家.T == 假;
		具有状态(事件玩家, 冰冻) == 假;
		事件玩家.F < 全局.O;
		全局.K == 假;
		事件玩家.X == 假;
	}

	动作
	{
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("否"), 字符串("物品")));
		播放效果(事件玩家, 负面状态施加声音, 颜色(白色), 事件玩家, 30);
		设置状态(事件玩家, 无, 冰冻, 1);
	}
}

规则("player found item")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		相距距离(事件玩家, 全局.D[事件玩家.F + 1]) <= 5;
		具有状态(事件玩家, 冰冻) == 假;
		事件玩家.F < 全局.O;
		全局.K == 假;
		事件玩家.X == 假;
	}

	动作
	{
		If(事件玩家.J > 1);
			事件玩家.J -= 1;
		End;
		小字体信息(事件玩家, 字符串("{0}！", 字符串("好")));
		播放效果(事件玩家, 环状爆炸, 颜色(橙色), 全局.D[事件玩家.F + 1], 5);
		播放效果(事件玩家, 环状爆炸, 颜色(橙色), 全局.D[事件玩家.F + 1], 7);
		播放效果(事件玩家, 正面状态施加声音, 颜色(白色), 事件玩家, 50);
		事件玩家.F += 1;
		事件玩家.K = 3;
		事件玩家.U = 真;
		事件玩家.G = 10;
		根据条件跳过(事件玩家.F == 全局.J[10], 11);
		根据条件跳过(事件玩家.F == 全局.J[9], 10);
		根据条件跳过(事件玩家.F == 全局.J[8], 9);
		根据条件跳过(事件玩家.F == 全局.J[7], 8);
		根据条件跳过(事件玩家.F == 全局.J[6], 7);
		根据条件跳过(事件玩家.F == 全局.J[5], 6);
		根据条件跳过(事件玩家.F == 全局.J[4], 5);
		根据条件跳过(事件玩家.F == 全局.J[3], 4);
		根据条件跳过(事件玩家.F == 全局.J[2], 3);
		根据条件跳过(事件玩家.F == 全局.J[1], 2);
		事件玩家.U = 假;
		事件玩家.T = 真;
		等待(1, 无视条件);
		播放效果(事件玩家, 正面状态施加声音, 颜色(白色), 事件玩家, 50);
		大字体信息(事件玩家, 字符串("{0} / {1}", 事件玩家.F, 全局.O));
		根据条件跳过(事件玩家.F != 2, 1);
		事件玩家.R = 真;
		根据条件跳过(事件玩家.F < 全局.O, 1);
		事件玩家.N = 事件玩家.F;
		根据条件跳过(事件玩家.F == 全局.O, 1);
		事件玩家.N = 事件玩家.F + 1;
	}
}

规则("shift key is pressed (acceleration)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(技能1)) == 真;
	}

	动作
	{
		设置移动速度(事件玩家, 事件玩家.S);
	}
}

规则("shift key is not pressed (slowdown)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(技能1)) == 假;
	}

	动作
	{
		设置移动速度(事件玩家, 110);
	}
}

规则("spacebar is pressed (fly)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(跳跃)) == 真;
		事件玩家.F >= 全局.Y;
	}

	动作
	{
		设置引力(事件玩家, 0);
	}
}

规则("spacebar is not pressed (gravity)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(跳跃)) == 假;
		事件玩家.F >= 全局.Y;
	}

	动作
	{
		设置引力(事件玩家, 100);
	}
}

规则("right click shows picture")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(辅助攻击模式)) == 真;
		事件玩家.I == 假;
		事件玩家.Z == 0;
		事件玩家.X == 假;
	}

	动作
	{
		根据条件跳过(事件玩家.F < 全局.O, 1);
		事件玩家.N = 事件玩家.F;
		根据条件跳过(事件玩家.F == 全局.O, 1);
		事件玩家.N = 事件玩家.F + 1;
		开始镜头(事件玩家, 全局.C[事件玩家.N], 全局.D[事件玩家.N], 0);
		事件玩家.T = 假;
		根据条件跳过(事件玩家.U == 假, 1);
		事件玩家.O = 真;
		根据条件跳过(事件玩家.G > 0, 3);
		根据条件跳过(相距距离(所选位置(事件玩家), 全局.D[事件玩家.F + 1]) < 50, 1);
		小字体信息(事件玩家, 字符串("{0} {1} {2}", 字符串("对象"), 字符串("远"), 图标字符串(停止)));
		事件玩家.G = 1;
	}
}

规则("right mouse button is not pressed")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(辅助攻击模式)) == 假;
		事件玩家.I == 假;
		事件玩家.Z == 0;
		事件玩家.X == 假;
	}

	动作
	{
		停止镜头(事件玩家);
		清除状态(事件玩家, 定身);
		根据条件跳过(事件玩家.U == 假, 1);
		事件玩家.O = 真;
		根据条件跳过(事件玩家.F < 全局.O, 1);
		事件玩家.N = 事件玩家.F;
		根据条件跳过(事件玩家.F == 全局.O, 1);
		事件玩家.N = 事件玩家.F + 1;
	}
}

规则("left mouse button shows previous objects")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(主要攻击模式)) == 真;
		按钮被按下(事件玩家, 按钮(辅助攻击模式)) == 真;
		事件玩家.I == 假;
		事件玩家.X == 假;
		事件玩家.Z == 0;
	}

	动作
	{
		事件玩家.N -= 1;
		根据条件跳过(事件玩家.N > 0, 4);
		根据条件跳过(事件玩家.F == 全局.O, 1);
		事件玩家.N = 事件玩家.F + 1;
		根据条件跳过(事件玩家.F != 全局.O, 1);
		事件玩家.N = 事件玩家.F;
	}
}

规则("teleport cooldown")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.B == 真;
	}

	动作
	{
		等待(2, 无视条件);
		事件玩家.B = 假;
		等待(0.500, 无视条件);
		如条件为”真“则循环;
	}
}

规则("teleports Team 2 *")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.P[1] = 矢量(-26.333, 6.548, -154.175);
		创建效果(所有玩家(所有队伍), 环, 颜色(蓝色), 全局.P[1], 1.500, 可见);
		全局.P[2] = 矢量(-29.631, 6.548, -152.609);
		创建效果(所有玩家(所有队伍), 环, 颜色(蓝色), 全局.P[2], 1.500, 可见);
		全局.P[3] = 矢量(-47.541, 6.549, -137.322);
		创建效果(所有玩家(所有队伍), 环, 颜色(蓝色), 全局.P[3], 1.500, 可见);
		全局.P[4] = 矢量(-44.377, 6.549, -139.219);
		创建效果(所有玩家(所有队伍), 环, 颜色(蓝色), 全局.P[4], 1.500, 可见);
		全局.P[5] = 矢量(59.078, 10.550, -92.884);
		创建效果(所有玩家(所有队伍), 环, 颜色(蓝色), 全局.P[5], 1.500, 可见);
		全局.P[6] = 矢量(63.275, 10.550, -92.824);
		创建效果(所有玩家(所有队伍), 环, 颜色(蓝色), 全局.P[6], 1.500, 可见);
	}
}

规则("teleport 1")
{
	事件
	{
		持续 - 每名玩家;
		队伍2;
		全部;
	}

	条件
	{
		事件玩家.B == 假;
		全局.P[1] != 0;
		相距距离(事件玩家, 全局.P[1]) <= 2;
	}

	动作
	{
		传送(事件玩家, 全局.P[2]);
		事件玩家.B = 真;
		播放效果(事件玩家, 有益爆炸, 颜色(蓝色), 事件玩家, 5);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
	}
}

规则("teleport 2")
{
	事件
	{
		持续 - 每名玩家;
		队伍2;
		全部;
	}

	条件
	{
		事件玩家.B == 假;
		全局.P[2] != 0;
		相距距离(事件玩家, 全局.P[2]) <= 2;
	}

	动作
	{
		传送(事件玩家, 全局.P[1]);
		事件玩家.B = 真;
		播放效果(事件玩家, 有益爆炸, 颜色(蓝色), 事件玩家, 5);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
	}
}

规则("teleport 3")
{
	事件
	{
		持续 - 每名玩家;
		队伍2;
		全部;
	}

	条件
	{
		事件玩家.B == 假;
		全局.P[3] != 0;
		相距距离(事件玩家, 全局.P[3]) <= 2;
	}

	动作
	{
		传送(事件玩家, 全局.P[4]);
		事件玩家.B = 真;
		播放效果(事件玩家, 有益爆炸, 颜色(蓝色), 事件玩家, 5);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
	}
}

规则("teleport 4")
{
	事件
	{
		持续 - 每名玩家;
		队伍2;
		全部;
	}

	条件
	{
		事件玩家.B == 假;
		全局.P[4] != 0;
		相距距离(事件玩家, 全局.P[4]) <= 2;
	}

	动作
	{
		传送(事件玩家, 全局.P[3]);
		事件玩家.B = 真;
		播放效果(事件玩家, 有益爆炸, 颜色(蓝色), 事件玩家, 5);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
	}
}

规则("teleport 5")
{
	事件
	{
		持续 - 每名玩家;
		队伍2;
		全部;
	}

	条件
	{
		事件玩家.B == 假;
		全局.P[5] != 0;
		相距距离(事件玩家, 全局.P[5]) <= 2;
	}

	动作
	{
		传送(事件玩家, 全局.P[6]);
		事件玩家.B = 真;
		播放效果(事件玩家, 有益爆炸, 颜色(蓝色), 事件玩家, 5);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
	}
}

规则("teleport 6")
{
	事件
	{
		持续 - 每名玩家;
		队伍2;
		全部;
	}

	条件
	{
		事件玩家.B == 假;
		全局.P[6] != 0;
		相距距离(事件玩家, 全局.P[6]) <= 2;
	}

	动作
	{
		传送(事件玩家, 全局.P[5]);
		事件玩家.B = 真;
		播放效果(事件玩家, 有益爆炸, 颜色(蓝色), 事件玩家, 5);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
	}
}

规则("player found all objects (victory!)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.F == 全局.O;
	}

	动作
	{
		事件玩家.Z = 5;
		全局.K = 真;
		全局.B += 1;
		If(全局.B > 5);
			全局.B = 1;
		End;
		停止加速(事件玩家);
		设置状态(事件玩家, 无, 定身, 9999);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 30);
		播放效果(事件玩家, 环状爆炸, 颜色(亮紫色), 全局.D[事件玩家.F], 6);
		播放效果(事件玩家, 有益爆炸, 颜色(橙色), 全局.D[事件玩家.F], 10);
		播放效果(事件玩家, 有益选择效果 , 颜色(橙色), 全局.D[事件玩家.F], 10);
		设置引力(事件玩家, 100);
		等待(3, 无视条件);
		事件玩家.Z = 1;
	}
}

规则("everyone is watching the winner 1 *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.W == 假;
		事件玩家.Z == 0;
		全局.W == 真;
		事件玩家.F >= 2;
		全局.B == 1;
	}

	动作
	{
		设置状态(事件玩家, 无, 定身, 9999);
		事件玩家.X = 真;
		开始镜头(事件玩家, 矢量(41.899, 798.224, -58.182), 矢量(41.861, 798.272, -58.285), 0);
		等待(0.100, 无视条件);
		全局.K = 假;
		开始镜头(事件玩家, 矢量(31.813, 798.224, -54.406), 矢量(13.589, 820.892, -103.090), 1.500);
		等待(2, 无视条件);
		停止镜头(事件玩家);
		开始镜头(事件玩家, 矢量(38.749, 798.299, -60.213), 矢量(36.261, 799.196, -58.798), 0);
		等待(0.100, 无视条件);
		开始镜头(事件玩家, 矢量(37.878, 798.613, -59.718), 矢量(36.261, 799.196, -58.798), 1.500);
		等待(1.500, 无视条件);
		等待(0.100, 无视条件);
		等待(0.090, 无视条件);
		等待(0.120, 无视条件);
		等待(0.090, 无视条件);
		等待(0.500, 无视条件);
		清除状态(事件玩家, 定身);
		全局.W = 假;
		停止镜头(事件玩家);
		事件玩家.X = 假;
	}
}

规则("everyone is watching the winner 2 *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.W == 假;
		事件玩家.Z == 0;
		全局.W == 真;
		事件玩家.F >= 2;
		全局.B == 2;
	}

	动作
	{
		设置状态(事件玩家, 无, 定身, 9999);
		事件玩家.X = 真;
		开始镜头(事件玩家, 矢量(21.059, 782.918, -45.328), 矢量(36.731, 799.130, -59.135), 0);
		等待(0.100, 无视条件);
		全局.K = 假;
		等待(0.200, 无视条件);
		开始镜头(事件玩家, 矢量(16.101, 783.360, -55.517), 矢量(36.731, 799.130, -59.135), 2);
		等待(0.200, 无视条件);
		开始镜头(事件玩家, 矢量(20.612, 787.106, -70.931), 矢量(36.731, 799.130, -59.135), 2);
		等待(0.200, 无视条件);
		开始镜头(事件玩家, 矢量(35.467, 787.873, -82.794), 矢量(36.731, 799.130, -59.135), 2);
		等待(0.200, 无视条件);
		开始镜头(事件玩家, 矢量(59.973, 788.279, -77.269), 矢量(36.731, 799.130, -59.135), 2);
		等待(0.200, 无视条件);
		开始镜头(事件玩家, 矢量(62.083, 788.847, -72.908), 矢量(36.731, 799.130, -59.135), 2);
		等待(2, 无视条件);
		开始镜头(事件玩家, 矢量(37.878, 798.613, -59.718), 矢量(36.261, 799.196, -58.798), 3);
		等待(1.600, 无视条件);
		等待(0.100, 无视条件);
		等待(0.090, 无视条件);
		等待(0.120, 无视条件);
		等待(0.090, 无视条件);
		等待(0.500, 无视条件);
		清除状态(事件玩家, 定身);
		全局.W = 假;
		停止镜头(事件玩家);
		事件玩家.X = 假;
	}
}

规则("everyone is watching the winner 3 *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.W == 假;
		事件玩家.Z == 0;
		全局.W == 真;
		事件玩家.F >= 2;
		全局.B == 3;
	}

	动作
	{
		设置状态(事件玩家, 无, 定身, 9999);
		事件玩家.X = 真;
		开始镜头(事件玩家, 矢量(32.541, 798.453, -56.659), 矢量(32.675, 798.708, -56.743), 0);
		等待(0.250, 无视条件);
		全局.K = 假;
		开始镜头(事件玩家, 矢量(32.541, 775.120, -56.659), 矢量(46.478, 801.649, -65.381), 1);
		等待(1.500, 无视条件);
		停止镜头(事件玩家);
		开始镜头(事件玩家, 矢量(40.032, 801.941, -60.896), 矢量(39.584, 802.103, -60.643), 0);
		等待(0.100, 无视条件);
		开始镜头(事件玩家, 矢量(40.032, 797.797, -60.896), 矢量(36.439, 799.100, -58.862), 7);
		等待(2, 无视条件);
		等待(0.100, 无视条件);
		等待(0.090, 无视条件);
		等待(0.120, 无视条件);
		等待(0.090, 无视条件);
		等待(0.500, 无视条件);
		清除状态(事件玩家, 定身);
		全局.W = 假;
		停止镜头(事件玩家);
		事件玩家.X = 假;
	}
}

规则("everyone is watching the winner 4 *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.W == 假;
		事件玩家.Z == 0;
		全局.W == 真;
		事件玩家.F >= 2;
		全局.B == 4;
	}

	动作
	{
		设置状态(事件玩家, 无, 定身, 9999);
		事件玩家.X = 真;
		开始镜头(事件玩家, 矢量(31.626, 796.262, -56.272), 矢量(36.799, 799.153, -59.179), 0);
		等待(0.100, 无视条件);
		全局.K = 假;
		等待(0.200, 无视条件);
		开始镜头(事件玩家, 矢量(32.165, 797.030, -59.014), 矢量(36.799, 799.153, -59.179), 3);
		等待(0.200, 无视条件);
		开始镜头(事件玩家, 矢量(33.610, 797.540, -61.924), 矢量(36.799, 799.153, -59.179), 3);
		等待(0.200, 无视条件);
		开始镜头(事件玩家, 矢量(37.750, 798.230, -62.289), 矢量(36.799, 799.153, -59.179), 3);
		等待(0.200, 无视条件);
		开始镜头(事件玩家, 矢量(38.810, 798.177, -60.273), 矢量(36.799, 799.153, -59.179), 3);
		等待(2, 无视条件);
		开始镜头(事件玩家, 矢量(37.878, 798.613, -59.718), 矢量(36.261, 799.196, -58.798), 1);
		等待(1.500, 无视条件);
		等待(0.100, 无视条件);
		等待(0.090, 无视条件);
		等待(0.120, 无视条件);
		等待(0.090, 无视条件);
		等待(0.500, 无视条件);
		清除状态(事件玩家, 定身);
		全局.W = 假;
		停止镜头(事件玩家);
		事件玩家.X = 假;
	}
}

规则("everyone is watching the winner 5 *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.W == 假;
		事件玩家.Z == 0;
		全局.W == 真;
		事件玩家.F >= 2;
		全局.B == 5;
	}

	动作
	{
		设置状态(事件玩家, 无, 定身, 9999);
		事件玩家.X = 真;
		开始镜头(事件玩家, 矢量(36.989, 797.880, -59.990), 矢量(37.659, 799.629, -58.742), 0);
		等待(0.250, 无视条件);
		全局.K = 假;
		开始镜头(事件玩家, 矢量(36.934, 798.124, -59.808), 矢量(37.175, 798.912, -59.259), 1);
		等待(1.500, 无视条件);
		开始镜头(事件玩家, 矢量(38.456, 798.310, -60.026), 矢量(38.799, 799.100, -59.602), 3);
		等待(0.300, 无视条件);
		开始镜头(事件玩家, 矢量(38.391, 798.344, -60.062), 矢量(36.831, 798.900, -59.217), 3);
		等待(0.600, 无视条件);
		开始镜头(事件玩家, 矢量(39.826, 797.832, -60.838), 矢量(36.831, 798.900, -59.217), 1);
		等待(2, 无视条件);
		等待(0.100, 无视条件);
		等待(0.090, 无视条件);
		等待(0.120, 无视条件);
		等待(0.090, 无视条件);
		等待(0.500, 无视条件);
		清除状态(事件玩家, 定身);
		全局.W = 假;
		停止镜头(事件玩家);
		事件玩家.X = 假;
	}
}

规则("automatically show next object")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.T == 真;
		事件玩家.U == 假;
	}

	动作
	{
		等待(3, 无视条件);
		如条件为“假”则中止;
		事件玩家.Q = 真;
		设置状态(事件玩家, 无, 定身, 5);
		开始镜头(事件玩家, 全局.C[事件玩家.F + 1], 全局.D[事件玩家.F + 1], 0);
		根据条件跳过(事件玩家.F != 0, 1);
		大字体信息(事件玩家, 字符串("{0} {1}", 字符串("寻找"), 字符串("对象")));
		根据条件跳过(事件玩家.F == 0, 1);
		大字体信息(事件玩家, 字符串("{0} {1}", 字符串("寻找"), 字符串("下一批对象")));
		等待(5, 无视条件);
		事件玩家.T = 假;
		停止镜头(事件玩家);
		事件玩家.Q = 假;
	}
}

规则("cancel auto preview")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.T == 真;
		事件玩家.Q == 真;
		事件玩家.Z == 0;
		事件玩家.X == 假;
	}

	动作
	{
		根据条件跳过(按钮被按下(事件玩家, 按钮(主要攻击模式)) != 真, 4);
		事件玩家.T = 假;
		清除状态(事件玩家, 定身);
		停止镜头(事件玩家);
		事件玩家.Q = 假;
		根据条件跳过(按钮被按下(事件玩家, 按钮(辅助攻击模式)) != 真, 4);
		事件玩家.T = 假;
		清除状态(事件玩家, 定身);
		停止镜头(事件玩家);
		事件玩家.Q = 假;
		根据条件跳过(按钮被按下(事件玩家, 按钮(跳跃)) != 真, 4);
		事件玩家.T = 假;
		清除状态(事件玩家, 定身);
		停止镜头(事件玩家);
		事件玩家.Q = 假;
		根据条件跳过(按钮被按下(事件玩家, 按钮(终极技能)) != 真, 4);
		事件玩家.T = 假;
		清除状态(事件玩家, 定身);
		停止镜头(事件玩家);
		事件玩家.Q = 假;
		根据条件跳过(按钮被按下(事件玩家, 按钮(技能2)) != 真, 4);
		事件玩家.T = 假;
		清除状态(事件玩家, 定身);
		停止镜头(事件玩家);
		事件玩家.Q = 假;
	}
}

规则("hint near the first object *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		相距距离(事件玩家, 全局.D[1]) <= 5;
		事件玩家.F == 0;
	}

	动作
	{
		小字体信息(事件玩家, 字符串("{0} {1} {2}", 字符串("互动"), 字符串("{0}！", 字符串("此处")), 字符串("({0})", 输入绑定字符串(按钮(互动)))));
	}
}

规则("message about right button")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.M == 真;
	}

	动作
	{
		等待(9, 无视条件);
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("{0} - {1}", 输入绑定字符串(按钮(辅助攻击模式)), 字符串("当前目标")), 图标字符串(眼睛)));
		事件玩家.M = 假;
	}
}

规则("message about running")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.R == 真;
	}

	动作
	{
		等待(8, 无视条件);
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("{0} - {1}", 自定义字符串("[Shift]"), 字符串("运行")), 图标字符串(箭矢)));
		事件玩家.R = 假;
	}
}

规则("message about flying")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.F == 全局.Y;
	}

	动作
	{
		等待(8, 无视条件);
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("{0} - {1}", 字符串("跳跃"), 字符串("飞行")), 图标字符串(光晕)));
		等待(30, 无视条件);
		如条件为“假”则中止;
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("{0} - {1}", 字符串("跳跃"), 字符串("飞行")), 图标字符串(光晕)));
		等待(30, 无视条件);
		如条件为“假”则中止;
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("{0} - {1}", 字符串("跳跃"), 字符串("飞行")), 图标字符串(光晕)));
		等待(30, 无视条件);
		如条件为“假”则中止;
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("{0} - {1}", 字符串("跳跃"), 字符串("飞行")), 图标字符串(光晕)));
		等待(30, 无视条件);
		如条件为“假”则中止;
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("{0} - {1}", 字符串("跳跃"), 字符串("飞行")), 图标字符串(光晕)));
	}
}

规则("player left game")
{
	事件
	{
		玩家离开比赛;
		双方;
		全部;
	}

	动作
	{
		全局.K = 假;
		消除效果(事件玩家.E[1]);
		消除效果(事件玩家.E[2]);
		消除效果(事件玩家.E[3]);
		消除效果(事件玩家.E[4]);
		消除效果(事件玩家.E[5]);
		消除效果(事件玩家.E[6]);
		消除效果(事件玩家.E[7]);
		消除效果(事件玩家.E[8]);
		根据条件跳过(全局.L[1] != 事件玩家, 1);
		所有玩家(所有队伍).K = 3;
		根据条件跳过(全局.L[2] != 事件玩家, 1);
		所有玩家(所有队伍).K = 3;
		根据条件跳过(全局.L[3] != 事件玩家, 1);
		所有玩家(所有队伍).K = 3;
		设置慢动作(100);
		消除HUD文本(事件玩家.AA);
	}
}

规则("speed upgrade")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.U == 真;
		事件玩家.F != 全局.Y;
		事件玩家.F != 全局.O;
	}

	动作
	{
		播放效果(事件玩家, 环状爆炸, 颜色(天蓝色), 全局.D[事件玩家.F], 6);
		创建光束效果(事件玩家, 有益光束, 全局.D[事件玩家.F], 事件玩家, 颜色(天蓝色), 可见，位置和半径);
		事件玩家.E[1] = 最后创建的实体;
		创建效果(事件玩家, 能量声音, 颜色(白色), 事件玩家, 30, 可见，位置和半径);
		事件玩家.E[2] = 最后创建的实体;
		根据条件跳过(事件玩家.S > 410, 1);
		事件玩家.S += 全局.V;
		等待(1, 无视条件);
		消除效果(事件玩家.E[1]);
		消除效果(事件玩家.E[2]);
		小字体信息(事件玩家, 字符串("{0} {1}", 图标字符串(箭头：向上), 字符串("{0}！", 字符串("等级提升"))));
		大字体信息(事件玩家, 字符串("{0} {1} {2}", 字符串("速度"), 字符串("{0}！", 字符串("升级")), 图标字符串(箭矢)));
		等待(1, 无视条件);
		事件玩家.U = 假;
		根据条件跳过(事件玩家.O == 真, 1);
		事件玩家.T = 真;
		根据条件跳过(事件玩家.O == 假, 1);
		事件玩家.O = 假;
		事件玩家.R = 真;
	}
}

规则("flying upgrade")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.U == 真;
		事件玩家.F == 全局.Y;
	}

	动作
	{
		播放效果(事件玩家, 环状爆炸, 颜色(亮紫色), 全局.D[事件玩家.F], 7);
		创建光束效果(事件玩家, 有益光束, 全局.D[事件玩家.F], 事件玩家, 颜色(橙色), 可见，位置和半径);
		事件玩家.E[1] = 最后创建的实体;
		创建效果(事件玩家, 能量声音, 颜色(白色), 事件玩家, 30, 可见，位置和半径);
		事件玩家.E[2] = 最后创建的实体;
		事件玩家.Y = 真;
		等待(1, 无视条件);
		消除效果(事件玩家.E[1]);
		消除效果(事件玩家.E[2]);
		小字体信息(事件玩家, 字符串("{0} {1}", 图标字符串(箭头：向上), 字符串("{0}！", 字符串("等级提升"))));
		大字体信息(事件玩家, 字符串("{0} {1} {2}", 字符串("飞行"), 字符串("{0}！", 字符串("升级")), 图标字符串(光晕)));
		等待(1, 无视条件);
		事件玩家.U = 假;
		根据条件跳过(事件玩家.O == 真, 1);
		事件玩家.T = 真;
		根据条件跳过(事件玩家.O == 假, 1);
		事件玩家.O = 假;
	}
}

规则("rating")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		全局.R[1] == 真;
	}

	动作
	{
		根据条件跳过(全局.R[2] < 1, 4);
		根据条件跳过(全局.R[3] >= 1, 3);
		创建HUD文本(所有玩家(所有队伍), 无, 无, 字符串("{0} {1}", 字符串("最佳"), 字符串("{0}:", 字符串("玩家"))), 右边, 0, 颜色(白色), 颜色(白色), 颜色(橙色), 可见和字符串, 默认可见度);
		创建HUD文本(所有玩家(所有队伍), 无, 无, 字符串("{0} {1} {2}", 英雄图标字符串(所用英雄(全局.L[1])), 全局.L[1], 字符串("{0} / {1}", 全局.L[1].F, 全局.O)), 右边, 1, 颜色(白色),
			颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		全局.R[3] = 1;
		根据条件跳过(全局.R[2] < 2, 3);
		根据条件跳过(全局.R[3] >= 2, 2);
		创建HUD文本(所有玩家(所有队伍), 无, 无, 字符串("{0} {1} {2}", 英雄图标字符串(所用英雄(全局.L[2])), 全局.L[2], 字符串("{0} / {1}", 全局.L[2].F, 全局.O)), 右边, 2, 颜色(白色),
			颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		全局.R[3] = 2;
		根据条件跳过(全局.R[2] != 3, 3);
		根据条件跳过(全局.R[3] == 3, 2);
		创建HUD文本(所有玩家(所有队伍), 无, 无, 字符串("{0} {1} {2}", 英雄图标字符串(所用英雄(全局.L[3])), 全局.L[3], 字符串("{0} / {1}", 全局.L[3].F, 全局.O)), 右边, 3, 颜色(白色),
			颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		全局.R[3] = 3;
		等待(1, 无视条件);
		根据条件循环(全局.R[2] > 全局.R[3]);
		全局.R[1] = 假;
	}
}

规则("rating update")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.K > 0;
	}

	动作
	{
		根据条件跳过(全局.L[1] != 事件玩家, 2);
		事件玩家.K = 0;
		中止;
		根据条件跳过(全局.L[2] != 事件玩家, 5);
		根据条件跳过(事件玩家.F <= 全局.L[1].F, 4);
		全局.L[2] = 全局.L[1];
		全局.L[1] = 事件玩家;
		事件玩家.K = 0;
		中止;
		根据条件跳过(全局.L[3] != 事件玩家, 3);
		根据条件跳过(事件玩家.F <= 全局.L[2].F, 2);
		全局.L[3] = 全局.L[2];
		全局.L[2] = 事件玩家;
		根据条件跳过(全局.L[1] == 事件玩家, 4);
		根据条件跳过(全局.L[2] == 事件玩家, 3);
		根据条件跳过(全局.L[3] == 事件玩家, 2);
		根据条件跳过(事件玩家.F <= 全局.L[3].F, 1);
		全局.L[3] = 事件玩家;
		等待(0.050, 无视条件);
		事件玩家.K -= 1;
		如条件为”真“则循环;
	}
}

规则("search time")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.W == 假;
		事件玩家.G > 0;
	}

	动作
	{
		等待(30, 无视条件);
		事件玩家.G -= 1;
		如条件为”真“则循环;
	}
}

规则("message about previous objects")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.F >= 10;
	}

	动作
	{
		等待(25, 无视条件);
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("{0} = {1}", 字符串("{0} + {1}", 输入绑定字符串(按钮(辅助攻击模式)), 输入绑定字符串(按钮(主要攻击模式))), 字符串("对象")), 图标字符串(回收)));
	}
}

规则("graphic settings warning 1 *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.F == 全局.AA;
	}

	动作
	{
		等待(3, 无视条件);
		如条件为“假”则中止;
		消除HUD文本(事件玩家.AA);
		等待(0.250, 无视条件);
		创建HUD文本(事件玩家, 图标字符串(眼睛), 自定义字符串("Set medium or higher model detail settings to see all objects"), 自定义字符串(
			"Options > Video > Graphics quality > Advanced > Model Detail"), 顶部, 1, 颜色(橙色), 颜色(白色), 颜色(橙色), 字符串, 默认可见度);
		事件玩家.AA = 上一个文本ID;
	}
}

规则("graphic settings warning 2 *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.F == 全局.AA + 1;
	}

	动作
	{
		消除HUD文本(事件玩家.AA);
	}
}

禁用 规则("antispam 1")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		正在与人交流(事件玩家) == 真;
		事件玩家.I == 假;
		事件玩家.F < 50;
	}

	动作
	{
		根据条件中止(正在使用表情交流(事件玩家) == 真);
		事件玩家.J += 1;
		If(事件玩家.J > 2);
			If(事件玩家.J < 8);
				设置状态(事件玩家, 无, 沉睡, 事件玩家.J + 2);
			Else;
				设置状态(事件玩家, 无, 沉睡, 10);
			End;
			小字体信息(事件玩家, 自定义字符串("Please do not use voice lines too often"));
		End;
	}
}

禁用 规则("antispam 2")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	动作
	{
		等待(100, 无视条件);
		If(事件玩家.J > 1);
			事件玩家.J -= 1;
		End;
	}
}
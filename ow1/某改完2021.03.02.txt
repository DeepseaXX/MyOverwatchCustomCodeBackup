设置
{
	主程序
	{
		描述: "这是哪儿——努巴尼★在地图上寻找神秘地点 ★点击右键可以看到一个神秘图片，找到这个地方，对物品按下互动键（默认F）得到下一张照片，先找完的人获胜！ ★建议设置为中高模型特效获取更好的游戏体验★游戏结束后会获得奖励 ★按[shift]奔跑 ★提示和更多地图在owmot.net搜索★ Made by Foren#2660 ★ 国服搬运工：KDLin#5710"
	}

	大厅
	{
		地图轮换: 暂停轮换
		比赛结束后转换队伍: 否
		比赛语音聊天: 启用
		观战者人数上限: 3
		返回大厅: 从不
	}

	模式
	{
		突击模式
		{
			启用地图
			{
				努巴尼
			}
		}

综合
		{
			复活时间: 0%
			急救包刷新: 禁用
			比赛模式开始: 即时
			消灭提示: 关闭
			消灭镜头: 关闭
			英雄限制: 关闭
		}
	}

	英雄
	{
		综合
		{
			主要攻击模式: 关闭
			仅爆头有效: 开启
			战斗时终极技能充能速度: 0%
			技能冷却时间: 50%
			移动速度: 110%
			终极技能充能速度: 10%
			终极技能自动充能速度: 0%

			D.Va
			{
				主要攻击模式: 关闭
				微型飞弹: 关闭
				推进器: 关闭
				终极技能（自毁）: 关闭
				防御矩阵: 关闭
			}

			半藏
			{
				主要攻击模式: 关闭
				岚: 关闭
				终极技能（竜）: 关闭
				跃: 关闭
				音: 关闭
			}

			卢西奥
			{
				主要攻击模式: 关闭
				切歌: 关闭
				强音: 关闭
				终极技能（音障）: 关闭
				音波: 关闭
			}

			回声
			{
				主要攻击模式: 关闭
				滑翔: 关闭
				终极技能（人格复制）: 关闭
				聚焦光线: 关闭
				重生时终极技能充能完毕: 开启
				飞行: 关闭
				黏性炸弹: 关闭
			}

			堡垒
			{
				主要攻击模式: 关闭
				切换模式: 关闭
				终极技能（坦克模式）: 关闭
				自我修复: 关闭
			}

			士兵：76
			{
				主要攻击模式: 关闭
				生物力场: 关闭
				疾跑: 关闭
				终极技能（战术目镜）: 关闭
				螺旋飞弹: 关闭
			}

			天使
			{
				主要攻击模式: 关闭
				守护天使: 关闭
				终极技能（女武神）: 关闭
				自动恢复: 关闭
				辅助攻击模式: 关闭
				重生: 关闭
			}

			奥丽莎
			{
				主要攻击模式: 关闭
				强固防御: 关闭
				站住别动: 关闭
				终极技能（超充能器）: 关闭
				防护屏障: 关闭
			}

			安娜
			{
				主要攻击模式: 关闭
				生物手雷: 关闭
				终极技能（纳米激素）: 关闭
				麻醉镖: 关闭
			}

			巴蒂斯特
			{
				主要攻击模式: 关闭
				愈合冲击: 关闭
				终极技能（增幅矩阵）: 关闭
				维生力场: 关闭
				辅助攻击模式: 关闭
			}

			布丽吉塔
			{
				主要攻击模式: 关闭
				屏障护盾: 关闭
				恢复包: 关闭
				流星飞锤: 关闭
				终极技能（集结号令）: 关闭
				能量盾击: 关闭
			}

			托比昂
			{
				主要攻击模式: 关闭
				热力过载: 关闭
				终极技能（熔火核心）: 关闭
				辅助攻击模式: 关闭
				部署炮台: 关闭
			}

			末日铁拳
			{
				上勾重拳: 关闭
				主要攻击模式: 关闭
				火箭重拳: 关闭
				终极技能（毁天灭地）: 关闭
				裂地重拳: 关闭
			}

			查莉娅
			{
				主要攻击模式: 关闭
				投射屏障: 关闭
				无需装弹: 开启
				粒子屏障: 关闭
				辅助攻击模式: 关闭
			}

			死神
			{
				主要攻击模式: 关闭
				幽灵形态: 关闭
				暗影步: 关闭
				终极技能（死亡绽放）: 关闭
			}

			法老之鹰
			{
				主要攻击模式: 关闭
				悬浮背包: 关闭
				推进背包: 关闭
				终极技能（火箭弹幕）: 关闭
				震荡冲击: 关闭
			}

			温斯顿
			{
				主要攻击模式: 关闭
				喷射背包: 关闭
				屏障发射器: 关闭
				终极技能（原始暴怒）: 关闭
			}

			源氏
			{
				主要攻击模式: 关闭
				影: 关闭
				终极技能（斩）: 关闭
				辅助攻击模式: 关闭
				闪: 关闭
			}

			狂鼠
			{
				主要攻击模式: 关闭
				捕兽夹: 关闭
				终极技能（炸弹轮胎）: 关闭
				震荡地雷: 关闭
			}

			猎空
			{
				主要攻击模式: 关闭
				终极技能（脉冲炸弹）: 关闭
				闪回: 关闭
				闪现: 关闭
			}

			破坏球
			{
				主要攻击模式: 关闭
				动力铁球: 关闭
				工程抓钩: 关闭
				感应护盾: 关闭
				终极技能（地雷禁区）: 关闭
				重力坠击: 关闭
			}

			禅雅塔
			{
				主要攻击模式: 关闭
				乱: 关闭
				谐: 关闭
				辅助攻击模式: 关闭
			}

			秩序之光
			{
				主要攻击模式: 关闭
				传送面板: 关闭
				哨戒炮: 关闭
				终极技能（光子屏障）: 关闭
				辅助攻击模式: 关闭
			}

			美
			{
				主要攻击模式: 关闭
				冰墙: 关闭
				急冻: 关闭
				终极技能（暴雪）: 关闭
				辅助攻击模式: 关闭
			}

			艾什
			{
				主要攻击模式: 关闭
				延时雷管: 关闭
				短筒猎枪: 关闭
				终极技能（召唤鲍勃）: 关闭
			}

			莫伊拉
			{
				主要攻击模式: 关闭
				消散: 关闭
				生化之球: 关闭
				终极技能（聚合射线）: 关闭
				辅助攻击模式: 关闭
			}

			莱因哈特
			{
				主要攻击模式: 关闭
				冲锋: 关闭
				屏障力场: 关闭
				烈焰打击: 关闭
				终极技能（裂地猛击）: 关闭
			}

			西格玛
			{
				主要攻击模式: 关闭
				动能俘获: 关闭
				实验屏障: 关闭
				终极技能（引力乱流）: 关闭
				质量吸附: 关闭
			}

			路霸
			{
				主要攻击模式: 关闭
				呼吸器: 关闭
				终极技能（鸡飞狗跳）: 关闭
				辅助攻击模式: 关闭
				链钩: 关闭
			}

			麦克雷
			{
				主要攻击模式: 关闭
				战术翻滚: 关闭
				终极技能（神射手）: 关闭
				辅助攻击模式: 关闭
				闪光弹: 关闭
			}

			黑影
			{
				主要攻击模式: 关闭
				位移传动: 关闭
				终极技能（电磁脉冲）: 关闭
				隐秘潜行: 关闭
				黑客入侵: 关闭
			}

			黑百合
			{
				主要攻击模式: 关闭
				剧毒诡雷: 关闭
				抓钩: 关闭
				终极技能（红外侦测）: 关闭
			}

			禁用英雄
			{
				半藏
				破坏球
			}
		}
	}
}

变量
{
	全局:
		26: AA

	玩家:
		26: AA
}

规则("// copy and paste the following line into the game title: *")
{
	事件
	{
		持续 - 全局;
	}
}

规则("WHERE IS IT? ★ Numbani ★")
{
	事件
	{
		持续 - 全局;
	}
}

规则("// all maps and additional info: bit.do/whereisit")
{
	事件
	{
		持续 - 全局;
	}
}

规则("// \"WHERE IS IT?\" ver. 1.2")
{
	事件
	{
		持续 - 全局;
	}
}

规则("// original mode is made by Foren#2660")
{
	事件
	{
		持续 - 全局;
	}
}

规则("all objects *")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.N = 0;
		全局.N += 1;
		全局.C[全局.N] = 矢量(-17.957, 5.820, 6.065);
		全局.D[全局.N] = 矢量(-15.620, 5.930, 6.006);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-26.817, 2.022, 18.280);
		全局.D[全局.N] = 矢量(-26.770, 2.375, 18.334);
		全局.N += 1;
		全局.C[全局.N] = 矢量(49.149, 0.758, 28.020);
		全局.D[全局.N] = 矢量(49.521, 1.056, 28.274);
		全局.N += 1;
		全局.C[全局.N] = 矢量(127.087, -3.302, 12.564);
		全局.D[全局.N] = 矢量(126.722, -3.163, 12.235);
		全局.N += 1;
		全局.C[全局.N] = 矢量(103.364, -0.915, 11.117);
		全局.D[全局.N] = 矢量(103.491, -1.073, 11.244);
		全局.N += 1;
		全局.C[全局.N] = 矢量(85.439, 0.742, -3.866);
		全局.D[全局.N] = 矢量(85.279, 0.952, -4.153);
		全局.N += 1;
		全局.C[全局.N] = 矢量(64.670, -0.778, 36.888);
		全局.D[全局.N] = 矢量(64.348, -0.623, 37.162);
		全局.N += 1;
		全局.C[全局.N] = 矢量(24.057, 1.628, 9.158);
		全局.D[全局.N] = 矢量(24.071, 1.453, 9.201);
		全局.N += 1;
		全局.C[全局.N] = 矢量(173.432, -5.659, 57.247);
		全局.D[全局.N] = 矢量(174.061, -5.341, 57.704);
		全局.N += 1;
		全局.C[全局.N] = 矢量(240.334, 3.598, 22.728);
		全局.D[全局.N] = 矢量(240.292, 2.459, 22.727);
		全局.N += 1;
		全局.C[全局.N] = 矢量(123.821, -2.386, 26.315);
		全局.D[全局.N] = 矢量(123.628, -2.214, 26.468);
		全局.N += 1;
		全局.C[全局.N] = 矢量(24.155, 2.998, 23.131);
		全局.D[全局.N] = 矢量(24.455, 2.998, 23.124);
		全局.N += 1;
		全局.C[全局.N] = 矢量(123.348, -2.296, 6.890);
		全局.D[全局.N] = 矢量(123.311, -3.896, 6.640);
		全局.N += 1;
		全局.C[全局.N] = 矢量(66.582, 0.104, -5.732);
		全局.D[全局.N] = 矢量(66.567, -0.915, -5.758);
		全局.N += 1;
		全局.C[全局.N] = 矢量(151.120, 3.625, 23.420);
		全局.D[全局.N] = 矢量(152.127, 3.704, 24.316);
		全局.N += 1;
		全局.C[全局.N] = 矢量(156.621, -5.179, 54.947);
		全局.D[全局.N] = 矢量(156.339, -4.876, 54.874);
		全局.N += 1;
		全局.C[全局.N] = 矢量(187.533, -0.856, -15.530);
		全局.D[全局.N] = 矢量(187.652, -0.583, -15.497);
		全局.N += 1;
		全局.C[全局.N] = 矢量(61.183, -0.181, -6.366);
		全局.D[全局.N] = 矢量(61.061, -0.177, -6.498);
		全局.N += 1;
		全局.C[全局.N] = 矢量(9.392, 1.714, 31.723);
		全局.D[全局.N] = 矢量(9.337, 0.365, 31.722);
		全局.N += 1;
		全局.C[全局.N] = 矢量(104.270, -0.371, 11.519);
		全局.D[全局.N] = 矢量(104.477, -0.338, 11.734);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-35.425, 3.997, 12.119);
		全局.D[全局.N] = 矢量(-35.660, 3.997, 12.165);
		全局.N += 1;
		全局.C[全局.N] = 矢量(169.942, 5.360, 1.471);
		全局.D[全局.N] = 矢量(169.936, 5.030, 1.465);
		全局.N += 1;
		全局.C[全局.N] = 矢量(127.287, -2.987, -11.088);
		全局.D[全局.N] = 矢量(127.001, -2.772, -11.606);
		全局.N += 1;
		全局.C[全局.N] = 矢量(82.028, 1.360, 8.107);
		全局.D[全局.N] = 矢量(82.070, 0.041, 8.149);
		全局.N += 1;
		全局.C[全局.N] = 矢量(198.333, -3.257, -4.459);
		全局.D[全局.N] = 矢量(198.296, -2.911, -4.368);
		全局.N += 1;
		全局.C[全局.N] = 矢量(80.077, 7.500, -24.828);
		全局.D[全局.N] = 矢量(80.100, 7.951, -25.268);
		全局.N += 1;
		全局.C[全局.N] = 矢量(131.071, 3.282, 19.944);
		全局.D[全局.N] = 矢量(131.114, 3.952, 19.683);
		全局.N += 1;
		全局.C[全局.N] = 矢量(102.681, 8.642, 0.705);
		全局.D[全局.N] = 矢量(102.648, 6.543, 0.674);
		全局.N += 1;
		全局.C[全局.N] = 矢量(73.272, 0.643, 17.058);
		全局.D[全局.N] = 矢量(73.548, 0.267, 16.786);
		全局.N += 1;
		全局.C[全局.N] = 矢量(100.460, 1.171, 18.491);
		全局.D[全局.N] = 矢量(100.072, 1.170, 18.449);
		全局.N += 1;
		全局.C[全局.N] = 矢量(113.281, 11.534, 23.170);
		全局.D[全局.N] = 矢量(112.910, 11.785, 23.132);
		全局.N += 1;
		全局.C[全局.N] = 矢量(46.829, 9.520, 12.937);
		全局.D[全局.N] = 矢量(46.232, 9.968, 13.014);
		全局.N += 1;
		全局.C[全局.N] = 矢量(135.682, 2.021, -11.317);
		全局.D[全局.N] = 矢量(135.751, 2.004, -10.842);
		全局.N += 1;
		全局.C[全局.N] = 矢量(80.274, 2.769, -37.531);
		全局.D[全局.N] = 矢量(80.277, 0.264, -37.250);
		全局.N += 1;
		全局.C[全局.N] = 矢量(23.168, 7.468, 7.766);
		全局.D[全局.N] = 矢量(23.022, 7.573, 7.925);
		全局.N += 1;
		全局.C[全局.N] = 矢量(107.395, -0.409, 30.960);
		全局.D[全局.N] = 矢量(107.555, -0.413, 31.139);
		全局.N += 1;
		全局.C[全局.N] = 矢量(2.799, 9.432, 5.298);
		全局.D[全局.N] = 矢量(2.570, 9.954, 5.301);
		全局.N += 1;
		全局.C[全局.N] = 矢量(124.531, -3.217, 18.003);
		全局.D[全局.N] = 矢量(124.820, -3.971, 18.068);
		全局.N += 1;
		全局.C[全局.N] = 矢量(48.533, 8.386, 26.442);
		全局.D[全局.N] = 矢量(48.752, 8.580, 26.594);
		全局.N += 1;
		全局.C[全局.N] = 矢量(175.286, 0.331, 6.183);
		全局.D[全局.N] = 矢量(175.376, 0.335, 6.187);
		全局.N += 1;
		全局.C[全局.N] = 矢量(65.595, -0.189, 39.900);
		全局.D[全局.N] = 矢量(65.530, -1.538, 39.922);
		全局.N += 1;
		全局.C[全局.N] = 矢量(130.543, -3.047, -3.751);
		全局.D[全局.N] = 矢量(130.803, -2.801, -3.787);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-38.345, 7.804, 4.562);
		全局.D[全局.N] = 矢量(-38.431, 7.819, 4.585);
		全局.N += 1;
		全局.C[全局.N] = 矢量(89.995, 16.755, -6.383);
		全局.D[全局.N] = 矢量(89.160, 18.608, -5.489);
		全局.N += 1;
		全局.C[全局.N] = 矢量(-21.837, 2.550, 6.797);
		全局.D[全局.N] = 矢量(-21.934, 2.376, 6.731);
		全局.N += 1;
		全局.C[全局.N] = 矢量(65.486, 6.331, 18.054);
		全局.D[全局.N] = 矢量(65.599, 6.333, 18.152);
		全局.N += 1;
		全局.C[全局.N] = 矢量(243.009, 1.346, 22.700);
		全局.D[全局.N] = 矢量(242.856, 1.252, 22.702);
		全局.N += 1;
		全局.C[全局.N] = 矢量(49.323, 11.100, 5.851);
		全局.D[全局.N] = 矢量(50.500, 11.873, 4.591);
		全局.N += 1;
		全局.C[全局.N] = 矢量(17.609, 3.857, 40.946);
		全局.D[全局.N] = 矢量(17.501, 5.117, 40.688);
		全局.N += 1;
		全局.C[全局.N] = 矢量(136.710, -0.849, 1.920);
		全局.D[全局.N] = 矢量(137.432, -0.842, 0.924);
	}
}

规则("total number of objects")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.O = 全局.N;
	}
}

规则("beginning of the game *")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.V = 30;
		修改全局变量(J, 添加至数组, 5);
		修改全局变量(J, 添加至数组, 10);
		修改全局变量(J, 添加至数组, 15);
		修改全局变量(J, 添加至数组, 20);
		修改全局变量(J, 添加至数组, 25);
		修改全局变量(J, 添加至数组, 30);
		修改全局变量(J, 添加至数组, 35);
		修改全局变量(J, 添加至数组, 40);
		修改全局变量(J, 添加至数组, 45);
		修改全局变量(J, 添加至数组, 50);
		全局.Y = 30;
		全局.W = 假;
		全局.U = 假;
		全局.M = 假;
		全局.R[1] = 假;
		全局.R[3] = 0;
		全局.D[0] = 矢量(0, -50, 0);
		全局.AA = 7;
	}
}

规则("intro *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.I == 真;
	}

	动作
	{
		设置状态(事件玩家, 无, 定身, 20);
		开始镜头(事件玩家, 矢量(160.141, 5.070, 325.220), 矢量(159.883, 5.579, 337.036), 0);
		等待(6, 无视条件);
		开始镜头(事件玩家, 矢量(160.141, 5.070, 325.220), 矢量(159.883, 5.579, 337.036), 0);
		等待(0.250, 无视条件);
		开始镜头(事件玩家, 矢量(156.589, 12.101, 488.411), 矢量(156.415, 12.446, 496.411), 0.500);
		等待(2, 无视条件);
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("欢迎"), 字符串("{0}！", 事件玩家)));
		等待(3, 无视条件);
		停止镜头(事件玩家);
		开始镜头(事件玩家, 矢量(-32.107, 68.466, 217.156), 矢量(-32.415, 68.901, 218.297), 0);
		等待(2, 无视条件);
		开始镜头(事件玩家, 矢量(-54.263, 68.466, 211.172), 矢量(-54.520, 68.829, 212.123), 1.500);
		等待(4, 无视条件);
		开始镜头(事件玩家, 矢量(-32.107, 68.466, 217.156), 矢量(-32.415, 68.901, 218.297), 1);
		等待(4, 无视条件);
		停止镜头(事件玩家);
		开始镜头(事件玩家, 矢量(-50.099, 7.412, 5.935), 矢量(-49.949, 7.414, 5.935), 0);
		等待(0.250, 无视条件);
		开始镜头(事件玩家, 矢量(-46.410, 7.477, 5.932), 矢量(-46.260, 7.480, 5.932), 1);
		等待(1.700, 无视条件);
		开始镜头(事件玩家, 矢量(-39.165, 3.819, 5.970), 矢量(-38.775, 3.825, 5.967), 0.500);
		等待(5, 无视条件);
		开始镜头(事件玩家, 矢量(-36.336, 4.104, 5.969), 矢量(-35.586, 4.107, 5.969), 1.500);
		等待(2, 无视条件);
		传送(事件玩家, 矢量(-36.362, 3.803, 5.969));
		事件玩家.I = 假;
		设置朝向(事件玩家, 矢量(1, 0, 0), 至地图);
		停止镜头(事件玩家);
		事件玩家.T = 真;
		清除状态(事件玩家, 定身);
		事件玩家.M = 真;
	}
}

规则("intro 2 *")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		创建效果(所有玩家(所有队伍), 球体, 颜色(白色), 矢量(-96.647, 81.416, 237.489), 1, 可见);
		创建效果(所有玩家(所有队伍), 球体, 颜色(白色), 矢量(-96.846, 81.395, 239.638), 1, 可见);
		创建效果(所有玩家(所有队伍), 球, 颜色(红色), 矢量(-95.831, 81.157, 238.812), 1, 可见);
		创建效果(所有玩家(所有队伍), 球, 颜色(红色), 矢量(-95.555, 81.042, 236.675), 1, 可见);
	}
}

规则("outro *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.Z == 1;
	}

	动作
	{
		事件玩家.Z = 2;
		事件玩家.W = 真;
		消除效果(事件玩家.E[5]);
		消除效果(事件玩家.E[6]);
		设置状态(事件玩家, 无, 定身, 9999);
		开始镜头(事件玩家, 矢量(113.120, 85.045, -16.820), 矢量(134.493, 93.195, -3.067), 0);
		传送(事件玩家, 矢量(134.470, 95.651, -3.076));
		设置朝向(事件玩家, 矢量(-0.300, 0, -0.200), 至地图);
		等待(0.250, 无视条件);
		创建效果(所有玩家(所有队伍), 火花, 颜色(天蓝色), 事件玩家, 1.500, 可见，位置和半径);
		事件玩家.E[3] = 最后创建的实体;
		创建效果(所有玩家(所有队伍), 火花, 颜色(橙色), 事件玩家, 1.500, 可见，位置和半径);
		事件玩家.E[4] = 最后创建的实体;
		全局.W = 真;
		等待(0.250, 无视条件);
		开始镜头(事件玩家, 矢量(133.238, 93.846, -3.875), 矢量(134.493, 94.395, -3.067), 3);
		等待(2.500, 无视条件);
		大字体信息(所有玩家(所有队伍), 字符串("{0} {1} {2}", 英雄图标字符串(所用英雄(事件玩家)), 事件玩家, 字符串("{0}！", 字符串("胜者"))));
		交流(事件玩家, 表情（上）);
		等待(0.250, 无视条件);
		停止镜头(事件玩家);
		开始镜头(事件玩家, 矢量(133.238, 93.846, -3.875), 矢量(134.493, 94.395, -3.067), 0);
		设置慢动作(30);
		等待(0.250, 无视条件);
		开始镜头(事件玩家, 矢量(130.331, 93.608, -2.189), 矢量(133.508, 94.247, -3.685), 1.500);
		等待(0.300, 无视条件);
		开始镜头(事件玩家, 矢量(130.960, 92.977, 5.405), 矢量(133.508, 94.247, -3.685), 1.500);
		等待(0.300, 无视条件);
		开始镜头(事件玩家, 矢量(139.765, 91.507, 12.467), 矢量(133.508, 94.247, -3.685), 1.500);
		等待(0.300, 无视条件);
		开始镜头(事件玩家, 矢量(176.952, 78.928, 27.954), 矢量(133.508, 94.247, -3.685), 1.500);
		等待(0.300, 无视条件);
		开始镜头(事件玩家, 矢量(217.445, 71.128, 5.935), 矢量(133.508, 86.865, -3.685), 1.500);
		等待(0.300, 无视条件);
		开始镜头(事件玩家, 矢量(236.083, 66.922, -20.435), 矢量(133.508, 83.175, -3.685), 1.500);
		等待(2, 无视条件);
		设置慢动作(100);
		停止镜头(事件玩家);
		开始镜头(事件玩家, 矢量(135.840, 95.495, -3.733), 矢量(135.647, 95.232, -3.786), 0);
		等待(4, 无视条件);
		停止镜头(事件玩家);
		全局.W = 假;
		清除状态(事件玩家, 定身);
		大字体信息(事件玩家, 字符串("{0}！", 字符串("恭喜")));
		等待(10, 无视条件);
		播放效果(事件玩家, 状态爆炸声音, 颜色(白色), 事件玩家, 10);
		消除HUD文本(事件玩家.AA);
		创建HUD文本(事件玩家, 图标字符串(对号), 自定义字符串("Try other maps!"), 自定义字符串("bit.do/whereisit "), 顶部, 1, 颜色(灰绿色), 颜色(白色), 颜色(灰绿色), 字符串, 默认可见度);
		事件玩家.AA = 上一个文本ID;
		等待(90, 无视条件);
		事件玩家.W = 假;
		事件玩家.Z = 0;
		消除效果(事件玩家.E[3]);
		消除效果(事件玩家.E[4]);
		小字体信息(事件玩家, 字符串("{0} {1}", 事件玩家, 字符串("不可见")));
		传送(事件玩家, 矢量(151.656, 19.038, -5.746));
	}
}

规则("player spawn *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
		是否是机器人(事件玩家) == 假;
	}

	动作
	{
		事件玩家.F = 0;
		传送(事件玩家, 矢量(-28.867, 3.833, -11.887));
		设置启用技能 1(事件玩家, 假);
		设置启用技能 2(事件玩家, 假);
		事件玩家.I = 真;
		事件玩家.G = 5;
		事件玩家.N = 1;
		事件玩家.U = 假;
		事件玩家.V = 假;
		事件玩家.R = 假;
		事件玩家.W = 假;
		事件玩家.O = 假;
		事件玩家.Z = 0;
		事件玩家.X = 假;
		事件玩家.L = 假;
		根据条件跳过(全局.R[2] >= 3, 2);
		全局.R[2] += 1;
		全局.R[1] = 真;
		创建效果(事件玩家, 有益光环, 颜色(橙色), 全局.D[事件玩家.F], 2, 可见，位置和半径);
		事件玩家.E[5] = 最后创建的实体;
		创建效果(事件玩家, 火花, 颜色(橙色), 全局.D[事件玩家.F], 3, 可见，位置和半径);
		事件玩家.E[6] = 最后创建的实体;
		创建HUD文本(事件玩家, 字符串("{0} {1}", 图标字符串(方块), 事件玩家.N), 无, 无, 左边, 1, 颜色(橙色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		事件玩家.E[7] = 最后创建的实体;
		创建HUD文本(事件玩家, 无, 无, 字符串("对象"), 左边, 0, 颜色(白色), 颜色(白色), 颜色(橙色), 可见和字符串, 默认可见度);
		事件玩家.E[8] = 最后创建的实体;
		设置状态(事件玩家, 无, 无敌, 9999);
		事件玩家.S = 150;
		根据条件跳过(全局.L[1] != 无, 2);
		全局.L[1] = 事件玩家;
		中止;
		根据条件跳过(全局.L[2] != 无, 2);
		全局.L[2] = 事件玩家;
		中止;
		根据条件跳过(全局.L[3] != 无, 2);
		全局.L[3] = 事件玩家;
		中止;
	}
}

规则("teleports Team 1 *")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.P[1] = 矢量(-1.840, 1.788, 6.088);
		创建效果(所有玩家(队伍1), 环, 颜色(蓝色), 全局.P[1], 1.500, 可见);
		全局.P[2] = 矢量(1.644, 1.624, 6.019);
		创建效果(所有玩家(队伍1), 环, 颜色(蓝色), 全局.P[2], 1.500, 可见);
		全局.P[3] = 矢量(-2.771, 1.788, -8.034);
		创建效果(所有玩家(队伍1), 环, 颜色(蓝色), 全局.P[3], 1.200, 可见);
		全局.P[4] = 矢量(1.091, 1.624, -8.043);
		禁用 创建效果(所有玩家(队伍1), 环, 颜色(蓝色), 全局.P[4], 1.200, 可见);
		全局.P[5] = 矢量(-2.940, 1.788, 20.060);
		创建效果(所有玩家(队伍1), 环, 颜色(蓝色), 全局.P[5], 1.200, 可见);
		全局.P[6] = 矢量(0.978, 1.624, 20.021);
		创建效果(所有玩家(队伍1), 环, 颜色(蓝色), 全局.P[6], 1.200, 可见);
	}
}

规则("teleports Team 2 *")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.P[7] = 矢量(146.952, -2.201, 49.147);
		创建效果(所有玩家(队伍2), 环, 颜色(蓝色), 全局.P[7], 1.200, 可见);
		全局.P[8] = 矢量(144.559, -2.201, 46.873);
		创建效果(所有玩家(队伍2), 环, 颜色(蓝色), 全局.P[8], 1.200, 可见);
		全局.P[9] = 矢量(158.383, -2.201, 38.023);
		创建效果(所有玩家(队伍2), 环, 颜色(蓝色), 全局.P[9], 1.200, 可见);
		全局.P[10] = 矢量(155.868, -2.201, 35.541);
		创建效果(所有玩家(队伍2), 环, 颜色(蓝色), 全局.P[10], 1.200, 可见);
		全局.P[11] = 矢量(222.290, 1.747, 7.656);
		创建效果(所有玩家(队伍2), 环, 颜色(蓝色), 全局.P[11], 1.200, 可见);
		全局.P[12] = 矢量(225.155, 1.747, 7.578);
		创建效果(所有玩家(队伍2), 环, 颜色(蓝色), 全局.P[12], 1.200, 可见);
		全局.P[13] = 矢量(222.333, 1.748, 37.621);
		创建效果(所有玩家(队伍2), 环, 颜色(蓝色), 全局.P[13], 1.200, 可见);
		全局.P[14] = 矢量(225.266, 1.748, 37.676);
		创建效果(所有玩家(队伍2), 环, 颜色(蓝色), 全局.P[14], 1.200, 可见);
	}
}

规则("teleports All Teams *")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.P[15] = 矢量(61.553, -0.234, 28.991);
		创建效果(所有玩家(所有队伍), 环, 颜色(蓝色), 全局.P[15], 1.200, 可见);
		全局.P[16] = 矢量(58.937, -0.201, 31.900);
		创建效果(所有玩家(所有队伍), 环, 颜色(蓝色), 全局.P[16], 1.200, 可见);
		全局.P[17] = 矢量(79.389, 1.799, 16.842);
		创建效果(所有玩家(所有队伍), 环, 颜色(蓝色), 全局.P[17], 1.300, 可见);
		全局.P[18] = 矢量(76.503, 0.928, 19.756);
		创建效果(所有玩家(所有队伍), 环, 颜色(蓝色), 全局.P[18], 1.300, 可见);
	}
}

规则("infinite match time")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		比赛时间 <= 1800;
	}

	动作
	{
		设置比赛时间(3600);
	}
}

规则("player pressed \"F\" key on the empty place")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		相距距离(事件玩家, 全局.D[事件玩家.F]) > 5;
		相距距离(事件玩家, 全局.D[事件玩家.F + 1]) > 5;
		事件玩家.I == 假;
		事件玩家.T == 假;
		具有状态(事件玩家, 冰冻) == 假;
		事件玩家.F < 全局.O;
	}

	动作
	{
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("否"), 字符串("物品")));
		播放效果(事件玩家, 负面状态施加声音, 颜色(白色), 事件玩家, 30);
		设置状态(事件玩家, 无, 冰冻, 1);
	}
}

规则("player found item")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		相距距离(事件玩家, 全局.D[事件玩家.F + 1]) <= 5;
		具有状态(事件玩家, 冰冻) == 假;
		事件玩家.F < 全局.O;
	}

	动作
	{
		小字体信息(事件玩家, 字符串("{0}！", 字符串("好")));
		播放效果(事件玩家, 环状爆炸, 颜色(橙色), 全局.D[事件玩家.F + 1], 5);
		播放效果(事件玩家, 环状爆炸, 颜色(橙色), 全局.D[事件玩家.F + 1], 7);
		播放效果(事件玩家, 正面状态施加声音, 颜色(白色), 事件玩家, 50);
		事件玩家.F += 1;
		事件玩家.K = 3;
		事件玩家.U = 真;
		事件玩家.G = 10;
		根据条件跳过(事件玩家.F == 全局.J[10], 11);
		根据条件跳过(事件玩家.F == 全局.J[9], 10);
		根据条件跳过(事件玩家.F == 全局.J[8], 9);
		根据条件跳过(事件玩家.F == 全局.J[7], 8);
		根据条件跳过(事件玩家.F == 全局.J[6], 7);
		根据条件跳过(事件玩家.F == 全局.J[5], 6);
		根据条件跳过(事件玩家.F == 全局.J[4], 5);
		根据条件跳过(事件玩家.F == 全局.J[3], 4);
		根据条件跳过(事件玩家.F == 全局.J[2], 3);
		根据条件跳过(事件玩家.F == 全局.J[1], 2);
		事件玩家.U = 假;
		事件玩家.T = 真;
		等待(1, 无视条件);
		大字体信息(事件玩家, 字符串("{0} / {1}", 事件玩家.F, 全局.O));
		根据条件跳过(事件玩家.F != 2, 1);
		事件玩家.R = 真;
		根据条件跳过(事件玩家.F < 全局.O, 1);
		事件玩家.N = 事件玩家.F;
		根据条件跳过(事件玩家.F == 全局.O, 1);
		事件玩家.N = 事件玩家.F + 1;
	}
}

规则("shift key is pressed (acceleration)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(技能1)) == 真;
	}

	动作
	{
		设置移动速度(事件玩家, 事件玩家.S);
	}
}

规则("shift key is not pressed (slowdown)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(技能1)) == 假;
	}

	动作
	{
		设置移动速度(事件玩家, 110);
	}
}

规则("spacebar is pressed (fly)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(跳跃)) == 真;
		事件玩家.F >= 全局.Y;
	}

	动作
	{
		设置引力(事件玩家, 0);
	}
}

规则("spacebar is not pressed (gravity)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(跳跃)) == 假;
		事件玩家.F >= 全局.Y;
	}

	动作
	{
		设置引力(事件玩家, 100);
	}
}

规则("right click shows picture")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(辅助攻击模式)) == 真;
		事件玩家.I == 假;
		事件玩家.Z == 0;
		事件玩家.X == 假;
	}

	动作
	{
		根据条件跳过(事件玩家.F < 全局.O, 1);
		事件玩家.N = 事件玩家.F;
		根据条件跳过(事件玩家.F == 全局.O, 1);
		事件玩家.N = 事件玩家.F + 1;
		开始镜头(事件玩家, 全局.C[事件玩家.N], 全局.D[事件玩家.N], 0);
		事件玩家.T = 假;
		根据条件跳过(事件玩家.U == 假, 1);
		事件玩家.O = 真;
		根据条件跳过(事件玩家.G > 0, 3);
		根据条件跳过(相距距离(所选位置(事件玩家), 全局.D[事件玩家.F + 1]) < 50, 1);
		小字体信息(事件玩家, 字符串("{0} {1} {2}", 字符串("对象"), 字符串("远"), 图标字符串(停止)));
		事件玩家.G = 1;
	}
}

规则("right mouse button is not pressed")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(辅助攻击模式)) == 假;
		事件玩家.I == 假;
		事件玩家.Z == 0;
		事件玩家.X == 假;
	}

	动作
	{
		停止镜头(事件玩家);
		清除状态(事件玩家, 定身);
		根据条件跳过(事件玩家.U == 假, 1);
		事件玩家.O = 真;
		根据条件跳过(事件玩家.F < 全局.O, 1);
		事件玩家.N = 事件玩家.F;
		根据条件跳过(事件玩家.F == 全局.O, 1);
		事件玩家.N = 事件玩家.F + 1;
	}
}

规则("left mouse button shows previous objects")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(主要攻击模式)) == 真;
		按钮被按下(事件玩家, 按钮(辅助攻击模式)) == 真;
		事件玩家.I == 假;
		事件玩家.X == 假;
		事件玩家.Z == 0;
	}

	动作
	{
		事件玩家.N -= 1;
		根据条件跳过(事件玩家.N > 0, 4);
		根据条件跳过(事件玩家.F == 全局.O, 1);
		事件玩家.N = 事件玩家.F + 1;
		根据条件跳过(事件玩家.F != 全局.O, 1);
		事件玩家.N = 事件玩家.F;
	}
}

规则("teleport cooldown")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.B == 真;
	}

	动作
	{
		等待(2, 无视条件);
		事件玩家.B = 假;
		如条件为”真“则循环;
	}
}

规则("teleport 1")
{
	事件
	{
		持续 - 每名玩家;
		队伍1;
		全部;
	}

	条件
	{
		事件玩家.B == 假;
		全局.P[1] != 0;
		相距距离(事件玩家, 全局.P[1]) <= 2;
	}

	动作
	{
		传送(事件玩家, 全局.P[2]);
		事件玩家.B = 真;
		播放效果(事件玩家, 有益爆炸, 颜色(蓝色), 事件玩家, 5);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
	}
}

规则("teleport 2")
{
	事件
	{
		持续 - 每名玩家;
		队伍1;
		全部;
	}

	条件
	{
		事件玩家.B == 假;
		全局.P[2] != 0;
		相距距离(事件玩家, 全局.P[2]) <= 2;
	}

	动作
	{
		传送(事件玩家, 全局.P[1]);
		事件玩家.B = 真;
		播放效果(事件玩家, 有益爆炸, 颜色(蓝色), 事件玩家, 5);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
	}
}

规则("teleport 3")
{
	事件
	{
		持续 - 每名玩家;
		队伍1;
		全部;
	}

	条件
	{
		事件玩家.B == 假;
		全局.P[3] != 0;
		相距距离(事件玩家, 全局.P[3]) <= 2;
	}

	动作
	{
		传送(事件玩家, 全局.P[4]);
		事件玩家.B = 真;
		播放效果(事件玩家, 有益爆炸, 颜色(蓝色), 事件玩家, 5);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
	}
}

禁用 规则("teleport 4")
{
	事件
	{
		持续 - 每名玩家;
		队伍1;
		全部;
	}

	条件
	{
		事件玩家.B == 假;
		全局.P[4] != 0;
		相距距离(事件玩家, 全局.P[4]) <= 2;
	}

	动作
	{
		传送(事件玩家, 全局.P[3]);
		事件玩家.B = 真;
		播放效果(事件玩家, 有益爆炸, 颜色(蓝色), 事件玩家, 5);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
	}
}

规则("teleport 5")
{
	事件
	{
		持续 - 每名玩家;
		队伍1;
		全部;
	}

	条件
	{
		事件玩家.B == 假;
		全局.P[5] != 0;
		相距距离(事件玩家, 全局.P[5]) <= 2;
	}

	动作
	{
		传送(事件玩家, 全局.P[6]);
		事件玩家.B = 真;
		播放效果(事件玩家, 有益爆炸, 颜色(蓝色), 事件玩家, 5);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
	}
}

规则("teleport 6")
{
	事件
	{
		持续 - 每名玩家;
		队伍1;
		全部;
	}

	条件
	{
		事件玩家.B == 假;
		全局.P[6] != 0;
		相距距离(事件玩家, 全局.P[6]) <= 2;
	}

	动作
	{
		传送(事件玩家, 全局.P[5]);
		事件玩家.B = 真;
		播放效果(事件玩家, 有益爆炸, 颜色(蓝色), 事件玩家, 5);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
	}
}

规则("teleport 7")
{
	事件
	{
		持续 - 每名玩家;
		队伍2;
		全部;
	}

	条件
	{
		事件玩家.B == 假;
		全局.P[7] != 0;
		相距距离(事件玩家, 全局.P[7]) <= 2;
	}

	动作
	{
		传送(事件玩家, 全局.P[8]);
		事件玩家.B = 真;
		播放效果(事件玩家, 有益爆炸, 颜色(蓝色), 事件玩家, 5);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
	}
}

规则("teleport 8")
{
	事件
	{
		持续 - 每名玩家;
		队伍2;
		全部;
	}

	条件
	{
		事件玩家.B == 假;
		全局.P[8] != 0;
		相距距离(事件玩家, 全局.P[8]) <= 2;
	}

	动作
	{
		传送(事件玩家, 全局.P[7]);
		事件玩家.B = 真;
		播放效果(事件玩家, 有益爆炸, 颜色(蓝色), 事件玩家, 5);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
	}
}

规则("teleport 9")
{
	事件
	{
		持续 - 每名玩家;
		队伍2;
		全部;
	}

	条件
	{
		事件玩家.B == 假;
		全局.P[9] != 0;
		相距距离(事件玩家, 全局.P[9]) <= 2;
	}

	动作
	{
		传送(事件玩家, 全局.P[10]);
		事件玩家.B = 真;
		播放效果(事件玩家, 有益爆炸, 颜色(蓝色), 事件玩家, 5);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
	}
}

规则("teleport 10")
{
	事件
	{
		持续 - 每名玩家;
		队伍2;
		全部;
	}

	条件
	{
		事件玩家.B == 假;
		全局.P[10] != 0;
		相距距离(事件玩家, 全局.P[10]) <= 2;
	}

	动作
	{
		传送(事件玩家, 全局.P[9]);
		事件玩家.B = 真;
		播放效果(事件玩家, 有益爆炸, 颜色(蓝色), 事件玩家, 5);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
	}
}

规则("teleport 11")
{
	事件
	{
		持续 - 每名玩家;
		队伍2;
		全部;
	}

	条件
	{
		事件玩家.B == 假;
		全局.P[11] != 0;
		相距距离(事件玩家, 全局.P[11]) <= 2;
	}

	动作
	{
		传送(事件玩家, 全局.P[12]);
		事件玩家.B = 真;
		播放效果(事件玩家, 有益爆炸, 颜色(蓝色), 事件玩家, 5);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
	}
}

规则("teleport 12")
{
	事件
	{
		持续 - 每名玩家;
		队伍2;
		全部;
	}

	条件
	{
		事件玩家.B == 假;
		全局.P[12] != 0;
		相距距离(事件玩家, 全局.P[12]) <= 2;
	}

	动作
	{
		传送(事件玩家, 全局.P[11]);
		事件玩家.B = 真;
		播放效果(事件玩家, 有益爆炸, 颜色(蓝色), 事件玩家, 5);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
	}
}

规则("teleport 13")
{
	事件
	{
		持续 - 每名玩家;
		队伍2;
		全部;
	}

	条件
	{
		事件玩家.B == 假;
		全局.P[13] != 0;
		相距距离(事件玩家, 全局.P[13]) <= 2;
	}

	动作
	{
		传送(事件玩家, 全局.P[14]);
		事件玩家.B = 真;
		播放效果(事件玩家, 有益爆炸, 颜色(蓝色), 事件玩家, 5);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
	}
}

规则("teleport 14")
{
	事件
	{
		持续 - 每名玩家;
		队伍2;
		全部;
	}

	条件
	{
		事件玩家.B == 假;
		全局.P[14] != 0;
		相距距离(事件玩家, 全局.P[14]) <= 2;
	}

	动作
	{
		传送(事件玩家, 全局.P[13]);
		事件玩家.B = 真;
		播放效果(事件玩家, 有益爆炸, 颜色(蓝色), 事件玩家, 5);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
	}
}

规则("teleport 15 *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.B == 假;
		全局.P[15] != 0;
		相距距离(事件玩家, 全局.P[15]) <= 2;
	}

	动作
	{
		传送(事件玩家, 全局.P[16]);
		事件玩家.B = 真;
		播放效果(事件玩家, 有益爆炸, 颜色(蓝色), 事件玩家, 5);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
	}
}

规则("teleport 16 *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.B == 假;
		全局.P[16] != 0;
		相距距离(事件玩家, 全局.P[16]) <= 2;
	}

	动作
	{
		传送(事件玩家, 全局.P[15]);
		事件玩家.B = 真;
		播放效果(事件玩家, 有益爆炸, 颜色(蓝色), 事件玩家, 5);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
	}
}

规则("teleport 17 *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.B == 假;
		全局.P[17] != 0;
		相距距离(事件玩家, 全局.P[17]) <= 2;
	}

	动作
	{
		传送(事件玩家, 矢量(79.321, -0.199, 25.150));
		事件玩家.B = 真;
		播放效果(事件玩家, 有益爆炸, 颜色(蓝色), 事件玩家, 5);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
	}
}

规则("teleport 18 *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.B == 假;
		全局.P[18] != 0;
		相距距离(事件玩家, 全局.P[18]) <= 2;
	}

	动作
	{
		传送(事件玩家, 全局.P[17]);
		事件玩家.B = 真;
		播放效果(事件玩家, 有益爆炸, 颜色(蓝色), 事件玩家, 5);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
	}
}

规则("player found all objects (victory!)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.F == 全局.O;
	}

	动作
	{
		事件玩家.Z = 5;
		设置状态(事件玩家, 无, 定身, 9999);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 30);
		播放效果(事件玩家, 环状爆炸, 颜色(紫色), 全局.D[事件玩家.F], 6);
		播放效果(事件玩家, 有益爆炸, 颜色(橙色), 全局.D[事件玩家.F], 10);
		播放效果(事件玩家, 有益选择效果 , 颜色(橙色), 全局.D[事件玩家.F], 10);
		等待(3, 无视条件);
		事件玩家.Z = 1;
	}
}

规则("everyone is watching the winner *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.W == 假;
		事件玩家.Z == 0;
		全局.W == 真;
		事件玩家.F >= 2;
	}

	动作
	{
		设置状态(事件玩家, 无, 定身, 9999);
		事件玩家.X = 真;
		开始镜头(事件玩家, 矢量(113.120, 85.045, -16.820), 矢量(134.493, 93.195, -3.067), 0);
		等待(0.250, 无视条件);
		开始镜头(事件玩家, 矢量(133.238, 93.846, -3.875), 矢量(134.493, 94.395, -3.067), 3);
		等待(3, 无视条件);
		开始镜头(事件玩家, 矢量(130.331, 93.608, -2.189), 矢量(133.508, 94.247, -3.685), 1.500);
		等待(0.300, 无视条件);
		开始镜头(事件玩家, 矢量(130.960, 92.977, 5.405), 矢量(133.508, 94.247, -3.685), 1.500);
		等待(0.300, 无视条件);
		开始镜头(事件玩家, 矢量(139.765, 91.507, 12.467), 矢量(133.508, 94.247, -3.685), 1.500);
		等待(0.300, 无视条件);
		开始镜头(事件玩家, 矢量(176.952, 78.928, 27.954), 矢量(133.508, 94.247, -3.685), 1.500);
		等待(0.300, 无视条件);
		开始镜头(事件玩家, 矢量(217.445, 71.128, 5.935), 矢量(133.508, 86.865, -3.685), 1.500);
		等待(0.300, 无视条件);
		开始镜头(事件玩家, 矢量(236.083, 66.922, -20.435), 矢量(133.508, 83.175, -3.685), 1.500);
		等待(2, 无视条件);
		停止镜头(事件玩家);
		开始镜头(事件玩家, 矢量(135.840, 95.495, -3.733), 矢量(135.647, 95.232, -3.786), 0);
		等待(6, 无视条件);
		清除状态(事件玩家, 定身);
		全局.W = 假;
		停止镜头(事件玩家);
		事件玩家.X = 假;
	}
}

规则("automatically show next object")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.T == 真;
		事件玩家.U == 假;
	}

	动作
	{
		等待(3, 无视条件);
		如条件为“假”则中止;
		事件玩家.Q = 真;
		设置状态(事件玩家, 无, 定身, 5);
		开始镜头(事件玩家, 全局.C[事件玩家.F + 1], 全局.D[事件玩家.F + 1], 0);
		根据条件跳过(事件玩家.F != 0, 1);
		大字体信息(事件玩家, 字符串("{0} {1}", 字符串("寻找"), 字符串("对象")));
		根据条件跳过(事件玩家.F == 0, 1);
		大字体信息(事件玩家, 字符串("{0} {1}", 字符串("寻找"), 字符串("下一批对象")));
		等待(5, 无视条件);
		事件玩家.T = 假;
		停止镜头(事件玩家);
		事件玩家.Q = 假;
	}
}

规则("cancel auto preview")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.T == 真;
		事件玩家.Q == 真;
		事件玩家.Z == 0;
		事件玩家.X == 假;
	}

	动作
	{
		根据条件跳过(按钮被按下(事件玩家, 按钮(主要攻击模式)) != 真, 4);
		事件玩家.T = 假;
		清除状态(事件玩家, 定身);
		停止镜头(事件玩家);
		事件玩家.Q = 假;
		根据条件跳过(按钮被按下(事件玩家, 按钮(辅助攻击模式)) != 真, 4);
		事件玩家.T = 假;
		清除状态(事件玩家, 定身);
		停止镜头(事件玩家);
		事件玩家.Q = 假;
		根据条件跳过(按钮被按下(事件玩家, 按钮(跳跃)) != 真, 4);
		事件玩家.T = 假;
		清除状态(事件玩家, 定身);
		停止镜头(事件玩家);
		事件玩家.Q = 假;
		根据条件跳过(按钮被按下(事件玩家, 按钮(终极技能)) != 真, 4);
		事件玩家.T = 假;
		清除状态(事件玩家, 定身);
		停止镜头(事件玩家);
		事件玩家.Q = 假;
		根据条件跳过(按钮被按下(事件玩家, 按钮(技能2)) != 真, 4);
		事件玩家.T = 假;
		清除状态(事件玩家, 定身);
		停止镜头(事件玩家);
		事件玩家.Q = 假;
	}
}

规则("hint near the first object *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		相距距离(事件玩家, 全局.D[1]) <= 5;
		事件玩家.F == 0;
	}

	动作
	{
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("互动"), 字符串("{0}！", 字符串("此处"))));
	}
}

规则("message about right button")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.M == 真;
	}

	动作
	{
		等待(9, 无视条件);
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("{0} - {1}", 自定义字符串("[Right Click]"), 字符串("当前目标")), 图标字符串(眼睛)));
		事件玩家.M = 假;
	}
}

规则("message about running")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.R == 真;
	}

	动作
	{
		等待(8, 无视条件);
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("{0} - {1}", 自定义字符串("[Shift]"), 字符串("运行")), 图标字符串(箭矢)));
		事件玩家.R = 假;
	}
}

规则("message about flying")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.F == 全局.Y;
	}

	动作
	{
		等待(8, 无视条件);
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("{0} - {1}", 字符串("跳跃"), 字符串("飞行")), 图标字符串(光晕)));
		等待(30, 无视条件);
		如条件为“假”则中止;
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("{0} - {1}", 字符串("跳跃"), 字符串("飞行")), 图标字符串(光晕)));
		等待(30, 无视条件);
		如条件为“假”则中止;
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("{0} - {1}", 字符串("跳跃"), 字符串("飞行")), 图标字符串(光晕)));
		等待(30, 无视条件);
		如条件为“假”则中止;
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("{0} - {1}", 字符串("跳跃"), 字符串("飞行")), 图标字符串(光晕)));
		等待(30, 无视条件);
		如条件为“假”则中止;
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("{0} - {1}", 字符串("跳跃"), 字符串("飞行")), 图标字符串(光晕)));
	}
}

规则("player left game")
{
	事件
	{
		玩家离开比赛;
		双方;
		全部;
	}

	动作
	{
		消除效果(事件玩家.E[1]);
		消除效果(事件玩家.E[2]);
		消除效果(事件玩家.E[3]);
		消除效果(事件玩家.E[4]);
		消除效果(事件玩家.E[5]);
		消除效果(事件玩家.E[6]);
		消除效果(事件玩家.E[7]);
		消除效果(事件玩家.E[8]);
		根据条件跳过(全局.L[1] != 事件玩家, 1);
		所有玩家(所有队伍).K = 3;
		根据条件跳过(全局.L[2] != 事件玩家, 1);
		所有玩家(所有队伍).K = 3;
		根据条件跳过(全局.L[3] != 事件玩家, 1);
		所有玩家(所有队伍).K = 3;
		设置慢动作(100);
		消除HUD文本(事件玩家.AA);
	}
}

规则("speed upgrade")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.U == 真;
		事件玩家.F != 全局.Y;
		事件玩家.F != 全局.O;
	}

	动作
	{
		播放效果(事件玩家, 环状爆炸, 颜色(天蓝色), 全局.D[事件玩家.F], 6);
		创建光束效果(事件玩家, 有益光束, 全局.D[事件玩家.F], 事件玩家, 颜色(天蓝色), 可见，位置和半径);
		事件玩家.E[1] = 最后创建的实体;
		创建效果(事件玩家, 能量声音, 颜色(白色), 事件玩家, 30, 可见，位置和半径);
		事件玩家.E[2] = 最后创建的实体;
		根据条件跳过(事件玩家.S > 410, 1);
		事件玩家.S += 全局.V;
		等待(1, 无视条件);
		消除效果(事件玩家.E[1]);
		消除效果(事件玩家.E[2]);
		小字体信息(事件玩家, 字符串("{0} {1}", 图标字符串(箭头：向上), 字符串("{0}！", 字符串("等级提升"))));
		大字体信息(事件玩家, 字符串("{0} {1} {2}", 字符串("速度"), 字符串("{0}！", 字符串("升级")), 图标字符串(箭矢)));
		等待(1, 无视条件);
		事件玩家.U = 假;
		根据条件跳过(事件玩家.O == 真, 1);
		事件玩家.T = 真;
		根据条件跳过(事件玩家.O == 假, 1);
		事件玩家.O = 假;
		事件玩家.R = 真;
	}
}

规则("flying upgrade")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.U == 真;
		事件玩家.F == 全局.Y;
	}

	动作
	{
		播放效果(事件玩家, 环状爆炸, 颜色(紫色), 全局.D[事件玩家.F], 7);
		创建光束效果(事件玩家, 有益光束, 全局.D[事件玩家.F], 事件玩家, 颜色(橙色), 可见，位置和半径);
		事件玩家.E[1] = 最后创建的实体;
		创建效果(事件玩家, 能量声音, 颜色(白色), 事件玩家, 30, 可见，位置和半径);
		事件玩家.E[2] = 最后创建的实体;
		事件玩家.Y = 真;
		等待(1, 无视条件);
		消除效果(事件玩家.E[1]);
		消除效果(事件玩家.E[2]);
		小字体信息(事件玩家, 字符串("{0} {1}", 图标字符串(箭头：向上), 字符串("{0}！", 字符串("等级提升"))));
		大字体信息(事件玩家, 字符串("{0} {1} {2}", 字符串("飞行"), 字符串("{0}！", 字符串("升级")), 图标字符串(光晕)));
		等待(1, 无视条件);
		事件玩家.U = 假;
		根据条件跳过(事件玩家.O == 真, 1);
		事件玩家.T = 真;
		根据条件跳过(事件玩家.O == 假, 1);
		事件玩家.O = 假;
	}
}

规则("rating")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		全局.R[1] == 真;
	}

	动作
	{
		根据条件跳过(全局.R[2] < 1, 4);
		根据条件跳过(全局.R[3] >= 1, 3);
		创建HUD文本(所有玩家(所有队伍), 无, 无, 字符串("{0} {1}", 字符串("最佳"), 字符串("{0}:", 字符串("玩家"))), 右边, 0, 颜色(白色), 颜色(白色), 颜色(橙色), 可见和字符串, 默认可见度);
		创建HUD文本(所有玩家(所有队伍), 无, 无, 字符串("{0} {1} {2}", 英雄图标字符串(所用英雄(全局.L[1])), 全局.L[1], 字符串("{0} / {1}", 全局.L[1].F, 全局.O)), 右边, 1, 颜色(白色),
			颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		全局.R[3] = 1;
		根据条件跳过(全局.R[2] < 2, 3);
		根据条件跳过(全局.R[3] >= 2, 2);
		创建HUD文本(所有玩家(所有队伍), 无, 无, 字符串("{0} {1} {2}", 英雄图标字符串(所用英雄(全局.L[2])), 全局.L[2], 字符串("{0} / {1}", 全局.L[2].F, 全局.O)), 右边, 2, 颜色(白色),
			颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		全局.R[3] = 2;
		根据条件跳过(全局.R[2] != 3, 3);
		根据条件跳过(全局.R[3] == 3, 2);
		创建HUD文本(所有玩家(所有队伍), 无, 无, 字符串("{0} {1} {2}", 英雄图标字符串(所用英雄(全局.L[3])), 全局.L[3], 字符串("{0} / {1}", 全局.L[3].F, 全局.O)), 右边, 3, 颜色(白色),
			颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		全局.R[3] = 3;
		等待(1, 无视条件);
		根据条件循环(全局.R[2] > 全局.R[3]);
		全局.R[1] = 假;
	}
}

规则("rating update")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.K > 0;
	}

	动作
	{
		根据条件跳过(全局.L[1] != 事件玩家, 2);
		事件玩家.K = 0;
		中止;
		根据条件跳过(全局.L[2] != 事件玩家, 5);
		根据条件跳过(事件玩家.F <= 全局.L[1].F, 4);
		全局.L[2] = 全局.L[1];
		全局.L[1] = 事件玩家;
		事件玩家.K = 0;
		中止;
		根据条件跳过(全局.L[3] != 事件玩家, 3);
		根据条件跳过(事件玩家.F <= 全局.L[2].F, 2);
		全局.L[3] = 全局.L[2];
		全局.L[2] = 事件玩家;
		根据条件跳过(全局.L[1] == 事件玩家, 4);
		根据条件跳过(全局.L[2] == 事件玩家, 3);
		根据条件跳过(全局.L[3] == 事件玩家, 2);
		根据条件跳过(事件玩家.F <= 全局.L[3].F, 1);
		全局.L[3] = 事件玩家;
		等待(0.050, 无视条件);
		事件玩家.K -= 1;
		如条件为”真“则循环;
	}
}

规则("search time")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.W == 假;
		事件玩家.G > 0;
	}

	动作
	{
		等待(30, 无视条件);
		事件玩家.G -= 1;
		如条件为”真“则循环;
	}
}

规则("message about previous objects")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.F >= 10;
	}

	动作
	{
		等待(25, 无视条件);
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("{0} = {1}", 字符串("{0} + {1}", 自定义字符串("[Right Click]"), 自定义字符串("[Left Click]")), 字符串("对象")), 图标字符串(
			回收)));
	}
}

规则("graphic settings warning 1 *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.F == 全局.AA;
	}

	动作
	{
		等待(3, 无视条件);
		如条件为“假”则中止;
		消除HUD文本(事件玩家.AA);
		创建HUD文本(事件玩家, 图标字符串(眼睛), 自定义字符串("Set medium or higher model detail settings to see all objects"), 自定义字符串(
			"Options > Video > Graphics quality > Advanced > Model Detail"), 顶部, 1, 颜色(橙色), 颜色(白色), 颜色(橙色), 字符串, 默认可见度);
		事件玩家.AA = 上一个文本ID;
	}
}

规则("graphic settings warning 2 *")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.F == 全局.AA + 1;
	}

	动作
	{
		消除HUD文本(事件玩家.AA);
	}
}

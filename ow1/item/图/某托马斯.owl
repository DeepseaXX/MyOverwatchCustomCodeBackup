设置
{
	主程序
	{
		描述: "修改：你的东方啊#5794         熔火工坊RIG搬运 토마스 술래잡기 v0.3                                                               쫓아오는 토마스를 피해 끝까지 살아남으세요.                           제작자:rangddang(옵치하는동그랑땡#3801)                               코드(CODE):"
	}

	大厅
	{
		比赛语音聊天: 启用
		队列中的玩家可以加入: 是
	}

	模式
	{
		死斗
		{
			启用地图
			{
				万圣节吉拉德堡
				万圣节好莱坞
				万圣节艾兴瓦尔德
				圣诞节生态监测站：南极洲
				圣诞节黑森林
			}
		}

		综合
		{
			主动复生: 关闭
			急救包刷新: 禁用
			比赛时长（分钟）: 7
			游戏模式开始: 即时
			英雄限制: 关闭
			随机英雄复生: 开启
		}
	}

	英雄
	{
		综合
		{
			近身攻击: 关闭

			D.Va
			{
				主要攻击模式: 关闭
				伤害量: 10%
				微型飞弹: 关闭
				推进器 冷却时间: 408%
				自毁击退倍率: 51%
				近身攻击: 关闭
			}

			士兵：76
			{
				主要攻击模式: 关闭
				生物力场 冷却时间: 0%
				移动速度: 120%
				终极技能（战术目镜）: 关闭
				螺旋飞弹: 关闭
				近身攻击: 关闭
			}

			奥丽莎
			{
				主要攻击模式: 关闭
				伤害量: 10%
				强固防御 冷却时间: 196%
				移动速度: 119%
				站住别动 冷却时间: 167%
				防护屏障: 关闭
			}

			安娜
			{
				主要攻击模式: 关闭
				伤害量: 10%
				生物手雷: 关闭
				移动速度: 120%
				终极技能（纳米激素）: 关闭
				近身攻击: 关闭
				麻醉镖 冷却时间: 129%
			}

			布丽吉塔
			{
				主要攻击模式: 关闭
				流星飞锤 冷却时间: 202%
				能量盾击冷却时间: 318%
				近身攻击: 关闭
			}

			托比昂
			{
				主要攻击模式: 关闭
				可用武器: 仅限锻造锤
				热力过载 冷却时间: 200%
				热力过载持续时间: 250%
				移动速度: 155%
				移动重力: 400%
				终极技能（熔火核心）: 关闭
				辅助攻击模式: 关闭
				部署炮台: 关闭
			}

			末日铁拳
			{
				上勾重拳 冷却时间: 207%
				上勾重拳击退倍率: 0%
				主要攻击模式: 关闭
				伤害量: 10%
				火箭重拳 冷却时间: 239%
				火箭重拳击退倍率: 5%
				终极技能（毁天灭地）: 关闭
				裂地重拳 冷却时间: 243%
				近身攻击: 关闭
			}

			死神
			{
				主要攻击模式: 关闭
				幽灵形态 冷却时间: 150%
				暗影步: 关闭
				移动重力: 125%
				终极技能（死亡绽放）: 关闭
				近身攻击: 关闭
			}

			源氏
			{
				主要攻击模式: 关闭
				伤害量: 10%
				影 冷却时间: 354%
				终极技能持续时间: 63%
				终极技能（斩）: 关闭
				辅助攻击模式: 关闭
				闪 冷却时间: 70%
			}

			狂鼠
			{
				主要攻击模式: 关闭
				捕兽夹 冷却时间: 80%
				终极技能（炸弹轮胎）: 关闭
				近身攻击: 关闭
				震荡地雷: 关闭
			}

			猎空
			{
				主要攻击模式: 关闭
				生命值: 130%
				移动速度: 84%
				终极技能（脉冲炸弹）: 关闭
				近身攻击: 关闭
				闪回 冷却时间: 350%
				闪现 冷却时间: 450%
			}

			美
			{
				冰墙 冷却时间: 121%
				急冻: 关闭
				终极技能充能速度（暴雪）: 227%
				终极技能自动充能速度 暴雪: 303%
			}

			艾什
			{
				主要攻击模式: 关闭
				双筒猎枪击退距离（敌方）: 41%
				双筒猎枪击退距离（自身）: 138%
				延时雷管: 关闭
				短筒猎枪 冷却时间: 204%
				终极技能（召唤鲍勃）: 关闭
			}

			莱因哈特
			{
				冲锋 冷却时间: 0%
				终极技能（裂地猛击）: 关闭
				重生时终极技能充能完毕: 开启
			}

			路霸
			{
				主要攻击模式: 关闭
				伤害量: 10%
				呼吸器: 关闭
				移动速度: 111%
				移动重力: 101%
				辅助攻击模式: 关闭
				链钩 冷却时间: 152%
			}

			麦克雷
			{
				主要攻击模式: 关闭
				战术翻滚 冷却时间: 50%
				终极技能（神射手）: 关闭
				辅助攻击模式: 关闭
				闪光弹 冷却时间: 500%
			}

			黑影
			{
				主要攻击模式: 关闭
				位移传动 冷却时间: 500%
				终极技能充能速度（电磁脉冲）: 170%
				终极技能自动充能速度 电磁脉冲: 188%
				隐秘潜行: 关闭
				黑客入侵 冷却时间: 184%
			}

			启用英雄
			{
				D.Va
				士兵：76
				奥丽莎
				安娜
				布丽吉塔
				托比昂
				末日铁拳
				死神
				源氏
				狂鼠
				猎空
				艾什
				路霸
				麦克雷
			}
		}
	}
}

变量
{
	全局:
		0: spawn
		1: thomas
		2: start
		3: Slot
		4: ray

	玩家:
		0: sine
		1: thomas
		2: eye_1
		3: eye_2
		4: cloud
		5: cloud_effect
		6: face_0
		7: face_1
		8: face_2
		9: speed
		10: ailve
		11: ray
		12: icon
}

禁用 规则("")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(互动)) == 真;
	}

	动作
	{
		传送(事件玩家, 眼睛位置(事件玩家) + 面朝方向(事件玩家) * 5);
	}
}

禁用 规则("테스트 봇")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		生成机器人(英雄(士兵：76), 所有队伍, 11, 全局.spawn, 矢量(0, 0, 0));
	}
}

禁用 规则("앉기(테스트)")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		按钮被按下(主机玩家, 按钮(主要攻击模式)) == 真;
	}

	动作
	{
		按下按键(所有玩家(所有队伍), 按钮(技能1));
	}
}

规则("리스폰")
{
	事件
	{
		玩家阵亡;
		双方;
		全部;
	}

	条件
	{
		(事件玩家.thomas || 全局.start != 真) == 真;
	}

	动作
	{
		复生(事件玩家);
	}
}

规则("托马斯模型（躯干）")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
		事件玩家.thomas == 真;
	}

	动作
	{
		设置不可见(事件玩家, 全部);
		创建效果(所有玩家(所有队伍), 球体, 颜色(蓝色), 眼睛位置(事件玩家) + 地图矢量(矢量(0, 0, 0), 事件玩家, 旋转), 1.300, 可见，位置和半径);
		创建效果(所有玩家(所有队伍), 球体, 颜色(蓝色), 眼睛位置(事件玩家) + 地图矢量(矢量(0, 0, -0.700), 事件玩家, 旋转), 1.300, 可见，位置和半径);
		创建效果(所有玩家(所有队伍), 球体, 颜色(蓝色), 眼睛位置(事件玩家) + 地图矢量(矢量(0, 0, -1.400), 事件玩家, 旋转), 1.300, 可见，位置和半径);
		创建效果(所有玩家(所有队伍), 球体, 颜色(蓝色), 眼睛位置(事件玩家) + 地图矢量(矢量(0, 0, -2.100), 事件玩家, 旋转), 1.300, 可见，位置和半径);
		"down"
		创建效果(所有玩家(所有队伍), 球体, 颜色(红色), 眼睛位置(事件玩家) + 地图矢量(矢量(0.400, -1.300, 1), 事件玩家, 旋转), 0.400, 可见，位置和半径);
		创建效果(所有玩家(所有队伍), 球体, 颜色(红色), 眼睛位置(事件玩家) + 地图矢量(矢量(-0.400, -1.300, 1), 事件玩家, 旋转), 0.400, 可见，位置和半径);
		创建效果(所有玩家(所有队伍), 球体, 颜色(红色), 眼睛位置(事件玩家) + 地图矢量(矢量(0.800, -1.300, 0.700), 事件玩家, 旋转), 0.400, 可见，位置和半径);
		创建效果(所有玩家(所有队伍), 球体, 颜色(红色), 眼睛位置(事件玩家) + 地图矢量(矢量(-0.800, -1.300, 0.700), 事件玩家, 旋转), 0.400, 可见，位置和半径);
		创建效果(所有玩家(所有队伍), 球体, 颜色(红色), 眼睛位置(事件玩家) + 地图矢量(矢量(0, -1.300, 1), 事件玩家, 旋转), 0.400, 可见，位置和半径);
	}
}

规则("托马斯模型（脸）")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
		事件玩家.thomas == 真;
	}

	动作
	{
		"얼굴"
		创建效果(所有玩家(所有队伍), 球体, 颜色(白色), 眼睛位置(事件玩家) + 地图矢量(矢量(0, 0, 1), 事件玩家, 旋转), 1, 可见，位置和半径);
		"코"
		创建效果(所有玩家(所有队伍), 球体, 颜色(白色), 眼睛位置(事件玩家) + 地图矢量(矢量(0, 0, 2), 事件玩家, 旋转), 0.200, 可见，位置和半径);
		"볼"
		创建效果(所有玩家(所有队伍), 球体, 颜色(白色), 眼睛位置(事件玩家) + 地图矢量(矢量(0.500, -0.200, 1.500), 事件玩家, 旋转), 0.350, 可见，位置和半径);
		"볼"
		创建效果(所有玩家(所有队伍), 球体, 颜色(白色), 眼睛位置(事件玩家) + 地图矢量(矢量(-0.500, -0.200, 1.500), 事件玩家, 旋转), 0.350, 可见，位置和半径);
		创建效果(所有玩家(所有队伍), 球体, 颜色(白色), 眼睛位置(事件玩家) + 地图矢量(矢量(0.400, 0.250, 1.550), 事件玩家, 旋转), 0.300, 可见，位置和半径);
		创建效果(所有玩家(所有队伍), 球体, 颜色(白色), 眼睛位置(事件玩家) + 地图矢量(矢量(-0.400, 0.250, 1.550), 事件玩家, 旋转), 0.300, 可见，位置和半径);
	}
}

规则("托马斯模型（右眼）")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
		事件玩家.thomas == 真;
	}

	动作
	{
		"out"
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(-0.400, 事件玩家.eye_2 + 0.300, 1.950), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(-0.300,
			事件玩家.eye_2 + 0.300, 1.950), 事件玩家, 旋转), 颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(-0.400, 事件玩家.eye_1 + 0.100, 1.950), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(-0.300,
			事件玩家.eye_1 + 0.100, 1.950), 事件玩家, 旋转), 颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(事件玩家.eye_1 + -0.451, 0.250, 1.950), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(
			事件玩家.eye_1 + -0.450, 0.150, 1.950), 事件玩家, 旋转), 颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(事件玩家.eye_2 + -0.251, 0.250, 1.950), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(
			事件玩家.eye_2 + -0.250, 0.150, 1.950), 事件玩家, 旋转), 颜色(白色), 可见，位置和半径);
		"in"
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(-0.401, 0.250, 1.950), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(-0.400, 0.150, 1.950), 事件玩家,
			旋转), 颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(-0.301, 0.250, 1.950), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(-0.300, 0.150, 1.950), 事件玩家,
			旋转), 颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(-0.400, 0.250, 1.950), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(-0.300, 0.250, 1.950), 事件玩家,
			旋转), 颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(-0.400, 0.150, 1.950), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(-0.300, 0.150, 1.950), 事件玩家,
			旋转), 颜色(白色), 可见，位置和半径);
		"out"
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(事件玩家.eye_1 + -0.400, 事件玩家.eye_2 + 0.300, 1.950), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(
			事件玩家.eye_1 + -0.450, 事件玩家.eye_2 + 0.250, 1.950), 事件玩家, 旋转), 颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(事件玩家.eye_2 + -0.300, 事件玩家.eye_2 + 0.300, 1.950), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(
			事件玩家.eye_2 + -0.250, 事件玩家.eye_2 + 0.250, 1.950), 事件玩家, 旋转), 颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(事件玩家.eye_2 + -0.300, 事件玩家.eye_1 + 0.100, 1.950), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(
			事件玩家.eye_2 + -0.250, 事件玩家.eye_1 + 0.150, 1.950), 事件玩家, 旋转), 颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(事件玩家.eye_1 + -0.400, 事件玩家.eye_1 + 0.100, 1.950), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(
			事件玩家.eye_1 + -0.450, 事件玩家.eye_1 + 0.150, 1.950), 事件玩家, 旋转), 颜色(白色), 可见，位置和半径);
		"in"
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(-0.351, 0.250, 1.950), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(-0.350, 0.150, 1.950), 事件玩家,
			旋转), 颜色(白色), 可见，位置和半径);
	}
}

规则("托马斯模型（左眼）")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
		事件玩家.thomas == 真;
	}

	动作
	{
		"out"
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(0.400, 事件玩家.eye_2 + 0.300, 1.950), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(0.300,
			事件玩家.eye_2 + 0.300, 1.950), 事件玩家, 旋转), 颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(0.400, 事件玩家.eye_1 + 0.100, 1.950), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(0.300,
			事件玩家.eye_1 + 0.100, 1.950), 事件玩家, 旋转), 颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(事件玩家.eye_2 + 0.451, 0.250, 1.950), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(
			事件玩家.eye_2 + 0.450, 0.150, 1.950), 事件玩家, 旋转), 颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(事件玩家.eye_1 + 0.251, 0.250, 1.950), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(
			事件玩家.eye_1 + 0.250, 0.150, 1.950), 事件玩家, 旋转), 颜色(白色), 可见，位置和半径);
		"in"
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(0.401, 0.250, 1.950), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(0.400, 0.150, 1.950), 事件玩家,
			旋转), 颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(0.301, 0.250, 1.950), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(0.300, 0.150, 1.950), 事件玩家,
			旋转), 颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(0.400, 0.250, 1.950), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(0.300, 0.250, 1.950), 事件玩家,
			旋转), 颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(0.400, 0.150, 1.950), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(0.300, 0.150, 1.950), 事件玩家,
			旋转), 颜色(白色), 可见，位置和半径);
		"out"
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(事件玩家.eye_2 + 0.400, 事件玩家.eye_2 + 0.300, 1.950), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(
			事件玩家.eye_2 + 0.450, 事件玩家.eye_2 + 0.250, 1.950), 事件玩家, 旋转), 颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(事件玩家.eye_1 + 0.300, 事件玩家.eye_2 + 0.300, 1.950), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(
			事件玩家.eye_1 + 0.250, 事件玩家.eye_2 + 0.250, 1.950), 事件玩家, 旋转), 颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(事件玩家.eye_1 + 0.300, 事件玩家.eye_1 + 0.100, 1.950), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(
			事件玩家.eye_1 + 0.250, 事件玩家.eye_1 + 0.150, 1.950), 事件玩家, 旋转), 颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(事件玩家.eye_2 + 0.400, 事件玩家.eye_1 + 0.100, 1.950), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(
			事件玩家.eye_2 + 0.450, 事件玩家.eye_1 + 0.150, 1.950), 事件玩家, 旋转), 颜色(白色), 可见，位置和半径);
		"in"
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(0.351, 0.250, 1.950), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(0.350, 0.150, 1.950), 事件玩家,
			旋转), 颜色(白色), 可见，位置和半径);
	}
}

规则("托马斯模型（右眉）")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
		事件玩家.thomas == 真;
	}

	动作
	{
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(-0.500, 事件玩家.face_0 + 0.500, 1.950), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(-0.200,
			事件玩家.face_1 + 0.500, 1.950), 事件玩家, 旋转), 颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(-0.350, 事件玩家.face_2 + 0.550, 1.950), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(-0.200,
			事件玩家.face_1 + 0.500, 1.950), 事件玩家, 旋转), 颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(-0.350, 事件玩家.face_2 + 0.550, 1.950), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(-0.500,
			事件玩家.face_0 + 0.500, 1.950), 事件玩家, 旋转), 颜色(白色), 可见，位置和半径);
	}
}

规则("托马斯模型（左眉）")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
		事件玩家.thomas == 真;
	}

	动作
	{
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(0.500, 事件玩家.face_0 + 0.500, 1.950), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(0.200,
			事件玩家.face_1 + 0.500, 1.950), 事件玩家, 旋转), 颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(0.350, 事件玩家.face_2 + 0.550, 1.950), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(0.200,
			事件玩家.face_1 + 0.500, 1.950), 事件玩家, 旋转), 颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(0.350, 事件玩家.face_2 + 0.550, 1.950), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(0.500,
			事件玩家.face_0 + 0.500, 1.950), 事件玩家, 旋转), 颜色(白色), 可见，位置和半径);
	}
}

规则("얼굴둘래（脸部？？？）")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
		事件玩家.thomas == 真;
	}

	动作
	{
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(1.001, 0.500, 1), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(1, -0.500, 1), 事件玩家, 旋转), 颜色(白色),
			可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(-1.001, 0.500, 1), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(-1, -0.500, 1), 事件玩家, 旋转), 颜色(白色),
			可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(0.500, 1, 1), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(-0.500, 1, 1), 事件玩家, 旋转), 颜色(白色),
			可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(0.500, -1, 1), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(-0.500, -1, 1), 事件玩家, 旋转), 颜色(白色),
			可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(1, 0.500, 1), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(0.500, 1, 1), 事件玩家, 旋转), 颜色(白色),
			可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(1, -0.500, 1), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(0.500, -1, 1), 事件玩家, 旋转), 颜色(白色),
			可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(-1, 0.500, 1), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(-0.500, 1, 1), 事件玩家, 旋转), 颜色(白色),
			可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(-1, -0.500, 1), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(-0.500, -1, 1), 事件玩家, 旋转), 颜色(白色),
			可见，位置和半径);
	}
}

规则("S蓄力脸部模型")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		正在使用技能 1(事件玩家) == 真;
		事件玩家.thomas == 真;
	}

	动作
	{
		持续追踪玩家变量(事件玩家, face_0, 0.150, 0.250, 终点及持续时间);
		持续追踪玩家变量(事件玩家, face_1, 0.025, 0.250, 终点及持续时间);
		持续追踪玩家变量(事件玩家, face_2, 0.125, 0.250, 终点及持续时间);
		持续追踪玩家变量(事件玩家, eye_1, 0.050, 0.250, 终点及持续时间);
		持续追踪玩家变量(事件玩家, eye_2, -0.050, 0.250, 终点及持续时间);
		设置移动速度(事件玩家, 10000);
	}
}

规则("正常状态")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		正在使用技能 1(事件玩家) == 假;
		事件玩家.thomas == 真;
	}

	动作
	{
		持续追踪玩家变量(事件玩家, face_0, 0.075, 0.250, 终点及持续时间);
		持续追踪玩家变量(事件玩家, face_1, 0.125, 0.250, 终点及持续时间);
		持续追踪玩家变量(事件玩家, face_2, 0.125, 0.250, 终点及持续时间);
		持续追踪玩家变量(事件玩家, eye_1, 0, 0.250, 终点及持续时间);
		持续追踪玩家变量(事件玩家, eye_2, 0, 0.250, 终点及持续时间);
		设置移动速度(事件玩家, 250);
		设置状态(事件玩家, 无, 击晕, 1);
	}
}

规则("嘴巴")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
		事件玩家.thomas == 真;
	}

	动作
	{
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(0.300, -0.430, 1.850), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(-0.010, 事件玩家.eye_1 + -0.470,
			1.850), 事件玩家, 旋转), 颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(0.010, 事件玩家.eye_1 + -0.470, 1.850), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(-0.300, -0.430,
			1.850), 事件玩家, 旋转), 颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(0.300, -0.430, 1.850), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(-0.010,
			事件玩家.eye_2 * 3 + -0.470, 1.850), 事件玩家, 旋转), 颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(0.010, 事件玩家.eye_2 * 3 + -0.470, 1.850), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(-0.300,
			-0.430, 1.850), 事件玩家, 旋转), 颜色(白色), 可见，位置和半径);
	}
}

规则("蒸汽排放口(?)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
		事件玩家.thomas == 真;
	}

	动作
	{
		"down"
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(0.001, 1.500, 1), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(0, 1, 1), 事件玩家, 旋转), 颜色(白色),
			可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(0.001, 1.500, 0.700), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(0, 1, 0.700), 事件玩家, 旋转), 颜色(
			白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(0.151, 1.500, 0.850), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(0.150, 1, 0.850), 事件玩家, 旋转),
			颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(-0.151, 1.500, 0.850), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(-0.150, 1, 0.850), 事件玩家, 旋转),
			颜色(白色), 可见，位置和半径);
		"up"
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(0.150, 1.500, 1.300), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(-0.150, 1.500, 1.300), 事件玩家,
			旋转), 颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(0.150, 1.500, 0.400), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(-0.150, 1.500, 0.400), 事件玩家,
			旋转), 颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(0.450, 1.500, 0.700), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(0.450, 1.500, 1), 事件玩家, 旋转),
			颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(-0.450, 1.500, 0.700), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(-0.450, 1.500, 1), 事件玩家, 旋转),
			颜色(白色), 可见，位置和半径);
		"up"
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(0.150, 1.500, 1.300), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(0.450, 1.500, 1), 事件玩家, 旋转),
			颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(-0.150, 1.500, 1.300), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(-0.450, 1.500, 1), 事件玩家, 旋转),
			颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(-0.150, 1.500, 0.400), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(-0.450, 1.500, 0.700), 事件玩家,
			旋转), 颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(0.150, 1.500, 0.400), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(0.450, 1.500, 0.700), 事件玩家,
			旋转), 颜色(白色), 可见，位置和半径);
		"up"
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(0.150, 1.700, 1.300), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(-0.150, 1.700, 1.300), 事件玩家,
			旋转), 颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(0.150, 1.700, 0.400), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(-0.150, 1.700, 0.400), 事件玩家,
			旋转), 颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(0.450, 1.700, 0.700), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(0.450, 1.700, 1), 事件玩家, 旋转),
			颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(-0.450, 1.700, 0.700), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(-0.450, 1.700, 1), 事件玩家, 旋转),
			颜色(白色), 可见，位置和半径);
		"up"
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(0.150, 1.700, 1.300), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(0.450, 1.700, 1), 事件玩家, 旋转),
			颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(-0.150, 1.700, 1.300), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(-0.450, 1.700, 1), 事件玩家, 旋转),
			颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(-0.150, 1.700, 0.400), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(-0.450, 1.700, 0.700), 事件玩家,
			旋转), 颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(0.150, 1.700, 0.400), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(0.450, 1.700, 0.700), 事件玩家,
			旋转), 颜色(白色), 可见，位置和半径);
		"up"
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(0.150, 1.500, 1.300), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(-0.150, 1.700, 1.300), 事件玩家,
			旋转), 颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(0.150, 1.500, 0.400), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(-0.150, 1.700, 0.400), 事件玩家,
			旋转), 颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(0.450, 1.500, 0.700), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(0.450, 1.700, 1), 事件玩家, 旋转),
			颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(-0.450, 1.500, 0.700), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(-0.450, 1.700, 1), 事件玩家, 旋转),
			颜色(白色), 可见，位置和半径);
		"up"
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(0.150, 1.500, 1.300), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(0.450, 1.700, 1), 事件玩家, 旋转),
			颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(-0.150, 1.500, 1.300), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(-0.450, 1.700, 1), 事件玩家, 旋转),
			颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(-0.150, 1.500, 0.400), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(-0.450, 1.700, 0.700), 事件玩家,
			旋转), 颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(0.150, 1.500, 0.400), 事件玩家, 旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(0.450, 1.700, 0.700), 事件玩家,
			旋转), 颜色(白色), 可见，位置和半径);
	}
}

规则("蒸汽特效")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
		事件玩家.thomas == 真;
	}

	动作
	{
		事件玩家.cloud[0] = 眼睛位置(事件玩家) + 地图矢量(矢量(0, 1.700, 0.850), 事件玩家, 旋转);
		创建效果(所有玩家(所有队伍), 云, 颜色(白色), 事件玩家.cloud[0], 1, 可见，位置和半径);
		事件玩家.cloud_effect[0] = 最后创建的实体;
		消除效果(事件玩家.cloud_effect[1]);
		等待(0.500, 无视条件);
		事件玩家.cloud[1] = 眼睛位置(事件玩家) + 地图矢量(矢量(0, 1.700, 0.850), 事件玩家, 旋转);
		创建效果(所有玩家(所有队伍), 云, 颜色(白色), 事件玩家.cloud[1], 1, 可见，位置和半径);
		事件玩家.cloud_effect[1] = 最后创建的实体;
		消除效果(事件玩家.cloud_effect[2]);
		等待(0.500, 无视条件);
		事件玩家.cloud[2] = 眼睛位置(事件玩家) + 地图矢量(矢量(0, 1.700, 0.850), 事件玩家, 旋转);
		创建效果(所有玩家(所有队伍), 云, 颜色(白色), 事件玩家.cloud[2], 1, 可见，位置和半径);
		事件玩家.cloud_effect[2] = 最后创建的实体;
		消除效果(事件玩家.cloud_effect[3]);
		等待(0.500, 无视条件);
		事件玩家.cloud[3] = 眼睛位置(事件玩家) + 地图矢量(矢量(0, 1.700, 0.850), 事件玩家, 旋转);
		创建效果(所有玩家(所有队伍), 云, 颜色(白色), 事件玩家.cloud[3], 1, 可见，位置和半径);
		事件玩家.cloud_effect[3] = 最后创建的实体;
		消除效果(事件玩家.cloud_effect[4]);
		等待(0.500, 无视条件);
		事件玩家.cloud[4] = 眼睛位置(事件玩家) + 地图矢量(矢量(0, 1.700, 0.850), 事件玩家, 旋转);
		创建效果(所有玩家(所有队伍), 云, 颜色(白色), 事件玩家.cloud[4], 1, 可见，位置和半径);
		事件玩家.cloud_effect[4] = 最后创建的实体;
		消除效果(事件玩家.cloud_effect[0]);
		等待(0.500, 无视条件);
		循环;
	}
}

规则("车LUN")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
		事件玩家.thomas == 真;
	}

	动作
	{
		创建效果(所有玩家(所有队伍), 球体, 颜色(蓝色), 眼睛位置(事件玩家) + 地图矢量(矢量(0.600, -1, -0.400), 事件玩家, 旋转), 0.700, 可见，位置和半径);
		创建效果(所有玩家(所有队伍), 球体, 颜色(蓝色), 眼睛位置(事件玩家) + 地图矢量(矢量(-0.600, -1, -0.400), 事件玩家, 旋转), 0.700, 可见，位置和半径);
		创建效果(所有玩家(所有队伍), 球体, 颜色(蓝色), 眼睛位置(事件玩家) + 地图矢量(矢量(0.600, -1, -2), 事件玩家, 旋转), 0.700, 可见，位置和半径);
		创建效果(所有玩家(所有队伍), 球体, 颜色(蓝色), 眼睛位置(事件玩家) + 地图矢量(矢量(-0.600, -1, -2), 事件玩家, 旋转), 0.700, 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(1.300, 角度的正弦值(事件玩家.sine) * 0.500 + -1, 角度的余弦值(事件玩家.sine) * 0.500 + -0.400), 事件玩家,
			旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(1.300, 角度的正弦值(事件玩家.sine) * 0.500 + -1, 角度的余弦值(事件玩家.sine) * 0.500 + -2), 事件玩家, 旋转), 颜色(白色), 可见，位置和半径);
		创建光束效果(所有玩家(所有队伍), 抓钩光束, 眼睛位置(事件玩家) + 地图矢量(矢量(-1.300, 角度的正弦值(事件玩家.sine) * 0.500 + -1, 角度的余弦值(事件玩家.sine) * 0.500 + -0.400), 事件玩家,
			旋转), 眼睛位置(事件玩家) + 地图矢量(矢量(-1.300, 角度的正弦值(事件玩家.sine) * 0.500 + -1, 角度的余弦值(事件玩家.sine) * 0.500 + -2), 事件玩家, 旋转), 颜色(白色),
			可见，位置和半径);
	}
}

规则("基础设置")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.thomas == 真;
	}

	动作
	{
		开始强制玩家选择英雄(事件玩家, 英雄(莱因哈特));
		开始镜头(事件玩家, 眼睛位置(事件玩家) + 面朝方向(事件玩家) * -5, 眼睛位置(事件玩家), 50);
		开始限制阈值(事件玩家, 0, 1, 0, 1, 0, 0);
		禁用按钮(事件玩家, 按钮(主要攻击模式));
		设置辅助攻击模式启用(事件玩家, 假);
		设置启用技能 2(事件玩家, 假);
		禁用按钮(事件玩家, 按钮(终极技能));
		禁用按钮(事件玩家, 按钮(蹲下));
		设置造成伤害(事件玩家, 1000);
		设置引力(事件玩家, 70);
		设置移动速度(事件玩家, 150);
	}
}

规则("车LUN1移动效果")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.thomas == 真;
	}

	动作
	{
		追踪玩家变量频率(事件玩家, sine, Z方向分量(阈值(事件玩家)) * -1080, 事件玩家.speed, 速率及最终值);
	}
}

规则("车LUN2移动效果")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.sine == Z方向分量(阈值(事件玩家)) * -1080;
		事件玩家.thomas == 真;
	}

	动作
	{
		事件玩家.sine = 0;
	}
}

规则("车LUN3移动效果")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		Z方向分量(阈值(事件玩家)) != 0;
		事件玩家.thomas == 真;
	}

	动作
	{
		根据条件跳过(正在使用技能 1(事件玩家) == 真, 2);
		事件玩家.speed = 540;
		跳过(1);
		事件玩家.speed = 1080;
	}
}

规则("车LUN4移动效果")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		Z方向分量(阈值(事件玩家)) == 0;
		事件玩家.thomas == 真;
	}

	动作
	{
		事件玩家.speed = 0;
	}
}

规则("积分变量")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.spawn = 矢量(-145.488, 5.647, 103.619);
		关闭游戏预设计分模式;
	}
}

规则("死亡观战")
{
	事件
	{
		玩家阵亡;
		双方;
		全部;
	}

	条件
	{
		事件玩家 != 全局.thomas;
		已重生(事件玩家) == 真;
	}

	动作
	{
		关闭游戏预设复生模式(事件玩家);
		设置最大复生时间(事件玩家, 9999);
		对所有玩家启用死亡回放(事件玩家);
		消除图标(事件玩家.icon);
	}
}

规则("选择托马斯")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		游戏正在进行中 == 真;
	}

	动作
	{
		大字体信息(所有玩家(所有队伍), 自定义字符串("托马斯已选择，快跑！"));
		全局.thomas = 数组随机取值(所有玩家(所有队伍));
		全局.thomas.thomas = 真;
		全局.Slot = 栏位(全局.thomas);
		设置比赛时间(20);
	}
}

规则("开始游戏")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		游戏正在进行中 == 真;
		比赛时间 < 0.050;
		全局.start != 真;
	}

	动作
	{
		设置比赛时间(240);
		全局.start = 真;
		大字体信息(所有玩家(所有队伍), 自定义字符串("托马斯已苏醒."));
	}
}

规则("托马斯")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		全局.start != 真;
		游戏正在进行中 == 真;
		事件玩家 == 全局.thomas;
	}

	动作
	{
		设置状态(事件玩家, 无, 击倒, 10000);
		等待(0.100, 无视条件);
		根据条件循环(具有状态(事件玩家, 击倒) != 真);
	}
}

规则("托马斯")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		全局.start == 真;
		游戏正在进行中 == 真;
		事件玩家 == 全局.thomas;
	}

	动作
	{
		清除状态(事件玩家, 击倒);
		等待(0.100, 无视条件);
		根据条件循环(具有状态(事件玩家, 击倒) == 真);
	}
}

规则("逃生者胜利")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		游戏正在进行中 == 真;
		全局.start == 真;
		比赛时间 < 0.010;
	}

	动作
	{
		设置比赛时间(300);
		大字体信息(所有玩家(所有队伍), 自定义字符串("逃亡者胜利"));
		等待(2, 无视条件);
		宣告玩家胜利(所有存活玩家(所有队伍));
	}
}

规则("托马斯胜利")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		游戏正在进行中 == 真;
		全局.start == 真;
		存活玩家数量(所有队伍) == 1;
		所有存活玩家(所有队伍) == 全局.thomas;
	}

	动作
	{
		设置比赛时间(300);
		大字体信息(所有玩家(所有队伍), 自定义字符串(" 托马斯胜利!"));
		等待(2, 无视条件);
		宣告玩家胜利(所有存活玩家(所有队伍));
	}
}

规则("图标")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		存活(事件玩家) == 真;
		事件玩家 != 全局.thomas;
	}

	动作
	{
		创建图标(全局.thomas, 事件玩家, 箭头：向下, 可见和位置, 颜色(红色), 真);
		事件玩家.icon = 最后创建的实体;
	}
}

规则("중도빼기（中途加入？）")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		全局.start != 真;
		已重生(事件玩家) == 真;
	}

	动作
	{
		事件玩家.ailve = 真;
	}
}

规则("中途加入？")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.ailve != 真;
		已重生(事件玩家) == 真;
		全局.start == 真;
	}

	动作
	{
		设置移动速度(事件玩家, 0);
		等待(3, 无视条件);
		伤害(事件玩家, 全局.thomas, 100000);
		关闭游戏预设复生模式(事件玩家);
		设置最大复生时间(事件玩家, 9999);
		对所有玩家启用死亡回放(事件玩家);
	}
}

规则("托马斯死亡后复活")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		栏位(全局.thomas) != 全局.Slot;
		游戏正在进行中 == 真;
	}

	动作
	{
		等待(0.250, 无视条件);
		全局.thomas = 数组随机取值(所有存活玩家(所有队伍));
		全局.thomas.thomas = 真;
		全局.Slot = 栏位(全局.thomas);
	}
}

规则("终极技能电眼逼人")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家 == 全局.thomas;
		按钮被按下(事件玩家, 按钮(终极技能)) == 真;
		终极技能充能百分比(事件玩家) == 100;
		具有状态(事件玩家, 击倒) == 假;
		具有状态(事件玩家, 击晕) == 假;
	}

	动作
	{
		全局.ray = 真;
		设置终极技能充能(事件玩家, 0);
		"in"
		创建光束效果(所有玩家(所有队伍), 有害光束, 眼睛位置(事件玩家) + 地图矢量(矢量(-0.350, 0.200, 2), 事件玩家, 旋转), 射线命中位置(眼睛位置(事件玩家) + 地图矢量(矢量(-0.350, 0.200, 2), 事件玩家,
			旋转), 眼睛位置(事件玩家) + 面朝方向(事件玩家) * 100, 所有玩家(所有队伍), 事件玩家, 真), 颜色(红色), 可见，位置和半径);
		事件玩家.ray[0] = 最后创建的实体;
		"in"
		创建光束效果(所有玩家(所有队伍), 有害光束, 眼睛位置(事件玩家) + 地图矢量(矢量(0.350, 0.200, 2), 事件玩家, 旋转), 射线命中位置(眼睛位置(事件玩家) + 地图矢量(矢量(0.350, 0.200, 2), 事件玩家, 旋转),
			眼睛位置(事件玩家) + 面朝方向(事件玩家) * 100, 所有玩家(所有队伍), 事件玩家, 真), 颜色(红色), 可见，位置和半径);
		事件玩家.ray[1] = 最后创建的实体;
		等待(10, 无视条件);
		消除效果(事件玩家.ray[0]);
		消除效果(事件玩家.ray[1]);
		全局.ray = 0;
	}
}

规则("电眼逼人伤害")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		全局.ray == 真;
		相距距离(眼睛位置(事件玩家), 射线命中位置(眼睛位置(全局.thomas), 眼睛位置(全局.thomas) + 面朝方向(全局.thomas) * 100, 所有玩家(所有队伍), 全局.thomas, 真)) < 2.500;
		事件玩家 != 全局.thomas;
	}

	动作
	{
		开始持续伤害(事件玩家, 全局.thomas, 9999, 50);
	}
}

规则("电眼逼人")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		相距距离(眼睛位置(事件玩家), 射线命中位置(眼睛位置(事件玩家), 眼睛位置(事件玩家) + 面朝方向(事件玩家) * 100, 所有玩家(所有队伍), 事件玩家, 真)) >= 2.500;
	}

	动作
	{
		停止持续伤害(上一个持续伤害效果ID);
	}
}

规则("电眼逼人")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		全局.ray == 真;
		事件玩家 == 全局.thomas;
	}

	动作
	{
		播放效果(所有玩家(所有队伍), 有害爆炸, 颜色(红色), 射线命中位置(眼睛位置(事件玩家), 眼睛位置(事件玩家) + 面朝方向(事件玩家) * 100, 所有玩家(所有队伍), 事件玩家, 真), 2.500);
		等待(0.200, 无视条件);
		如条件为”真“则循环;
	}
}

规则("求生者视角迷雾")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	动作
	{
		创建效果(已过滤的数组(事件玩家, 事件玩家 != 全局.thomas), 有害光环, 颜色(白色), 眼睛位置(事件玩家) + 面朝方向(事件玩家) * 12, 50, 可见，位置和半径);
		创建效果(已过滤的数组(事件玩家, 事件玩家 != 全局.thomas), 有害光环, 颜色(白色), 眼睛位置(事件玩家) + 面朝方向(事件玩家) * 12, 50, 可见，位置和半径);
	}
}

规则("规则 40")
{
	事件
	{
		持续 - 全局;
	}
}

规则("观战UI")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		游戏正在进行中 == 真;
	}

	动作
	{
		创建HUD文本(所有玩家(所有队伍), 自定义字符串("新来的等一会 下一把就能进游戏了"), 无, 无, 左边, 0, 颜色(红色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
	}
}

规则("随机英雄法鸡")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(技能1)) == 真;
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		按钮被按下(事件玩家, 按钮(跳跃)) == 真;
	}

	动作
	{
		开始强制玩家选择英雄(事件玩家, 英雄(法老之鹰));
	}
}

规则("随机英雄安娜")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(辅助攻击模式)) == 真;
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		按钮被按下(事件玩家, 按钮(跳跃)) == 真;
	}

	动作
	{
		开始强制玩家选择英雄(事件玩家, 英雄(安娜));
	}
}

规则("规则 37")
{
	事件
	{
		持续 - 全局;
	}
}

规则("规则 38")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		游戏正在进行中 != 真;
	}

	动作
	{
		等待(1, 当为“假”时中止);
		重新开始比赛;
	}
}

规则("规则 39")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	动作
	{
		启用死亡回放时目标的HUD(事件玩家);
		开始强制设置玩家轮廓(事件玩家, 所有玩家(所有队伍), 假, 颜色(白色), 默认);
		开始强制设置玩家轮廓(所有玩家(所有队伍), 事件玩家, 假, 颜色(白色), 默认);
		隐藏姓名板(事件玩家, 所有玩家(所有队伍));
		隐藏姓名板(所有玩家(所有队伍), 事件玩家);
	}
}

规则("规则 39")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		D.Va;
	}

	条件
	{
		处于非初始状态(事件玩家) == 真;
	}

	动作
	{
		开始强制设置玩家轮廓(事件玩家, 所有玩家(所有队伍), 假, 颜色(白色), 默认);
		开始强制设置玩家轮廓(所有玩家(所有队伍), 事件玩家, 假, 颜色(白色), 默认);
	}
}

规则("规则 41")
{
	事件
	{
		玩家阵亡;
		双方;
		全部;
	}

	条件
	{
		所用英雄(攻击方) != 英雄(莱因哈特);
	}

	动作
	{
		复活(事件玩家);
	}
}

规则("规则 42")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		所用英雄(事件玩家) == 英雄(安娜);
		正在使用终极技能(事件玩家) == 真;
	}

	动作
	{
		开始调整玩家大小(事件玩家, 0.500, 真);
		设置引力(事件玩家, 75);
		设置跳跃垂直速度(事件玩家, 300);
	}
}

规则("规则 42")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		所用英雄(事件玩家) == 英雄(安娜);
		正在使用终极技能(事件玩家) != 真;
	}

	动作
	{
		开始调整玩家大小(事件玩家, 1, 真);
		设置引力(事件玩家, 100);
		设置跳跃垂直速度(事件玩家, 100);
	}
}

规则("规则 42")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		所用英雄(事件玩家) == 英雄(路霸);
		正在使用技能 2(事件玩家) == 真;
	}

	动作
	{
		开始调整玩家大小(事件玩家, 0.200, 真);
		设置引力(事件玩家, 75);
		设置移动速度(事件玩家, 280);
	}
}

规则("规则 42")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		所用英雄(事件玩家) == 英雄(路霸);
		正在使用技能 2(事件玩家) != 真;
	}

	动作
	{
		开始调整玩家大小(事件玩家, 1, 真);
		设置引力(事件玩家, 100);
		设置移动速度(事件玩家, 100);
	}
}

规则("安娜UI")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		安娜;
	}

	条件
	{
		游戏正在进行中 == 真;
	}

	动作
	{
		创建HUD文本(事件玩家, 自定义字符串("《~《~《按Q跳高高》~》~》"), 无, 无, 顶部, -1000, 颜色(红色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
	}
}

规则("托马斯UI")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		路霸;
	}

	条件
	{
		游戏正在进行中 == 真;
	}

	动作
	{
		创建HUD文本(事件玩家, 自定义字符串("《~《~《按E加速速》~》~》"), 无, 无, 顶部, -1000, 颜色(红色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
	}
}

规则("托马斯UI2")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		莱因哈特;
	}

	条件
	{
		游戏正在进行中 == 真;
	}

	动作
	{
		创建HUD文本(事件玩家, 自定义字符串("《~《~《满大招按Q发电电》~》~》"), 无, 无, 顶部, -1000, 颜色(红色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
	}
}

规则("[东方的黑名单]")
{
	事件
	{
		玩家加入比赛;
		双方;
		全部;
	}

	动作
	{
		"写上加入黑名单玩家的名字"
		If(自定义字符串("盖伊") == 自定义字符串("{0}", 事件玩家));
			移除玩家(事件玩家);
			大字体信息(所有玩家(所有队伍), 自定义字符串("伞兵{0}给爷爪巴！", 事件玩家));
		"添加人数请复制以下三条动作"
		Else If(自定义字符串("DamnShine") == 自定义字符串("{0}", 事件玩家));
			移除玩家(事件玩家);
			大字体信息(所有玩家(所有队伍), 自定义字符串("伞兵{0}给爷爪巴！", 事件玩家));
		"添加人数请复制以下三条动作"
		Else If(自定义字符串("BLUMA") == 自定义字符串("{0}", 事件玩家));
			移除玩家(事件玩家);
			大字体信息(所有玩家(所有队伍), 自定义字符串("伞兵{0}给爷爪巴！", 事件玩家));
		"添加人数请复制以下三条动作"
		Else If(自定义字符串("KOF9011") == 自定义字符串("{0}", 事件玩家));
			移除玩家(事件玩家);
			大字体信息(所有玩家(所有队伍), 自定义字符串("伞兵{0}给爷爪巴！", 事件玩家));
		"添加人数请复制以下三条动作"
		Else If(自定义字符串("S1MPLE") == 自定义字符串("{0}", 事件玩家));
			移除玩家(事件玩家);
			大字体信息(所有玩家(所有队伍), 自定义字符串("伞兵{0}给爷爪巴！", 事件玩家));
		"添加人数请复制以下三条动作"
		Else If(自定义字符串("月色") == 自定义字符串("{0}", 事件玩家));
			移除玩家(事件玩家);
			大字体信息(所有玩家(所有队伍), 自定义字符串("伞兵{0}给爷爪巴！", 事件玩家));
		"添加人数请复制以下三条动作"
		Else If(自定义字符串("呆萌的二哈") == 自定义字符串("{0}", 事件玩家));
			移除玩家(事件玩家);
			大字体信息(所有玩家(所有队伍), 自定义字符串("伞兵{0}给爷爪巴！", 事件玩家));
		"添加人数请复制以下三条动作"
		Else If(自定义字符串("UNRAVEL") == 自定义字符串("{0}", 事件玩家));
			移除玩家(事件玩家);
			大字体信息(所有玩家(所有队伍), 自定义字符串("伞兵{0}给爷爪巴！", 事件玩家));
		"添加人数请复制以下三条动作"
		Else If(自定义字符串("费兄") == 自定义字符串("{0}", 事件玩家));
			移除玩家(事件玩家);
			大字体信息(所有玩家(所有队伍), 自定义字符串("伞兵{0}给爷爪巴！", 事件玩家));
		"添加人数请复制以下三条动作"
		Else If(自定义字符串("最后一名血法") == 自定义字符串("{0}", 事件玩家));
			移除玩家(事件玩家);
			大字体信息(所有玩家(所有队伍), 自定义字符串("伞兵{0}给爷爪巴！", 事件玩家));
		"添加人数请复制以下三条动作"
		Else If(自定义字符串("我不可以说脏话") == 自定义字符串("{0}", 事件玩家));
			移除玩家(事件玩家);
			大字体信息(所有玩家(所有队伍), 自定义字符串("伞兵{0}给爷爪巴！", 事件玩家));
		"添加人数请复制以下三条动作"
		Else If(自定义字符串("跳跃之巫师") == 自定义字符串("{0}", 事件玩家));
			移除玩家(事件玩家);
			大字体信息(所有玩家(所有队伍), 自定义字符串("伞兵{0}给爷爪巴！", 事件玩家));
		"添加人数请复制以下三条动作"
		Else If(自定义字符串("为了部落") == 自定义字符串("{0}", 事件玩家));
			移除玩家(事件玩家);
			大字体信息(所有玩家(所有队伍), 自定义字符串("伞兵{0}给爷爪巴！", 事件玩家));
		"添加人数请复制以下三条动作"
		Else If(自定义字符串("掉线出血大姨妈") == 自定义字符串("{0}", 事件玩家));
			移除玩家(事件玩家);
			大字体信息(所有玩家(所有队伍), 自定义字符串("伞兵{0}给爷爪巴！", 事件玩家));
		"添加人数请复制以下三条动作"
		Else If(自定义字符串("斯派克") == 自定义字符串("{0}", 事件玩家));
			移除玩家(事件玩家);
			大字体信息(所有玩家(所有队伍), 自定义字符串("NT{0}NM$L", 事件玩家));
		"添加人数请复制以下三条动作"
		Else If(自定义字符串("sven") == 自定义字符串("{0}", 事件玩家));
			移除玩家(事件玩家);
			大字体信息(所有玩家(所有队伍), 自定义字符串("伞兵{0}给爷爪巴！", 事件玩家));
		"添加人数请复制以下三条动作"
		Else If(自定义字符串("可乐大魔王") == 自定义字符串("{0}", 事件玩家));
			移除玩家(事件玩家);
			大字体信息(所有玩家(所有队伍), 自定义字符串("伞兵{0}给爷爪巴！", 事件玩家));
		"添加人数请复制以下三条动作"
		Else If(自定义字符串("一只快乐的肥仔") == 自定义字符串("{0}", 事件玩家));
			移除玩家(事件玩家);
			大字体信息(所有玩家(所有队伍), 自定义字符串("伞兵{0}给爷爪巴！", 事件玩家));
		"添加人数请复制以下三条动作"
		Else If(自定义字符串("遇事不决出小美") == 自定义字符串("{0}", 事件玩家));
			移除玩家(事件玩家);
			大字体信息(所有玩家(所有队伍), 自定义字符串("伞兵{0}给爷爪巴！", 事件玩家));
		"添加人数请复制以下三条动作"
		Else If(自定义字符串("我我是是你你粑粑") == 自定义字符串("{0}", 事件玩家));
			移除玩家(事件玩家);
			大字体信息(所有玩家(所有队伍), 自定义字符串("伞兵{0}给爷爪巴！", 事件玩家));
		"添加人数请复制以下三条动作"
		Else If(自定义字符串("有梦想的小猪仔") == 自定义字符串("{0}", 事件玩家));
			移除玩家(事件玩家);
			大字体信息(所有玩家(所有队伍), 自定义字符串("伞兵{0}给爷爪巴！", 事件玩家));
		"添加人数请复制以下三条动作"
		Else If(自定义字符串("黑色通行证") == 自定义字符串("{0}", 事件玩家));
			移除玩家(事件玩家);
			大字体信息(所有玩家(所有队伍), 自定义字符串("伞兵{0}给爷爪巴！", 事件玩家));
		"添加人数请复制以下三条动作"
		Else If(自定义字符串("她曾经也说过爱我") == 自定义字符串("{0}", 事件玩家));
			移除玩家(事件玩家);
			大字体信息(所有玩家(所有队伍), 自定义字符串("伞兵{0}给爷爪巴！", 事件玩家));
		"添加人数请复制以下三条动作"
		Else If(自定义字符串("ShadowEagle") == 自定义字符串("{0}", 事件玩家));
			移除玩家(事件玩家);
			大字体信息(所有玩家(所有队伍), 自定义字符串("伞兵{0}给爷爪巴！", 事件玩家));
		"添加人数请复制以下三条动作"
		Else If(自定义字符串("骨灰上的低音炮") == 自定义字符串("{0}", 事件玩家));
			移除玩家(事件玩家);
			大字体信息(所有玩家(所有队伍), 自定义字符串("伞兵{0}给爷爪巴！", 事件玩家));
		"添加人数请复制以下三条动作"
		Else If(自定义字符串("随风拂柳") == 自定义字符串("{0}", 事件玩家));
			移除玩家(事件玩家);
			大字体信息(所有玩家(所有队伍), 自定义字符串("伞兵{0}给爷爪巴！", 事件玩家));
		"添加人数请复制以下三条动作"
		Else If(自定义字符串("DESIRE") == 自定义字符串("{0}", 事件玩家));
			移除玩家(事件玩家);
			大字体信息(所有玩家(所有队伍), 自定义字符串("伞兵{0}给爷爪巴！", 事件玩家));
		"添加人数请复制以下三条动作"
		Else If(自定义字符串("咕咕侠") == 自定义字符串("{0}", 事件玩家));
			移除玩家(事件玩家);
			大字体信息(所有玩家(所有队伍), 自定义字符串("伞兵{0}给爷爪巴！", 事件玩家));
		"添加人数请复制以下三条动作"
		Else If(自定义字符串("遇你难做智者") == 自定义字符串("{0}", 事件玩家));
			移除玩家(事件玩家);
			大字体信息(所有玩家(所有队伍), 自定义字符串("伞兵{0}给爷爪巴！", 事件玩家));
		"添加人数请复制以下三条动作"
		Else If(自定义字符串("铁拳进火葬场") == 自定义字符串("{0}", 事件玩家));
			移除玩家(事件玩家);
			大字体信息(所有玩家(所有队伍), 自定义字符串("伞兵{0}给爷爪巴！", 事件玩家));
		"添加人数请复制以下三条动作"
		Else If(自定义字符串("堕天") == 自定义字符串("{0}", 事件玩家));
			移除玩家(事件玩家);
			大字体信息(所有玩家(所有队伍), 自定义字符串("伞兵{0}给爷爪巴！", 事件玩家));
		"添加人数请复制以下三条动作"
		Else If(自定义字符串("ONISM") == 自定义字符串("{0}", 事件玩家));
			移除玩家(事件玩家);
			大字体信息(所有玩家(所有队伍), 自定义字符串("伞兵{0}给爷爪巴！", 事件玩家));
		"添加人数请复制以下三条动作"
		Else If(自定义字符串("咲葵26352") == 自定义字符串("{0}", 事件玩家));
			移除玩家(事件玩家);
			大字体信息(所有玩家(所有队伍), 自定义字符串("伞兵{0}给爷爪巴！", 事件玩家));
		"添加人数请复制以下三条动作"
		Else If(自定义字符串("嘻嘻哈哈每一天") == 自定义字符串("{0}", 事件玩家));
			移除玩家(事件玩家);
			大字体信息(所有玩家(所有队伍), 自定义字符串("伞兵{0}给爷爪巴！", 事件玩家));
		"添加人数请复制以下三条动作"
		Else If(自定义字符串("她随风散聚不由我") == 自定义字符串("{0}", 事件玩家));
			移除玩家(事件玩家);
			大字体信息(所有玩家(所有队伍), 自定义字符串("伞兵{0}给爷爪巴！", 事件玩家));
		"添加人数请复制以下三条动作"
		Else If(自定义字符串("shenfan") == 自定义字符串("{0}", 事件玩家));
			移除玩家(事件玩家);
			大字体信息(所有玩家(所有队伍), 自定义字符串("伞兵{0}给爷爪巴！", 事件玩家));
		"添加人数请复制以下三条动作"
		Else If(自定义字符串("") == 自定义字符串("{0}", 事件玩家));
			移除玩家(事件玩家);
			大字体信息(所有玩家(所有队伍), 自定义字符串("伞兵{0}给爷爪巴！", 事件玩家));
	}
}

规则("随机英雄小锤")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(主要攻击模式)) == 真;
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		按钮被按下(事件玩家, 按钮(跳跃)) == 真;
	}

	动作
	{
		开始强制玩家选择英雄(事件玩家, 英雄(布丽吉塔));
	}
}

规则("随机英雄铁拳")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(主要攻击模式)) == 真;
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		按钮被按下(事件玩家, 按钮(跳跃)) == 真;
	}

	动作
	{
		"铁拳"
		开始强制玩家选择英雄(事件玩家, 英雄(末日铁拳));
	}
}

规则("随机英雄狂鼠")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(主要攻击模式)) == 真;
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		按钮被按下(事件玩家, 按钮(跳跃)) == 真;
	}

	动作
	{
		开始强制玩家选择英雄(事件玩家, 英雄(狂鼠));
	}
}

规则("随机英雄路霸")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(主要攻击模式)) == 真;
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		按钮被按下(事件玩家, 按钮(跳跃)) == 真;
	}

	动作
	{
		"铁拳"
		开始强制玩家选择英雄(事件玩家, 英雄(路霸));
	}
}

规则("随机英雄小美")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(主要攻击模式)) == 真;
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		按钮被按下(事件玩家, 按钮(跳跃)) == 真;
	}

	动作
	{
		"铁拳"
		开始强制玩家选择英雄(事件玩家, 英雄(美));
	}
}
设置
{
	主程序
	{
		描述: "列文虎克找东西-漓江塔★找到物品并且按 [F] ★★★8笼三个装的包子★11个行李箱外形的风扇★7张小美照片★28个平板电脑★4个青瓷葫芦★1个“宏宇”★★★按 [SHIFT] 奔跑 ★ 按[L]  返回大厅 ★ 务必在画面设置设定中或高的模型细节和100%的渲染★ 祝你欧气满满！★Made by Foren#2660  授权搬运by KDLin#5710 ★ 提示和更多地图上owmod.net网站搜索"
	}

	大厅
	{
		地图轮换: 暂停轮换
		比赛结束后转换队伍: 否
		玩家上限 队伍1: 0
		观战者人数上限: 0
		返回大厅: 从不
	}

	模式
	{
		勇夺锦旗
		{
			启用地图
			{
			}
		}

		突击模式
		{
			启用地图
			{
				漓江塔
			}
		}

		综合
		{
			允许切换英雄: 关闭
			复生时间: 0%
			急救包刷新: 禁用
			消灭提示: 关闭
			消灭镜头: 关闭
			游戏模式开始: 即时
			英雄限制: 关闭
			随机英雄复生: 开启
		}
	}

	英雄
	{
		综合
		{
			主要攻击模式: 关闭
			仅爆头有效: 开启
			战斗时终极技能充能速度: 0%
			技能冷却时间: 50%
			移动速度: 110%
			终极技能充能速度: 10%
			终极技能自动充能速度: 0%
			近身攻击: 关闭

			禅雅塔
			{
				主要攻击模式: 关闭
				乱: 关闭
				谐: 关闭
				辅助攻击模式: 关闭
				近身攻击: 关闭
			}

			启用英雄
			{
				禅雅塔
			}
		}
	}
}

变量
{
	玩家:
		26: AA
		27: AB
		28: ThisNode
        29: ThisPoint
		30: SpeedToggle
}


规则("// copy and paste the following line into the game title:")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(装填)) == 真;
		按钮被按下(事件玩家, 按钮(蹲下)) == 真;
		按钮被按下(事件玩家, 按钮(技能2)) == 假;
		按钮被按下(事件玩家, 按钮(跳跃)) == 假;
		按钮被按下(事件玩家, 按钮(互动)) == 假;
	}

	动作
	{
        事件玩家.ThisPoint = 1;
		While(事件玩家.ThisPoint > 0 && 事件玩家.ThisPoint <= 数量(全局.A));
			If(事件玩家.F[事件玩家.ThisPoint] != 真&& 全局.A[事件玩家.ThisPoint]!=0);
					传送(事件玩家, 最近的可行走位置(全局.A[事件玩家.ThisPoint]));
					事件玩家.ThisPoint = 数量(全局.P) + 1000;
			Else;
				事件玩家.ThisPoint = 事件玩家.ThisPoint + 1;
			End;
		End;
	}
}


规则("★ Find 59 items in Lijiang ★ (list in description)")
{
	事件
	{
		持续 - 全局;
	}
}

规则("// don't add spectators, they see all spoilers!")
{
	事件
	{
		持续 - 全局;
	}
}

规则("// \"Find Items\" ver. 1.1")
{
	事件
	{
		持续 - 全局;
	}
}

规则("// all maps and additional info: bit.do/finditems")
{
	事件
	{
		持续 - 全局;
	}
}

规则("// original mode is made by Foren#2660")
{
	事件
	{
		持续 - 全局;
	}
}

规则("beginning of the game")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		关闭游戏预设完成条件;
		关闭游戏预设计分模式;
		全局.N = 1;
		全局.G = 0;
		全局.H = 矢量(0, -99, 0);
		全局.T = -1;
		全局.Q = 0;
		设置比赛时间(3600);
	}
}

规则("Lijiang ===================================================================")
{
	事件
	{
		持续 - 全局;
	}
}

规则("8 boxes with three dumplings")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.G += 1;
		全局.I = 0;
		全局.A[全局.N] = 矢量(-0.982, 1.046, -12.249);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-20.119, 1.108, -17.267);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-24.899, 1.054, -16.103);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-12.663, 1.091, -44.326);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-48.806, 3.128, -26.925);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-58.973, 3.066, -15.501);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-60.857, 3.077, -11.773);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-32.251, 1.035, -37.053);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.C[全局.G] = 全局.I;
	}
}

规则("11 suitcase fans")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.G += 1;
		全局.I = 0;
		全局.A[全局.N] = 矢量(24.191, 0.725, -33.948);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(32.156, -0.464, -14.372);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(40.649, -0.620, -15.237);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(52.887, 3.397, -11.877);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(65.518, 3.413, -11.863);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-21.592, 0.464, -37.437);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-29.925, -0.578, -14.303);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-50.662, 3.347, -11.866);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-63.412, 3.454, -11.748);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-35.567, 5.277, -11.555);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(23.741, 0.471, -37.528);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.C[全局.G] = 全局.I;
	}
}

规则("7 photos of Mei")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.G += 1;
		全局.I = 0;
		全局.A[全局.N] = 矢量(62.889, 3.032, -11.863);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-7.875, -0.339, -20.761);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(9.728, -0.272, -61.325);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-24.307, 0.075, -29.041);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-31.274, 0.055, -11.145);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-30.141, 0.135, -33.074);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(32.153, 0.073, -33.210);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.C[全局.G] = 全局.I;
	}
}

规则("28 tablets")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.G += 1;
		全局.I = 0;
		全局.A[全局.N] = 矢量(3.589, 270.993, 302.392);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-20.137, 268.015, 292.024);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-3.711, 271.007, 307.405);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(22.114, 270.559, 334.289);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(23.864, 268.038, 303.305);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(23.891, 268.049, 303.523);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(40.733, 267.698, 302.095);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(53.892, 98.620, 164.987);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(56.540, 95.136, 142.304);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(41.645, 95.916, 141.037);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(25.667, 94.997, 158.116);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(14.241, 95.733, 112.614);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-12.935, 95.743, 112.967);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-8.745, 96.013, 126.306);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-7.045, 94.856, 158.052);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(3.050, 94.909, 167.200);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-53.882, 98.599, 164.978);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-25.389, 95.001, 158.255);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-13.140, 270.986, 336.648);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(13.195, 270.939, 335.095);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-51.993, 94.575, 164.591);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(51.255, 94.565, 162.782);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-61.224, 268.230, 352.846);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-62.684, 268.473, 349.099);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-80.144, 5.388, -24.901);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-81.091, 5.024, -21.020);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-85.038, 97.430, 148.328);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-86.944, 97.084, 151.861);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.C[全局.G] = 全局.I;
	}
}

规则("4 green porcelain vases")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.G += 1;
		全局.I = 0;
		全局.A[全局.N] = 矢量(24.599, 99.040, 165.100);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(9.513, 97.714, 112.408);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-24.690, 99.013, 166.359);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-49.290, 95.199, 136.107);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.C[全局.G] = 全局.I;
	}
}

规则("1 \"宏宇\"")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.G += 1;
		全局.I = 0;
		全局.A[全局.N] = 矢量(17.808, 272.140, 323.999);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.C[全局.G] = 全局.I;
	}
}

规则("防替换teleports Lijiang")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.P[1] = 矢量(0.010, 268.881, 285.742);
		创建效果(所有玩家(所有队伍), 环, 颜色(蓝色), 全局.P[1], 1.700, 可见);
		全局.P[2] = 矢量(0.985, 0.412, -29.989);
		创建效果(所有玩家(所有队伍), 环, 颜色(蓝色), 全局.P[2], 1.700, 可见);
		全局.P[3] = 矢量(-0.005, 95.549, 143.320);
		创建效果(所有玩家(所有队伍), 环, 颜色(蓝色), 全局.P[3], 1.300, 可见);
		禁用 全局.P[4] = 矢量(-17.971, 18.549, -140.394);
		禁用 创建效果(所有玩家(所有队伍), 环, 颜色(蓝色), 全局.P[4], 1.300, 可见);
		全局.P[5] = 矢量(-16.848, 18.549, -125.450);
		创建效果(所有玩家(所有队伍), 环, 颜色(蓝色), 全局.P[5], 1.500, 可见);
		全局.P[6] = 矢量(-12.147, 17.710, -125.532);
		创建效果(所有玩家(所有队伍), 环, 颜色(蓝色), 全局.P[6], 1.500, 可见);
		全局.P[7] = 矢量(278.904, 11.647, 209.276);
		创建效果(所有玩家(所有队伍), 环, 颜色(蓝色), 全局.P[7], 1.500, 可见);
		全局.P[8] = 矢量(282.629, 12.646, 207.498);
		创建效果(所有玩家(所有队伍), 环, 颜色(蓝色), 全局.P[8], 1.500, 可见);
		全局.P[9] = 矢量(285.267, 11.893, 222.790);
		创建效果(所有玩家(所有队伍), 环, 颜色(蓝色), 全局.P[9], 1.500, 可见);
		全局.P[10] = 矢量(288.781, 12.646, 221.270);
		创建效果(所有玩家(所有队伍), 环, 颜色(蓝色), 全局.P[10], 1.500, 可见);
		全局.P[11] = 矢量(-17.827, 18.549, -110.516);
		创建效果(所有玩家(所有队伍), 环, 颜色(蓝色), 全局.P[11], 1.300, 可见);
		全局.P[12] = 矢量(-13.453, 17.864, -110.417);
		创建效果(所有玩家(所有队伍), 环, 颜色(蓝色), 全局.P[12], 1.300, 可见);
	}
}

规则("I=============================================================================")
{
	事件
	{
		持续 - 全局;
	}
}

规则("calculating total number of items")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		全局.O == 无;
	}

	动作
	{
		全局.O = 全局.N - 1;
	}
}

规则("player found item")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		具有状态(事件玩家, 冰冻) == 假;
		事件玩家.Z == 无;
	}

	动作
	{
		根据条件跳过(事件玩家.L != 无, 1);
		事件玩家.L = 1;
		根据条件跳过(全局.A[事件玩家.L] == 无, 18);
		根据条件跳过(事件玩家.F[事件玩家.L] == 真, 17);
		根据条件跳过(相距距离(事件玩家, 全局.A[事件玩家.L]) > 3, 16);
		事件玩家.O = 全局.X[事件玩家.L];
		事件玩家.Z = 全局.A[事件玩家.L];
		在索引处修改全局变量(D, 事件玩家.L, 添加至数组, 事件玩家);
		事件玩家.K = 全局.A[事件玩家.L];
		事件玩家.Q += 1;
		事件玩家.F[事件玩家.L] = 真;
		事件玩家.G[全局.X[事件玩家.L]] += 1;
		事件玩家.M = 事件玩家.L;
		根据条件跳过(事件玩家.Q == 全局.O, 1);
		小字体信息(事件玩家, 字符串("{0} / {1}", 事件玩家.G[全局.X[事件玩家.M]], 全局.C[全局.X[事件玩家.M]]));
		根据条件跳过(事件玩家.G[事件玩家.O] < 全局.C[事件玩家.O], 4);
		事件玩家.A = 全局.X[事件玩家.L];
		播放效果(事件玩家, 环状爆炸, 颜色(亮紫色), 事件玩家.Z, 7);
		播放效果(事件玩家, 正面状态施加声音, 颜色(白色), 事件玩家, 30);
		播放效果(事件玩家, 有益选择效果 , 颜色(亮紫色), 事件玩家.Z, 1);
		事件玩家.L = 999;
		事件玩家.L += 1;
		根据条件跳过(事件玩家.L >= 全局.O - 4, 8);
		根据条件跳过(相距距离(事件玩家, 全局.A[事件玩家.L]) <= 3, 1);
		事件玩家.L += 1;
		根据条件跳过(相距距离(事件玩家, 全局.A[事件玩家.L]) <= 3, 1);
		事件玩家.L += 1;
		根据条件跳过(相距距离(事件玩家, 全局.A[事件玩家.L]) <= 3, 1);
		事件玩家.L += 1;
		根据条件跳过(相距距离(事件玩家, 全局.A[事件玩家.L]) <= 3, 1);
		事件玩家.L += 1;
		等待(0.001, 无视条件);
		根据条件跳过(事件玩家.L != 全局.O + 1, 1);
		事件玩家.J = 真;
		根据条件循环(事件玩家.L <= 全局.O);
		事件玩家.L = 1;
	}
}

规则("playing yellow effects")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.Z != 无;
	}

	动作
	{
		播放效果(事件玩家, 环状爆炸, 颜色(黄色), 事件玩家.Z, 3);
		播放效果(事件玩家, 状态爆炸声音, 颜色(黄色), 事件玩家, 20);
		等待(0.250, 无视条件);
		事件玩家.Z = 无;
		根据条件跳过(事件玩家.Q < 全局.O, 4);
		消除HUD文本(事件玩家.W[1]);
		创建HUD文本(所有玩家(所有队伍), 无, 无, 字符串("{0} {1} {2}", 字符串("{0} {1}", 英雄图标字符串(所用英雄(事件玩家)), 事件玩家), 自定义字符串("已找到"), 字符串("{0} / {1}", 事件玩家.Q,
			全局.O)), 右边, 60 - 事件玩家.Q, 颜色(白色), 颜色(白色), 颜色(绿色), 可见和字符串, 默认可见度);
		事件玩家.W[1] = 上一个文本ID;
		中止;
		消除HUD文本(事件玩家.W[1]);
		创建HUD文本(所有玩家(所有队伍), 无, 无, 字符串("{0} {1} {2}", 字符串("{0} {1}", 英雄图标字符串(所用英雄(事件玩家)), 事件玩家), 自定义字符串("三个装的包子"), 字符串("{0} / {1}", 事件玩家.Q,
			全局.O)), 右边, 60 - 事件玩家.Q, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		事件玩家.W[1] = 上一个文本ID;
	}
}

规则("player spawn")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
	}

	动作
	{
		事件玩家.Q = 0;
		修改全局变量(S, 添加至数组, 事件玩家);
		创建HUD文本(所有玩家(所有队伍), 无, 无, 字符串("{0} {1} {2}", 字符串("{0} {1}", 英雄图标字符串(所用英雄(事件玩家)), 事件玩家), 自定义字符串("已找到"), 字符串("{0} / {1}", 事件玩家.Q,
			全局.O)), 右边, 60, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		事件玩家.W[1] = 上一个文本ID;
		事件玩家.J = 假;
		事件玩家.T = 0;
		事件玩家.S = 150;
		设置状态(事件玩家, 无, 无敌, 9999);
		创建效果(事件玩家, 火花, 颜色(黄色), 事件玩家.K, 2, 可见，位置和半径);
		全局.T = 0;
		全局.Q = 0;
		事件玩家.K = 矢量(0, -99, 0);
		等待(5, 无视条件);
		大字体信息(事件玩家, 字符串("{0} {1} {2}", 字符串("寻找"), 全局.O, 字符串("物品")));
		等待(3, 无视条件);
		小字体信息(事件玩家, 字符串("{0} - {1}", 字符串("技能1"), 字符串("运行")));
	}
}

规则("spawn position")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
	}

	动作
	{
		传送(事件玩家, 矢量(-66.946, 5.970, -31.288));
		等待(2, 无视条件);
		设置朝向(事件玩家, 矢量(1, 0, 0), 至地图);
	}
}

规则("creating HUD text 1-5")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
	}

	动作
	{
		根据条件跳过(全局.G < 1, 2);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 自定义字符串("三个装的包子"), 字符串("{0} / {1}", 事件玩家.G[1], 全局.C[1]), 字符串("物品")), 无, 无, 左边, 1, 颜色(黄色), 颜色(白色), 颜色(白色),
			可见和字符串, 默认可见度);
		事件玩家.E[1] = 上一个文本ID;
		根据条件跳过(全局.G < 2, 2);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 自定义字符串("行李箱外形的风扇"), 字符串("{0} / {1}", 事件玩家.G[2], 全局.C[2]), 字符串("物品")), 无, 无, 左边, 2, 颜色(黄色), 颜色(白色), 颜色(白色),
			可见和字符串, 默认可见度);
		事件玩家.E[2] = 上一个文本ID;
		根据条件跳过(全局.G < 3, 2);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 自定义字符串("小美照片"), 字符串("{0} / {1}", 事件玩家.G[3], 全局.C[3]), 字符串("物品")), 无, 无, 左边, 3, 颜色(黄色), 颜色(白色), 颜色(白色),
			可见和字符串, 默认可见度);
		事件玩家.E[3] = 上一个文本ID;
		根据条件跳过(全局.G < 4, 2);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 自定义字符串("已找到"), 字符串("{0} / {1}", 事件玩家.G[4], 全局.C[4]), 字符串("物品")), 无, 无, 左边, 4, 颜色(黄色), 颜色(白色), 颜色(白色),
			可见和字符串, 默认可见度);
		事件玩家.E[4] = 上一个文本ID;
		根据条件跳过(全局.G < 5, 2);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 自定义字符串("已找到"), 字符串("{0} / {1}", 事件玩家.G[5], 全局.C[5]), 字符串("物品")), 无, 无, 左边, 5, 颜色(黄色), 颜色(白色), 颜色(白色),
			可见和字符串, 默认可见度);
		事件玩家.E[5] = 上一个文本ID;
	}
}

规则("creating HUD text 6-10")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
	}

	动作
	{
		根据条件跳过(全局.G < 6, 2);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 自定义字符串("已找到"), 字符串("{0} / {1}", 事件玩家.G[6], 全局.C[6]), 字符串("物品")), 无, 无, 左边, 6, 颜色(黄色), 颜色(白色), 颜色(白色),
			可见和字符串, 默认可见度);
		事件玩家.E[6] = 上一个文本ID;
		根据条件跳过(全局.G < 7, 2);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 自定义字符串("已找到"), 字符串("{0} / {1}", 事件玩家.G[7], 全局.C[7]), 字符串("物品")), 无, 无, 左边, 7, 颜色(黄色), 颜色(白色), 颜色(白色),
			可见和字符串, 默认可见度);
		事件玩家.E[7] = 上一个文本ID;
		根据条件跳过(全局.G < 8, 2);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 自定义字符串("已找到"), 字符串("{0} / {1}", 事件玩家.G[8], 全局.C[8]), 字符串("物品")), 无, 无, 左边, 8, 颜色(黄色), 颜色(白色), 颜色(白色),
			可见和字符串, 默认可见度);
		事件玩家.E[8] = 上一个文本ID;
		根据条件跳过(全局.G < 9, 2);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 自定义字符串("已找到"), 字符串("{0} / {1}", 事件玩家.G[9], 全局.C[9]), 字符串("物品")), 无, 无, 左边, 9, 颜色(黄色), 颜色(白色), 颜色(白色),
			可见和字符串, 默认可见度);
		事件玩家.E[9] = 上一个文本ID;
		根据条件跳过(全局.G < 10, 2);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 自定义字符串("已找到"), 字符串("{0} / {1}", 事件玩家.G[10], 全局.C[10]), 字符串("物品")), 无, 无, 左边, 10, 颜色(黄色), 颜色(白色), 颜色(白色),
			可见和字符串, 默认可见度);
		事件玩家.E[10] = 上一个文本ID;
		事件玩家.A = 0;
	}
}

规则("all items found (victory!)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.Q == 全局.O;
		已重生(事件玩家) == 真;
	}

	动作
	{
		大字体信息(所有玩家(所有队伍), 字符串("{0} {1} {2}", 英雄图标字符串(所用英雄(事件玩家)), 事件玩家, 字符串("{0}！", 字符串("胜者"))));
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
		播放效果(事件玩家, 有益爆炸, 颜色(黄色), 事件玩家, 10);
		播放效果(事件玩家, 环状爆炸, 颜色(亮紫色), 事件玩家, 20);
		全局.H = 事件玩家;
		交流(事件玩家, 表情（上）);
		设置慢动作(30);
		等待(1.250, 无视条件);
		设置慢动作(100);
		等待(3, 无视条件);
		小字体信息(事件玩家, 字符串("{0} {1}", 事件玩家, 字符串("{0}！", 字符串("可见"))));
	}
}

规则("player pressed \"F\" key on the empty place")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.J == 真;
		具有状态(事件玩家, 冰冻) == 假;
		事件玩家.Q != 全局.O;
	}

	动作
	{
		根据条件跳过(事件玩家.T > 4.500, 1);
		事件玩家.T += 0.500;
		播放效果(事件玩家, 负面状态施加声音, 颜色(白色), 事件玩家, 50);
		设置状态(事件玩家, 无, 冰冻, 事件玩家.T);
		事件玩家.R = 事件玩家.T;
		大字体信息(事件玩家, 字符串("{0} {1}", 字符串("否"), 字符串("物品")));
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("下一次尝试"), 字符串("{0}秒", 取整(事件玩家.R, 上))));
		等待(事件玩家.T, 无视条件);
		事件玩家.J = 假;
	}
}

规则("player is frozen")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.J == 真;
	}

	动作
	{
		等待(1, 无视条件);
		事件玩家.R -= 1;
	}
}

规则("create all 60 effects at the beginning of the match")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		创建效果(所有玩家(所有队伍), 火花, 颜色(黄色), 全局.H, 2, 可见，位置和半径);
		创建效果(所有玩家(所有队伍), 火花, 颜色(亮紫色), 全局.H, 2, 可见，位置和半径);
		创建效果(全局.D[1], 有益光环, 颜色(黄色), 全局.A[1], 1, 可见);
		创建效果(全局.D[2], 有益光环, 颜色(黄色), 全局.A[2], 1, 可见);
		创建效果(全局.D[3], 有益光环, 颜色(黄色), 全局.A[3], 1, 可见);
		创建效果(全局.D[4], 有益光环, 颜色(黄色), 全局.A[4], 1, 可见);
		创建效果(全局.D[5], 有益光环, 颜色(黄色), 全局.A[5], 1, 可见);
		创建效果(全局.D[6], 有益光环, 颜色(黄色), 全局.A[6], 1, 可见);
		创建效果(全局.D[7], 有益光环, 颜色(黄色), 全局.A[7], 1, 可见);
		创建效果(全局.D[8], 有益光环, 颜色(黄色), 全局.A[8], 1, 可见);
		创建效果(全局.D[9], 有益光环, 颜色(黄色), 全局.A[9], 1, 可见);
		创建效果(全局.D[10], 有益光环, 颜色(黄色), 全局.A[10], 1, 可见);
		创建效果(全局.D[11], 有益光环, 颜色(黄色), 全局.A[11], 1, 可见);
		创建效果(全局.D[12], 有益光环, 颜色(黄色), 全局.A[12], 1, 可见);
		创建效果(全局.D[13], 有益光环, 颜色(黄色), 全局.A[13], 1, 可见);
		创建效果(全局.D[14], 有益光环, 颜色(黄色), 全局.A[14], 1, 可见);
		创建效果(全局.D[15], 有益光环, 颜色(黄色), 全局.A[15], 1, 可见);
		创建效果(全局.D[16], 有益光环, 颜色(黄色), 全局.A[16], 1, 可见);
		创建效果(全局.D[17], 有益光环, 颜色(黄色), 全局.A[17], 1, 可见);
		创建效果(全局.D[18], 有益光环, 颜色(黄色), 全局.A[18], 1, 可见);
		创建效果(全局.D[19], 有益光环, 颜色(黄色), 全局.A[19], 1, 可见);
		创建效果(全局.D[20], 有益光环, 颜色(黄色), 全局.A[20], 1, 可见);
		创建效果(全局.D[21], 有益光环, 颜色(黄色), 全局.A[21], 1, 可见);
		创建效果(全局.D[22], 有益光环, 颜色(黄色), 全局.A[22], 1, 可见);
		创建效果(全局.D[23], 有益光环, 颜色(黄色), 全局.A[23], 1, 可见);
		创建效果(全局.D[24], 有益光环, 颜色(黄色), 全局.A[24], 1, 可见);
		创建效果(全局.D[25], 有益光环, 颜色(黄色), 全局.A[25], 1, 可见);
		创建效果(全局.D[26], 有益光环, 颜色(黄色), 全局.A[26], 1, 可见);
		创建效果(全局.D[27], 有益光环, 颜色(黄色), 全局.A[27], 1, 可见);
		创建效果(全局.D[28], 有益光环, 颜色(黄色), 全局.A[28], 1, 可见);
		创建效果(全局.D[29], 有益光环, 颜色(黄色), 全局.A[29], 1, 可见);
		创建效果(全局.D[30], 有益光环, 颜色(黄色), 全局.A[30], 1, 可见);
		创建效果(全局.D[31], 有益光环, 颜色(黄色), 全局.A[31], 1, 可见);
		创建效果(全局.D[32], 有益光环, 颜色(黄色), 全局.A[32], 1, 可见);
		创建效果(全局.D[33], 有益光环, 颜色(黄色), 全局.A[33], 1, 可见);
		创建效果(全局.D[34], 有益光环, 颜色(黄色), 全局.A[34], 1, 可见);
		创建效果(全局.D[35], 有益光环, 颜色(黄色), 全局.A[35], 1, 可见);
		创建效果(全局.D[36], 有益光环, 颜色(黄色), 全局.A[36], 1, 可见);
		创建效果(全局.D[37], 有益光环, 颜色(黄色), 全局.A[37], 1, 可见);
		创建效果(全局.D[38], 有益光环, 颜色(黄色), 全局.A[38], 1, 可见);
		创建效果(全局.D[39], 有益光环, 颜色(黄色), 全局.A[39], 1, 可见);
		创建效果(全局.D[40], 有益光环, 颜色(黄色), 全局.A[40], 1, 可见);
		创建效果(全局.D[41], 有益光环, 颜色(黄色), 全局.A[41], 1, 可见);
		创建效果(全局.D[42], 有益光环, 颜色(黄色), 全局.A[42], 1, 可见);
		创建效果(全局.D[43], 有益光环, 颜色(黄色), 全局.A[43], 1, 可见);
		创建效果(全局.D[44], 有益光环, 颜色(黄色), 全局.A[44], 1, 可见);
		创建效果(全局.D[45], 有益光环, 颜色(黄色), 全局.A[45], 1, 可见);
		创建效果(全局.D[46], 有益光环, 颜色(黄色), 全局.A[46], 1, 可见);
		创建效果(全局.D[47], 有益光环, 颜色(黄色), 全局.A[47], 1, 可见);
		创建效果(全局.D[48], 有益光环, 颜色(黄色), 全局.A[48], 1, 可见);
		创建效果(全局.D[49], 有益光环, 颜色(黄色), 全局.A[49], 1, 可见);
		创建效果(全局.D[50], 有益光环, 颜色(黄色), 全局.A[50], 1, 可见);
		创建效果(全局.D[51], 有益光环, 颜色(黄色), 全局.A[51], 1, 可见);
		创建效果(全局.D[52], 有益光环, 颜色(黄色), 全局.A[52], 1, 可见);
		创建效果(全局.D[53], 有益光环, 颜色(黄色), 全局.A[53], 1, 可见);
		创建效果(全局.D[54], 有益光环, 颜色(黄色), 全局.A[54], 1, 可见);
		创建效果(全局.D[55], 有益光环, 颜色(黄色), 全局.A[55], 1, 可见);
		创建效果(全局.D[56], 有益光环, 颜色(黄色), 全局.A[56], 1, 可见);
		创建效果(全局.D[57], 有益光环, 颜色(黄色), 全局.A[57], 1, 可见);
		创建效果(全局.D[58], 有益光环, 颜色(黄色), 全局.A[58], 1, 可见);
		创建效果(全局.D[59], 有益光环, 颜色(黄色), 全局.A[59], 1, 可见);
		创建效果(全局.D[60], 有益光环, 颜色(黄色), 全局.A[60], 1, 可见);
	}
}

规则("shift key is pressed (acceleration)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(技能1)) == 真;
	}

	动作
	{
		设置移动速度(事件玩家, 事件玩家.S);
	}
}

规则("shift key is not pressed (slowdown)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(技能1)) == 假;
	}

	动作
	{
		设置移动速度(事件玩家, 110);
	}
}

禁用 规则("teleport cooldown")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.B == 真;
	}

	动作
	{
		等待(2, 无视条件);
		事件玩家.B = 假;
		如条件为”真“则循环;
	}
}

禁用 规则("teleport 1")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.B == 假;
		全局.P[1] != 0;
		相距距离(事件玩家, 全局.P[1]) <= 2;
	}

	动作
	{
		传送(事件玩家, 全局.P[2]);
		事件玩家.B = 真;
		播放效果(事件玩家, 有益爆炸, 颜色(蓝色), 事件玩家, 5);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
	}
}

禁用 规则("teleport 2")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.B == 假;
		全局.P[2] != 0;
		相距距离(事件玩家, 全局.P[2]) <= 2;
	}

	动作
	{
		传送(事件玩家, 全局.P[3]);
		事件玩家.B = 真;
		播放效果(事件玩家, 有益爆炸, 颜色(蓝色), 事件玩家, 5);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
	}
}

禁用 规则("teleport 3")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.B == 假;
		全局.P[3] != 0;
		相距距离(事件玩家, 全局.P[3]) <= 2;
	}

	动作
	{
		传送(事件玩家, 全局.P[1]);
		事件玩家.B = 真;
		播放效果(事件玩家, 有益爆炸, 颜色(蓝色), 事件玩家, 5);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
	}
}

禁用 规则("teleport 4")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.B == 假;
		全局.P[4] != 0;
		相距距离(事件玩家, 全局.P[4]) <= 2;
	}

	动作
	{
		传送(事件玩家, 全局.P[3]);
		事件玩家.B = 真;
		播放效果(事件玩家, 有益爆炸, 颜色(蓝色), 事件玩家, 5);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
	}
}

禁用 规则("teleport 5")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.B == 假;
		全局.P[5] != 0;
		相距距离(事件玩家, 全局.P[5]) <= 2;
	}

	动作
	{
		传送(事件玩家, 全局.P[6]);
		事件玩家.B = 真;
		播放效果(事件玩家, 有益爆炸, 颜色(蓝色), 事件玩家, 5);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
	}
}

禁用 规则("teleport 6")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.B == 假;
		全局.P[6] != 0;
		相距距离(事件玩家, 全局.P[6]) <= 2;
	}

	动作
	{
		传送(事件玩家, 全局.P[5]);
		事件玩家.B = 真;
		播放效果(事件玩家, 有益爆炸, 颜色(蓝色), 事件玩家, 5);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
	}
}

禁用 规则("teleport 7")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.B == 假;
		全局.P[7] != 0;
		相距距离(事件玩家, 全局.P[7]) <= 2;
	}

	动作
	{
		传送(事件玩家, 全局.P[8]);
		事件玩家.B = 真;
		播放效果(事件玩家, 有益爆炸, 颜色(蓝色), 事件玩家, 5);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
	}
}

禁用 规则("teleport 8")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.B == 假;
		全局.P[8] != 0;
		相距距离(事件玩家, 全局.P[8]) <= 2;
	}

	动作
	{
		传送(事件玩家, 全局.P[7]);
		事件玩家.B = 真;
		播放效果(事件玩家, 有益爆炸, 颜色(蓝色), 事件玩家, 5);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
	}
}

禁用 规则("teleport 9")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.B == 假;
		全局.P[9] != 0;
		相距距离(事件玩家, 全局.P[9]) <= 2;
	}

	动作
	{
		传送(事件玩家, 全局.P[10]);
		事件玩家.B = 真;
		播放效果(事件玩家, 有益爆炸, 颜色(蓝色), 事件玩家, 5);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
	}
}

禁用 规则("teleport 10")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.B == 假;
		全局.P[10] != 0;
		相距距离(事件玩家, 全局.P[10]) <= 2;
	}

	动作
	{
		传送(事件玩家, 全局.P[9]);
		事件玩家.B = 真;
		播放效果(事件玩家, 有益爆炸, 颜色(蓝色), 事件玩家, 5);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
	}
}

禁用 规则("teleport 11")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.B == 假;
		全局.P[11] != 0;
		相距距离(事件玩家, 全局.P[11]) <= 2;
	}

	动作
	{
		传送(事件玩家, 全局.P[12]);
		事件玩家.B = 真;
		播放效果(事件玩家, 有益爆炸, 颜色(蓝色), 事件玩家, 5);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
	}
}

禁用 规则("teleport 12")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.B == 假;
		全局.P[12] != 0;
		相距距离(事件玩家, 全局.P[12]) <= 2;
	}

	动作
	{
		传送(事件玩家, 全局.P[11]);
		事件玩家.B = 真;
		播放效果(事件玩家, 有益爆炸, 颜色(蓝色), 事件玩家, 5);
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
	}
}

规则("acceleration after finding a group of items")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.A > 0;
		事件玩家.S <= 300;
		全局.G > 0;
		事件玩家.Q < 全局.O;
	}

	动作
	{
		事件玩家.S += 150 / 全局.G;
		等待(1, 无视条件);
		大字体信息(事件玩家, 字符串("{0} {1}", 字符串("速度"), 字符串("升级")));
		等待(2, 无视条件);
		小字体信息(事件玩家, 字符串("{0} - {1}", 字符串("技能1"), 字符串("运行")));
	}
}

规则("player found the last item in the group 1-5")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.A > 0;
		事件玩家.A <= 5;
	}

	动作
	{
		事件玩家.N = 1;
		根据条件跳过(事件玩家.A != 事件玩家.N, 2);
		消除HUD文本(事件玩家.E[事件玩家.N]);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 自定义字符串("已找到"), 字符串("{0} / {1}", 全局.C[1], 全局.C[1]), 字符串("物品")), 无, 无, 左边, 1, 颜色(绿色), 颜色(白色), 颜色(白色),
			可见和字符串, 默认可见度);
		事件玩家.N = 2;
		根据条件跳过(事件玩家.A != 事件玩家.N, 2);
		消除HUD文本(事件玩家.E[事件玩家.N]);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 自定义字符串("已找到"), 字符串("{0} / {1}", 全局.C[2], 全局.C[2]), 字符串("物品")), 无, 无, 左边, 2, 颜色(绿色), 颜色(白色), 颜色(白色),
			可见和字符串, 默认可见度);
		事件玩家.N = 3;
		根据条件跳过(事件玩家.A != 事件玩家.N, 2);
		消除HUD文本(事件玩家.E[事件玩家.N]);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 自定义字符串("已找到"), 字符串("{0} / {1}", 全局.C[3], 全局.C[3]), 字符串("物品")), 无, 无, 左边, 3, 颜色(绿色), 颜色(白色), 颜色(白色),
			可见和字符串, 默认可见度);
		事件玩家.N = 4;
		根据条件跳过(事件玩家.A != 事件玩家.N, 2);
		消除HUD文本(事件玩家.E[事件玩家.N]);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 自定义字符串("已找到"), 字符串("{0} / {1}", 全局.C[4], 全局.C[4]), 字符串("物品")), 无, 无, 左边, 4, 颜色(绿色), 颜色(白色), 颜色(白色),
			可见和字符串, 默认可见度);
		事件玩家.N = 5;
		根据条件跳过(事件玩家.A != 事件玩家.N, 2);
		消除HUD文本(事件玩家.E[事件玩家.N]);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 自定义字符串("已找到"), 字符串("{0} / {1}", 全局.C[5], 全局.C[5]), 字符串("物品")), 无, 无, 左边, 5, 颜色(绿色), 颜色(白色), 颜色(白色),
			可见和字符串, 默认可见度);
		事件玩家.A = 0;
	}
}

规则("player found the last item in the group 6-10")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.A > 5;
		事件玩家.A <= 10;
	}

	动作
	{
		事件玩家.N = 6;
		根据条件跳过(事件玩家.A != 事件玩家.N, 2);
		消除HUD文本(事件玩家.E[事件玩家.N]);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 自定义字符串("已找到"), 字符串("{0} / {1}", 全局.C[6], 全局.C[6]), 字符串("物品")), 无, 无, 左边, 6, 颜色(绿色), 颜色(白色), 颜色(白色),
			可见和字符串, 默认可见度);
		事件玩家.N = 7;
		根据条件跳过(事件玩家.A != 事件玩家.N, 2);
		消除HUD文本(事件玩家.E[事件玩家.N]);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 自定义字符串("已找到"), 字符串("{0} / {1}", 全局.C[7], 全局.C[7]), 字符串("物品")), 无, 无, 左边, 7, 颜色(绿色), 颜色(白色), 颜色(白色),
			可见和字符串, 默认可见度);
		事件玩家.N = 8;
		根据条件跳过(事件玩家.A != 事件玩家.N, 2);
		消除HUD文本(事件玩家.E[事件玩家.N]);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 自定义字符串("已找到"), 字符串("{0} / {1}", 全局.C[8], 全局.C[8]), 字符串("物品")), 无, 无, 左边, 8, 颜色(绿色), 颜色(白色), 颜色(白色),
			可见和字符串, 默认可见度);
		事件玩家.N = 9;
		根据条件跳过(事件玩家.A != 事件玩家.N, 2);
		消除HUD文本(事件玩家.E[事件玩家.N]);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 自定义字符串("已找到"), 字符串("{0} / {1}", 全局.C[9], 全局.C[9]), 字符串("物品")), 无, 无, 左边, 9, 颜色(绿色), 颜色(白色), 颜色(白色),
			可见和字符串, 默认可见度);
		事件玩家.N = 10;
		根据条件跳过(事件玩家.A != 事件玩家.N, 2);
		消除HUD文本(事件玩家.E[事件玩家.N]);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 自定义字符串("已找到"), 字符串("{0} / {1}", 全局.C[10], 全局.C[10]), 字符串("物品")), 无, 无, 左边, 10, 颜色(绿色), 颜色(白色), 颜色(白色),
			可见和字符串, 默认可见度);
		事件玩家.A = 0;
	}
}

规则("infinite match time")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		比赛时间 <= 1800;
	}

	动作
	{
		设置比赛时间(3600);
	}
}

规则("updating data after a player leaves the game")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		全局.T == 0;
	}

	动作
	{
		全局.R = 全局.S[全局.T];
		根据条件跳过(全局.R == 无, 7);
		根据条件跳过(已重生(全局.R), 6);
		全局.Q += 1;
		在索引处修改全局变量(D, 全局.Q, 根据值从数组中移除, 全局.R);
		等待(0.025, 无视条件);
		根据条件跳过(全局.Q < 60, 1);
		修改全局变量(S, 根据值从数组中移除, 全局.R);
		根据条件循环(全局.Q < 60);
		全局.T += 1;
		全局.Q = 0;
		等待(0.025, 无视条件);
		根据条件循环(全局.T < 12);
	}
}


规则("SpeedToggle")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(终极技能)) == 真;
	}

	动作
	{
		If(事件玩家.SpeedToggle != 真);
			设置移动速度(事件玩家, 事件玩家.S);
			事件玩家.SpeedToggle = 真;
		Else;
			设置移动速度(事件玩家, 110);
			事件玩家.SpeedToggle = 假;
		End;
	}
}

规则("SpeedToggleReset")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(技能1)) == 假;
	}

	动作
	{
		事件玩家.SpeedToggle = 假;
	}
}
规则("顶部描述")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		While(真);
			设置目标点描述(所有玩家(所有队伍), 自定义字符串("互动键(默认V)=确认物品\r\nSHIFT=长按加速\r\n终极技能=切换加速\r\n下蹲键=进出传送门"), 可见和字符串);
			等待(5, 无视条件);
			设置目标点描述(所有玩家(所有队伍), 自定义字符串("左上角需找物品\r\n需设置模型细节：高以上\r\n同好群：1074896927"),
				可见和字符串);
			等待(5, 无视条件);
		End;
	}
}

规则("传送操作--通用")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
		按钮被按下(事件玩家, 按钮(蹲下)) == 真;
		按钮被按下(事件玩家, 按钮(跳跃)) == 假;
		按钮被按下(事件玩家, 按钮(装填)) == 假;
		按钮被按下(事件玩家, 按钮(技能2)) == 假;
		按钮被按下(事件玩家, 按钮(终极技能)) == 假;
	}

	动作
	{
		事件玩家.ThisNode = 1;
		While(事件玩家.ThisNode > 0 && 事件玩家.ThisNode <= 数量(全局.P));
			
			If(全局.P[事件玩家.ThisNode] != 0 && 相距距离(所选位置(事件玩家), 全局.P[事件玩家.ThisNode]) <= 2&&(事件玩家.ThisNode>4));
				If(事件玩家.ThisNode % 2 == 1);
					传送(事件玩家, 全局.P[事件玩家.ThisNode + 1]);
					事件玩家.ThisNode = 数量(全局.P) + 100;
				Else If(事件玩家.ThisNode % 2 == 0);
					传送(事件玩家, 全局.P[事件玩家.ThisNode - 1]);
					事件玩家.ThisNode = 数量(全局.P) + 100;
				End;
			Else;
				事件玩家.ThisNode = 事件玩家.ThisNode + 1;
			End;
        End;
	}
}



规则("传送操作--艾兴瓦尔德")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
		按钮被按下(事件玩家, 按钮(蹲下)) == 真;
		按钮被按下(事件玩家, 按钮(跳跃)) == 假;
		按钮被按下(事件玩家, 按钮(装填)) == 假;
		按钮被按下(事件玩家, 按钮(技能2)) == 假;
		按钮被按下(事件玩家, 按钮(终极技能)) == 假;
	}

	动作
	{
		If(相距距离(所选位置(事件玩家), 全局.P[1]) <= 2);
			传送(事件玩家, 全局.P[2]);
		Else If(相距距离(所选位置(事件玩家), 全局.P[2]) <= 2);
			传送(事件玩家, 全局.P[3]);
		Else If(相距距离(所选位置(事件玩家), 全局.P[3]) <= 2);
			传送(事件玩家, 全局.P[1]);
			End;
	}
}
规则("bug protection")
{
	事件
	{
		玩家离开比赛;
		双方;
		全部;
	}

	动作
	{
		设置慢动作(100);
	}
}
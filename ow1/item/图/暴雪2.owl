设置
{
	主程序
	{
		描述: "列文虎克找东西-Blizz World 2★找到物品并且按 [F] ★★★6个宝箱★13 个玩具锤★11 个虫族小狗玩具（星际争霸中的单位）toy zerglings★5 把铁斧★10 个金色下水道井盖★1 Mike★★★按 [SHIFT] 奔跑 ★ 按[L]  返回大厅 ★ 务必在画面设置设定中或高的模型细节和100%的渲染★ 祝你欧气满满！★Made by Foren#2660  授权搬运by KDLin#5710 ★ 更多内容owmod.net搜索列文虎克★"
	}

	大厅
	{
		地图轮换: 暂停轮换
		比赛结束后转换队伍: 否
		玩家上限 队伍1: 0
		观战者人数上限: 0
		返回大厅: 从不
	}

	模式
	{
		突击模式
		{
			启用地图
			{
				暴雪世界
			}
		}

		综合
		{
			允许切换英雄: 关闭
			复生时间: 0%
			急救包刷新: 禁用
			消灭提示: 关闭
			消灭镜头: 关闭
			游戏模式开始: 即时
			英雄限制: 关闭
			随机英雄复生: 开启
		}
	}

	英雄
	{
		综合
		{
			主要攻击模式: 关闭
			仅爆头有效: 开启
			战斗时终极技能充能速度: 0%
			技能冷却时间: 50%
			移动速度: 110%
			终极技能充能速度: 10%
			终极技能自动充能速度: 0%
			近身攻击: 关闭

			禅雅塔
			{
				主要攻击模式: 关闭
				乱: 关闭
				谐: 关闭
				辅助攻击模式: 关闭
				近身攻击: 关闭
			}

			启用英雄
			{
				禅雅塔
			}
		}
	}
}

规则("// copy and paste the following line into the game title:")
{
	事件
	{
		持续 - 全局;
	}
}

规则("★ Find 46 items in Blizz World ★ (list in description)")
{
	事件
	{
		持续 - 全局;
	}
}

规则("// don't add spectators, they see all spoilers!")
{
	事件
	{
		持续 - 全局;
	}
}

规则("// \"Find Items\" ver. 1.1")
{
	事件
	{
		持续 - 全局;
	}
}

规则("// all maps and additional info: bit.do/finditems")
{
	事件
	{
		持续 - 全局;
	}
}

规则("// original mode is made by Foren#2660")
{
	事件
	{
		持续 - 全局;
	}
}

规则("beginning of the game")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		设置比赛时间(3600);
		全局.N = 1;
		全局.G = 0;
		全局.H = 矢量(0, -99, 0);
		全局.T = -1;
		全局.Q = 0;
	}
}

规则("Blizz World ===================================================================")
{
	事件
	{
		持续 - 全局;
	}
}

规则("6 treasure chests")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.G += 1;
		全局.I = 0;
		全局.A[全局.N] = 矢量(-1.404, -3.483, -34.070);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-30.844, -1.535, -2.678);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(18.217, 0.526, 31.372);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(24.050, 2.532, 72.953);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(22.413, -0.663, 94.719);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-21.624, 2.634, 73.460);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.C[全局.G] = 全局.I;
	}
}

规则("13 hammers")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.G += 1;
		全局.I = 0;
		全局.A[全局.N] = 矢量(16.032, -2.655, -13.110);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(16.046, -2.655, -11.657);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(9.352, -4.645, 14.162);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-22.410, -2.750, -3.250);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-31.556, -1.545, -0.732);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-31.762, -0.917, 0.170);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-32.256, -0.794, 0.433);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-32.445, 0.320, 3.866);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(24.460, -1.687, 36.515);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(35.128, 2.555, 82.558);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-7.956, 3.250, 74.590);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-7.875, 3.252, 75.075);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(8.166, -4.344, -40.637);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.C[全局.G] = 全局.I;
	}
}

规则("11 zerglings")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.G += 1;
		全局.I = 0;
		全局.A[全局.N] = 矢量(-72.450, 2.890, 89.080);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-72.759, 2.890, 90.080);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-73.150, 2.890, 90.880);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-71.500, 2, 72.800);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-72.271, 1.989, 87.025);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-52.860, 0.830, 93.340);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-52.310, 2.900, 91.120);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-49.990, 2.900, 90.960);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-48.500, 1.810, 117.190);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-72.764, 1.150, 84.368);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(24.460, -1.603, 35.105);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.C[全局.G] = 全局.I;
	}
}

规则("5 iron axes")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.G += 1;
		全局.I = 0;
		全局.A[全局.N] = 矢量(-88.803, 1.108, 149.531);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-96.205, -0.654, 144.109);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-135.645, 2.301, 87.788);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-129.152, 2.274, 89.367);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-90.722, -0.613, 101.847);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.C[全局.G] = 全局.I;
	}
}

规则("10 golden manholes")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.G += 1;
		全局.I = 0;
		全局.A[全局.N] = 矢量(-74.800, 0.744, 136.036);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-70.754, 0.796, 118.680);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-55.178, -0.200, 124.509);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-47.271, -0.200, 74.241);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-6.665, 1.915, 86.546);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(15.275, 1.915, 66.310);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-4.366, 0.050, 40.809);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-20.435, -5.104, 11.254);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-12.668, -4.104, -26.402);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.A[全局.N] = 矢量(-12.148, 1.996, 72.118);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.C[全局.G] = 全局.I;
	}
}

规则("")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.G += 1;
		全局.I = 0;
		全局.A[全局.N] = 矢量(-82.881, 2.224, 60.590);
		全局.X[全局.N] = 全局.G;
		全局.I += 1;
		全局.N += 1;
		全局.C[全局.G] = 全局.I;
	}
}

规则("I=============================================================================")
{
	事件
	{
		持续 - 全局;
	}
}

规则("calculating total number of items")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		全局.O == 无;
	}

	动作
	{
		全局.O = 全局.N - 1;
	}
}

规则("player found item")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		具有状态(事件玩家, 冰冻) == 假;
		事件玩家.Z == 无;
	}

	动作
	{
		根据条件跳过(事件玩家.L != 无, 1);
		事件玩家.L = 1;
		根据条件跳过(全局.A[事件玩家.L] == 无, 18);
		根据条件跳过(事件玩家.F[事件玩家.L] == 真, 17);
		根据条件跳过(相距距离(事件玩家, 全局.A[事件玩家.L]) > 3, 16);
		事件玩家.O = 全局.X[事件玩家.L];
		事件玩家.Z = 全局.A[事件玩家.L];
		在索引处修改全局变量(D, 事件玩家.L, 添加至数组, 事件玩家);
		事件玩家.K = 全局.A[事件玩家.L];
		事件玩家.Q += 1;
		事件玩家.F[事件玩家.L] = 真;
		事件玩家.G[全局.X[事件玩家.L]] += 1;
		事件玩家.M = 事件玩家.L;
		根据条件跳过(事件玩家.Q == 全局.O, 1);
		小字体信息(事件玩家, 字符串("{0} / {1}", 事件玩家.G[全局.X[事件玩家.M]], 全局.C[全局.X[事件玩家.M]]));
		根据条件跳过(事件玩家.G[事件玩家.O] < 全局.C[事件玩家.O], 4);
		事件玩家.A = 全局.X[事件玩家.L];
		播放效果(事件玩家, 环状爆炸, 颜色(亮紫色), 事件玩家.Z, 7);
		播放效果(事件玩家, 正面状态施加声音, 颜色(白色), 事件玩家, 30);
		播放效果(事件玩家, 有益选择效果 , 颜色(亮紫色), 事件玩家.Z, 1);
		事件玩家.L = 999;
		事件玩家.L += 1;
		根据条件跳过(事件玩家.L >= 全局.O - 4, 8);
		根据条件跳过(相距距离(事件玩家, 全局.A[事件玩家.L]) <= 3, 1);
		事件玩家.L += 1;
		根据条件跳过(相距距离(事件玩家, 全局.A[事件玩家.L]) <= 3, 1);
		事件玩家.L += 1;
		根据条件跳过(相距距离(事件玩家, 全局.A[事件玩家.L]) <= 3, 1);
		事件玩家.L += 1;
		根据条件跳过(相距距离(事件玩家, 全局.A[事件玩家.L]) <= 3, 1);
		事件玩家.L += 1;
		等待(0.001, 无视条件);
		根据条件跳过(事件玩家.L != 全局.O + 1, 1);
		事件玩家.J = 真;
		根据条件循环(事件玩家.L <= 全局.O);
		事件玩家.L = 1;
	}
}

规则("playing yellow effects")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.Z != 无;
	}

	动作
	{
		播放效果(事件玩家, 环状爆炸, 颜色(黄色), 事件玩家.Z, 3);
		播放效果(事件玩家, 状态爆炸声音, 颜色(黄色), 事件玩家, 20);
		等待(0.250, 无视条件);
		事件玩家.Z = 无;
		根据条件跳过(事件玩家.Q < 全局.O, 4);
		消除HUD文本(事件玩家.W[1]);
		创建HUD文本(所有玩家(所有队伍), 无, 无, 字符串("{0} {1} {2}", 字符串("{0} {1}", 英雄图标字符串(所用英雄(事件玩家)), 事件玩家), 字符串("已找到"), 字符串("{0} / {1}", 事件玩家.Q,
			全局.O)), 右边, 60 - 事件玩家.Q, 颜色(白色), 颜色(白色), 颜色(绿色), 可见和字符串, 默认可见度);
		事件玩家.W[1] = 上一个文本ID;
		中止;
		消除HUD文本(事件玩家.W[1]);
		创建HUD文本(所有玩家(所有队伍), 无, 无, 字符串("{0} {1} {2}", 字符串("{0} {1}", 英雄图标字符串(所用英雄(事件玩家)), 事件玩家), 字符串("已找到"), 字符串("{0} / {1}", 事件玩家.Q,
			全局.O)), 右边, 60 - 事件玩家.Q, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		事件玩家.W[1] = 上一个文本ID;
	}
}

规则("player spawn")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
	}

	动作
	{
		事件玩家.Q = 0;
		修改全局变量(S, 添加至数组, 事件玩家);
		创建HUD文本(所有玩家(所有队伍), 无, 无, 字符串("{0} {1} {2}", 字符串("{0} {1}", 英雄图标字符串(所用英雄(事件玩家)), 事件玩家), 字符串("已找到"), 字符串("{0} / {1}", 事件玩家.Q,
			全局.O)), 右边, 60, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		事件玩家.W[1] = 上一个文本ID;
		事件玩家.J = 假;
		事件玩家.T = 0;
		事件玩家.S = 150;
		设置状态(事件玩家, 无, 无敌, 9999);
		创建效果(事件玩家, 火花, 颜色(黄色), 事件玩家.K, 2, 可见，位置和半径);
		全局.T = 0;
		全局.Q = 0;
		事件玩家.K = 矢量(0, -99, 0);
		等待(5, 无视条件);
		大字体信息(事件玩家, 字符串("{0} {1} {2}", 字符串("寻找"), 全局.O, 字符串("物品")));
		等待(3, 无视条件);
		小字体信息(事件玩家, 字符串("{0} - {1}", 字符串("技能1"), 字符串("运行")));
	}
}

规则("creating HUD text 1-5")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
	}

	动作
	{
		根据条件跳过(全局.G < 1, 2);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 自定义字符串("宝箱"), 字符串("{0} / {1}", 事件玩家.G[1], 全局.C[1]), 字符串("物品")), 无, 无, 左边, 1, 颜色(黄色), 颜色(白色), 颜色(白色),
			可见和字符串, 默认可见度);
		事件玩家.E[1] = 上一个文本ID;
		根据条件跳过(全局.G < 2, 2);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 自定义字符串("玩具锤"), 字符串("{0} / {1}", 事件玩家.G[2], 全局.C[2]), 字符串("物品")), 无, 无, 左边, 2, 颜色(黄色), 颜色(白色), 颜色(白色),
			可见和字符串, 默认可见度);
		事件玩家.E[2] = 上一个文本ID;
		根据条件跳过(全局.G < 3, 2);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 自定义字符串("虫族小狗玩具"), 字符串("{0} / {1}", 事件玩家.G[3], 全局.C[3]), 字符串("物品")), 无, 无, 左边, 3, 颜色(黄色), 颜色(白色), 颜色(白色),
			可见和字符串, 默认可见度);
		事件玩家.E[3] = 上一个文本ID;
		根据条件跳过(全局.G < 4, 2);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 自定义字符串("铁斧"), 字符串("{0} / {1}", 事件玩家.G[4], 全局.C[4]), 字符串("物品")), 无, 无, 左边, 4, 颜色(黄色), 颜色(白色), 颜色(白色),
			可见和字符串, 默认可见度);
		事件玩家.E[4] = 上一个文本ID;
		根据条件跳过(全局.G < 5, 2);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 自定义字符串("金色下水道井盖"), 字符串("{0} / {1}", 事件玩家.G[5], 全局.C[5]), 字符串("物品")), 无, 无, 左边, 5, 颜色(黄色), 颜色(白色), 颜色(白色),
			可见和字符串, 默认可见度);
		事件玩家.E[5] = 上一个文本ID;
	}
}

规则("creating HUD text 6-10")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
	}

	动作
	{
		根据条件跳过(全局.G < 6, 2);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 自定义字符串("Mike"), 字符串("{0} / {1}", 事件玩家.G[6], 全局.C[6]), 字符串("物品")), 无, 无, 左边, 6, 颜色(黄色), 颜色(白色), 颜色(白色),
			可见和字符串, 默认可见度);
		事件玩家.E[6] = 上一个文本ID;
		根据条件跳过(全局.G < 7, 2);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 字符串("已找到"), 字符串("{0} / {1}", 事件玩家.G[7], 全局.C[7]), 字符串("物品")), 无, 无, 左边, 7, 颜色(黄色), 颜色(白色), 颜色(白色),
			可见和字符串, 默认可见度);
		事件玩家.E[7] = 上一个文本ID;
		根据条件跳过(全局.G < 8, 2);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 字符串("已找到"), 字符串("{0} / {1}", 事件玩家.G[8], 全局.C[8]), 字符串("物品")), 无, 无, 左边, 8, 颜色(黄色), 颜色(白色), 颜色(白色),
			可见和字符串, 默认可见度);
		事件玩家.E[8] = 上一个文本ID;
		根据条件跳过(全局.G < 9, 2);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 字符串("已找到"), 字符串("{0} / {1}", 事件玩家.G[9], 全局.C[9]), 字符串("物品")), 无, 无, 左边, 9, 颜色(黄色), 颜色(白色), 颜色(白色),
			可见和字符串, 默认可见度);
		事件玩家.E[9] = 上一个文本ID;
		根据条件跳过(全局.G < 10, 2);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 字符串("已找到"), 字符串("{0} / {1}", 事件玩家.G[10], 全局.C[10]), 字符串("物品")), 无, 无, 左边, 10, 颜色(黄色), 颜色(白色), 颜色(白色),
			可见和字符串, 默认可见度);
		事件玩家.E[10] = 上一个文本ID;
		事件玩家.A = 0;
	}
}

规则("all items found (victory!)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.Q == 全局.O;
		已重生(事件玩家) == 真;
	}

	动作
	{
		大字体信息(所有玩家(所有队伍), 字符串("{0} {1} {2}", 英雄图标字符串(所用英雄(事件玩家)), 事件玩家, 字符串("{0}！", 字符串("胜者"))));
		播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 20);
		播放效果(事件玩家, 有益爆炸, 颜色(黄色), 事件玩家, 10);
		播放效果(事件玩家, 环状爆炸, 颜色(亮紫色), 事件玩家, 20);
		全局.H = 事件玩家;
		交流(事件玩家, 表情（上）);
		设置慢动作(30);
		等待(1.250, 无视条件);
		设置慢动作(100);
		等待(3, 无视条件);
		小字体信息(事件玩家, 字符串("{0} {1}", 事件玩家, 字符串("{0}！", 字符串("可见"))));
	}
}

规则("player pressed \"F\" key on the empty place")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.J == 真;
		具有状态(事件玩家, 冰冻) == 假;
		事件玩家.Q != 全局.O;
	}

	动作
	{
		根据条件跳过(事件玩家.T > 4.500, 1);
		事件玩家.T += 0.500;
		播放效果(事件玩家, 负面状态施加声音, 颜色(白色), 事件玩家, 50);
		设置状态(事件玩家, 无, 冰冻, 事件玩家.T);
		事件玩家.R = 事件玩家.T;
		大字体信息(事件玩家, 字符串("{0} {1}", 字符串("否"), 字符串("物品")));
		小字体信息(事件玩家, 字符串("{0} {1}", 字符串("下一次尝试"), 字符串("{0}秒", 取整(事件玩家.R, 上))));
		等待(事件玩家.T, 无视条件);
		事件玩家.J = 假;
	}
}

规则("player is frozen")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.J == 真;
	}

	动作
	{
		等待(1, 无视条件);
		事件玩家.R -= 1;
	}
}

规则("create all 60 effects at the beginning of the match")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		创建效果(所有玩家(所有队伍), 火花, 颜色(黄色), 全局.H, 2, 可见，位置和半径);
		创建效果(所有玩家(所有队伍), 火花, 颜色(亮紫色), 全局.H, 2, 可见，位置和半径);
		创建效果(全局.D[1], 有益光环, 颜色(黄色), 全局.A[1], 1, 可见);
		创建效果(全局.D[2], 有益光环, 颜色(黄色), 全局.A[2], 1, 可见);
		创建效果(全局.D[3], 有益光环, 颜色(黄色), 全局.A[3], 1, 可见);
		创建效果(全局.D[4], 有益光环, 颜色(黄色), 全局.A[4], 1, 可见);
		创建效果(全局.D[5], 有益光环, 颜色(黄色), 全局.A[5], 1, 可见);
		创建效果(全局.D[6], 有益光环, 颜色(黄色), 全局.A[6], 1, 可见);
		创建效果(全局.D[7], 有益光环, 颜色(黄色), 全局.A[7], 1, 可见);
		创建效果(全局.D[8], 有益光环, 颜色(黄色), 全局.A[8], 1, 可见);
		创建效果(全局.D[9], 有益光环, 颜色(黄色), 全局.A[9], 1, 可见);
		创建效果(全局.D[10], 有益光环, 颜色(黄色), 全局.A[10], 1, 可见);
		创建效果(全局.D[11], 有益光环, 颜色(黄色), 全局.A[11], 1, 可见);
		创建效果(全局.D[12], 有益光环, 颜色(黄色), 全局.A[12], 1, 可见);
		创建效果(全局.D[13], 有益光环, 颜色(黄色), 全局.A[13], 1, 可见);
		创建效果(全局.D[14], 有益光环, 颜色(黄色), 全局.A[14], 1, 可见);
		创建效果(全局.D[15], 有益光环, 颜色(黄色), 全局.A[15], 1, 可见);
		创建效果(全局.D[16], 有益光环, 颜色(黄色), 全局.A[16], 1, 可见);
		创建效果(全局.D[17], 有益光环, 颜色(黄色), 全局.A[17], 1, 可见);
		创建效果(全局.D[18], 有益光环, 颜色(黄色), 全局.A[18], 1, 可见);
		创建效果(全局.D[19], 有益光环, 颜色(黄色), 全局.A[19], 1, 可见);
		创建效果(全局.D[20], 有益光环, 颜色(黄色), 全局.A[20], 1, 可见);
		创建效果(全局.D[21], 有益光环, 颜色(黄色), 全局.A[21], 1, 可见);
		创建效果(全局.D[22], 有益光环, 颜色(黄色), 全局.A[22], 1, 可见);
		创建效果(全局.D[23], 有益光环, 颜色(黄色), 全局.A[23], 1, 可见);
		创建效果(全局.D[24], 有益光环, 颜色(黄色), 全局.A[24], 1, 可见);
		创建效果(全局.D[25], 有益光环, 颜色(黄色), 全局.A[25], 1, 可见);
		创建效果(全局.D[26], 有益光环, 颜色(黄色), 全局.A[26], 1, 可见);
		创建效果(全局.D[27], 有益光环, 颜色(黄色), 全局.A[27], 1, 可见);
		创建效果(全局.D[28], 有益光环, 颜色(黄色), 全局.A[28], 1, 可见);
		创建效果(全局.D[29], 有益光环, 颜色(黄色), 全局.A[29], 1, 可见);
		创建效果(全局.D[30], 有益光环, 颜色(黄色), 全局.A[30], 1, 可见);
		创建效果(全局.D[31], 有益光环, 颜色(黄色), 全局.A[31], 1, 可见);
		创建效果(全局.D[32], 有益光环, 颜色(黄色), 全局.A[32], 1, 可见);
		创建效果(全局.D[33], 有益光环, 颜色(黄色), 全局.A[33], 1, 可见);
		创建效果(全局.D[34], 有益光环, 颜色(黄色), 全局.A[34], 1, 可见);
		创建效果(全局.D[35], 有益光环, 颜色(黄色), 全局.A[35], 1, 可见);
		创建效果(全局.D[36], 有益光环, 颜色(黄色), 全局.A[36], 1, 可见);
		创建效果(全局.D[37], 有益光环, 颜色(黄色), 全局.A[37], 1, 可见);
		创建效果(全局.D[38], 有益光环, 颜色(黄色), 全局.A[38], 1, 可见);
		创建效果(全局.D[39], 有益光环, 颜色(黄色), 全局.A[39], 1, 可见);
		创建效果(全局.D[40], 有益光环, 颜色(黄色), 全局.A[40], 1, 可见);
		创建效果(全局.D[41], 有益光环, 颜色(黄色), 全局.A[41], 1, 可见);
		创建效果(全局.D[42], 有益光环, 颜色(黄色), 全局.A[42], 1, 可见);
		创建效果(全局.D[43], 有益光环, 颜色(黄色), 全局.A[43], 1, 可见);
		创建效果(全局.D[44], 有益光环, 颜色(黄色), 全局.A[44], 1, 可见);
		创建效果(全局.D[45], 有益光环, 颜色(黄色), 全局.A[45], 1, 可见);
		创建效果(全局.D[46], 有益光环, 颜色(黄色), 全局.A[46], 1, 可见);
		创建效果(全局.D[47], 有益光环, 颜色(黄色), 全局.A[47], 1, 可见);
		创建效果(全局.D[48], 有益光环, 颜色(黄色), 全局.A[48], 1, 可见);
		创建效果(全局.D[49], 有益光环, 颜色(黄色), 全局.A[49], 1, 可见);
		创建效果(全局.D[50], 有益光环, 颜色(黄色), 全局.A[50], 1, 可见);
		创建效果(全局.D[51], 有益光环, 颜色(黄色), 全局.A[51], 1, 可见);
		创建效果(全局.D[52], 有益光环, 颜色(黄色), 全局.A[52], 1, 可见);
		创建效果(全局.D[53], 有益光环, 颜色(黄色), 全局.A[53], 1, 可见);
		创建效果(全局.D[54], 有益光环, 颜色(黄色), 全局.A[54], 1, 可见);
		创建效果(全局.D[55], 有益光环, 颜色(黄色), 全局.A[55], 1, 可见);
		创建效果(全局.D[56], 有益光环, 颜色(黄色), 全局.A[56], 1, 可见);
		创建效果(全局.D[57], 有益光环, 颜色(黄色), 全局.A[57], 1, 可见);
		创建效果(全局.D[58], 有益光环, 颜色(黄色), 全局.A[58], 1, 可见);
		创建效果(全局.D[59], 有益光环, 颜色(黄色), 全局.A[59], 1, 可见);
		创建效果(全局.D[60], 有益光环, 颜色(黄色), 全局.A[60], 1, 可见);
	}
}

规则("shift key is pressed (acceleration)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(技能1)) == 真;
	}

	动作
	{
		设置移动速度(事件玩家, 事件玩家.S);
	}
}

规则("shift key is not pressed (slowdown)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(技能1)) == 假;
	}

	动作
	{
		设置移动速度(事件玩家, 110);
	}
}

规则("acceleration after finding a group of items")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.A > 0;
		事件玩家.S <= 300;
		全局.G > 0;
		事件玩家.Q < 全局.O;
	}

	动作
	{
		事件玩家.S += 150 / 全局.G;
		等待(1, 无视条件);
		大字体信息(事件玩家, 字符串("{0} {1}", 字符串("速度"), 字符串("升级")));
		等待(2, 无视条件);
		小字体信息(事件玩家, 字符串("{0} - {1}", 字符串("技能1"), 字符串("运行")));
	}
}

规则("player found the last item in the group 1-5")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.A > 0;
		事件玩家.A <= 5;
	}

	动作
	{
		事件玩家.N = 1;
		根据条件跳过(事件玩家.A != 事件玩家.N, 2);
		消除HUD文本(事件玩家.E[事件玩家.N]);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 自定义字符串("宝箱"), 字符串("{0} / {1}", 全局.C[1], 全局.C[1]), 字符串("物品")), 无, 无, 左边, 1, 颜色(绿色), 颜色(白色), 颜色(白色),
			可见和字符串, 默认可见度);
		事件玩家.N = 2;
		根据条件跳过(事件玩家.A != 事件玩家.N, 2);
		消除HUD文本(事件玩家.E[事件玩家.N]);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 自定义字符串("玩具锤"), 字符串("{0} / {1}", 全局.C[2], 全局.C[2]), 字符串("物品")), 无, 无, 左边, 2, 颜色(绿色), 颜色(白色), 颜色(白色),
			可见和字符串, 默认可见度);
		事件玩家.N = 3;
		根据条件跳过(事件玩家.A != 事件玩家.N, 2);
		消除HUD文本(事件玩家.E[事件玩家.N]);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 自定义字符串("虫族小狗玩具（星际争霸中的单位）"), 字符串("{0} / {1}", 全局.C[3], 全局.C[3]), 字符串("物品")), 无, 无, 左边, 3, 颜色(绿色), 颜色(白色), 颜色(白色),
			可见和字符串, 默认可见度);
		事件玩家.N = 4;
		根据条件跳过(事件玩家.A != 事件玩家.N, 2);
		消除HUD文本(事件玩家.E[事件玩家.N]);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 自定义字符串("铁斧"), 字符串("{0} / {1}", 全局.C[4], 全局.C[4]), 字符串("物品")), 无, 无, 左边, 4, 颜色(绿色), 颜色(白色), 颜色(白色),
			可见和字符串, 默认可见度);
		事件玩家.N = 5;
		根据条件跳过(事件玩家.A != 事件玩家.N, 2);
		消除HUD文本(事件玩家.E[事件玩家.N]);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 自定义字符串("金色下水道井盖"), 字符串("{0} / {1}", 全局.C[5], 全局.C[5]), 字符串("物品")), 无, 无, 左边, 5, 颜色(绿色), 颜色(白色), 颜色(白色),
			可见和字符串, 默认可见度);
		事件玩家.A = 0;
	}
}

规则("player found the last item in the group 6-10")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.A > 5;
		事件玩家.A <= 10;
	}

	动作
	{
		事件玩家.N = 6;
		根据条件跳过(事件玩家.A != 事件玩家.N, 2);
		消除HUD文本(事件玩家.E[事件玩家.N]);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 自定义字符串("Mike"), 字符串("{0} / {1}", 全局.C[6], 全局.C[6]), 字符串("物品")), 无, 无, 左边, 6, 颜色(绿色), 颜色(白色), 颜色(白色),
			可见和字符串, 默认可见度);
		事件玩家.N = 7;
		根据条件跳过(事件玩家.A != 事件玩家.N, 2);
		消除HUD文本(事件玩家.E[事件玩家.N]);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 字符串("已找到"), 字符串("{0} / {1}", 全局.C[7], 全局.C[7]), 字符串("物品")), 无, 无, 左边, 7, 颜色(绿色), 颜色(白色), 颜色(白色),
			可见和字符串, 默认可见度);
		事件玩家.N = 8;
		根据条件跳过(事件玩家.A != 事件玩家.N, 2);
		消除HUD文本(事件玩家.E[事件玩家.N]);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 字符串("已找到"), 字符串("{0} / {1}", 全局.C[8], 全局.C[8]), 字符串("物品")), 无, 无, 左边, 8, 颜色(绿色), 颜色(白色), 颜色(白色),
			可见和字符串, 默认可见度);
		事件玩家.N = 9;
		根据条件跳过(事件玩家.A != 事件玩家.N, 2);
		消除HUD文本(事件玩家.E[事件玩家.N]);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 字符串("已找到"), 字符串("{0} / {1}", 全局.C[9], 全局.C[9]), 字符串("物品")), 无, 无, 左边, 9, 颜色(绿色), 颜色(白色), 颜色(白色),
			可见和字符串, 默认可见度);
		事件玩家.N = 10;
		根据条件跳过(事件玩家.A != 事件玩家.N, 2);
		消除HUD文本(事件玩家.E[事件玩家.N]);
		创建HUD文本(事件玩家, 字符串("{0} {1}", 字符串("已找到"), 字符串("{0} / {1}", 全局.C[10], 全局.C[10]), 字符串("物品")), 无, 无, 左边, 10, 颜色(绿色), 颜色(白色), 颜色(白色),
			可见和字符串, 默认可见度);
		事件玩家.A = 0;
	}
}

规则("infinite match time")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		比赛时间 <= 1800;
	}

	动作
	{
		设置比赛时间(3600);
	}
}

规则("updating data after a player leaves the game")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		全局.T == 0;
	}

	动作
	{
		全局.R = 全局.S[全局.T];
		根据条件跳过(全局.R == 无, 7);
		根据条件跳过(已重生(全局.R), 6);
		全局.Q += 1;
		在索引处修改全局变量(D, 全局.Q, 根据值从数组中移除, 全局.R);
		等待(0.025, 无视条件);
		根据条件跳过(全局.Q < 60, 1);
		修改全局变量(S, 根据值从数组中移除, 全局.R);
		根据条件循环(全局.Q < 60);
		全局.T += 1;
		全局.Q = 0;
		等待(0.025, 无视条件);
		根据条件循环(全局.T < 12);
	}
}

规则("bug protection")
{
	事件
	{
		玩家离开比赛;
		双方;
		全部;
	}

	动作
	{
		设置慢动作(100);
	}
}
规则("地图传送点位圈圈设置")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		If(当前地图 == 地图(万圣节艾兴瓦尔德) || 当前地图 == 地图(艾兴瓦尔德));
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-11.720, 0, -9.070), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-12.530, 1, -4.470), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-6.630, 3.550, -85.450), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-11.950, 5.300, -87.800), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(74.740, 10.700, -109.200), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(73.390, 10.720, -115.110), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(115.040, 10.720, -13.410), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(112.580, 10.740, -9.720), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(87.070, 12.860, -101.270), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(91.980, 12.720, -103.740), 2, 可见，位置和半径);
		Else If(当前地图 == 地图(圣诞节花村) || 当前地图 == 地图(花村));
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(76.470, -2, 0.150), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(71.460, -1.950, 0.040), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(13.990, -1, 13.530), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(14.060, 0, 8.360), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-38.150, 1, -86.960), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-42.120, 1, -90.140), 2, 可见，位置和半径);
		Else If(当前地图 == 地图(漓江塔) || 当前地图 == 地图(春节漓江塔));
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-54.280, 266.760, 335.240), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-57.890, 267.600, 338.520), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(53.810, 266.950, 334.770), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(57.190, 267.590, 338.100), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(72.960, 4.470, -31.500), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(67.680, 3.750, -32.570), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-69.240, 95.880, 145.790), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-74.320, 96.570, 145.060), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(74.510, 96.570, 145.380), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(69.220, 95.920, 145.650), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-65.570, 3.750, -31.460), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-70.520, 4.480, -30.710), 2, 可见，位置和半径);
		Else If(当前地图 == 地图(国王大道) || 当前地图 == 地图(圣诞节国王大道));
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-3.040, 1.150, 22.330), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-3.960, 0.070, 17.560), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-1.130, 0.040, -38.250), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(3.750, -0.770, -38.940), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-90.130, 0.940, -27.950), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-93.920, 1.500, -29.430), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-166.340, 0.070, 15.370), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-165.900, 0.070, 20.130), 2, 可见，位置和半径);
		Else If(当前地图 == 地图(渣客镇));
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(45.470, 10, -76.780), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(40.170, 10, -76.380), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-39.950, 7.290, -114.920), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-42.750, 6.420, -119.620), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-79.920, 7.430, -171.760), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-80.950, 7.440, -176.630), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-38.620, 4.060, -16.050), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-39.300, 4.270, -10.100), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-56.330, 7.510, -84.990), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-55.250, 9.060, -79.770), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-106.830, 6.440, -107.880), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-111.420, 6.440, -106.840), 2, 可见，位置和半径);
		Else If(当前地图 == 地图(里阿尔托));
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(0.740, -0.250, -86.310), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-4.610, -0.380, -85.920), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(67.140, -0.250, -57.050), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(72.110, -0.250, -59.360), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-15.700, -1.250, -30.500), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-16.440, -1.230, -24.750), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-74.200, 4.750, -148.720), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-74.250, 4.750, -153.080), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-40.860, 1.750, -110.390), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-41.050, 0.530, -115.450), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(119.120, -1.240, -20.550), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(113.270, -1.250, -21.090), 2, 可见，位置和半径);
		Else If(当前地图 == 地图(暴雪世界) || 当前地图 == 地图(圣诞节暴雪世界));
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(3.020, -3.990, -22.900), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(2.900, -4.100, -18.260), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-79.090, 0.790, 96.660), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-83.900, 0.750, 96.870), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-144.760, 0.750, 113.550), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-146.780, 0.750, 118.350), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-72.160, 1.750, 156.250), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-72.970, 1.750, 160.480), 2, 可见，位置和半径);
		Else If(当前地图 == 地图(釜山));
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-412.390, 10.110, 157.530), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-406.850, 10.070, 156.910), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-250.480, 10.350, 170.950), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-245.880, 10.360, 171.240), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(156.070, 11.100, 261.940), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(160.340, 10.100, 260.110), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(283.030, 11.090, 207.640), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(278.850, 10.100, 209.360), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(121, 17, -125.350), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(116.110, 16.250, -125.490), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-12.090, 16.130, -125.560), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-17.280, 17, -125.590), 2, 可见，位置和半径);
		Else If(当前地图 == 地图(“地平线”月球基地));
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(12.170, 9, -9.430), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(15.940, 9, -11.130), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(58.700, 8.990, -92.990), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(63.710, 9, -92.660), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-47.890, 5, -137.350), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-44.150, 5, -140.270), 2, 可见，位置和半径);
		Else If(当前地图 == 地图(哈瓦那));
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-82.460, 4, -65.590), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-79.250, 4, -62.700), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-43.290, 6, -86.130), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-38.570, 6, -86.070), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(57.210, 4.870, -72.940), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(57.240, 6.060, -77.450), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(69.230, 5, -107.010), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(69.080, 4.990, -101.650), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(92.430, 8.030, -33.670), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(92.370, 9, -28.880), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(158.580, 11.010, -62.080), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(153.180, 9.990, -62.440), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(1.281, 7.250, -48.435), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(1.229, 7.250, -42.409), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-35.657, 7.094, -17.142), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-34.935, 7.093, -28.184), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-106.240, 5.100, -28.772), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-99.279, 5.100, -37.757), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-79.390, 5.250, -93.697), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-83.951, 5.250, -88.796), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-114.377, 5.100, -85.357), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(绿色), 矢量(-113.017, 5.250, -78.268), 2, 可见，位置和半径);
		Else If(当前地图 == 地图(好莱坞) || 当前地图 == 地图(万圣节好莱坞));
			创建效果(所有玩家(所有队伍), 环, 颜色(青绿色), 矢量(-12.238, 2.257, 70.968), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(青绿色), 矢量(-12.168, 3.250, 78.201), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(青绿色), 矢量(-47.659, 3, -3.396), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(青绿色), 矢量(-51.450, 3, -5.555), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(青绿色), 矢量(-9.271, 2.980, -53.173), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(青绿色), 矢量(-11.991, 3, -48.274), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(青绿色), 矢量(-36.930, 5, -146.763), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(青绿色), 矢量(-38.745, 5, -154.229), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(青绿色), 矢量(35.890, 4, -53.152), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(青绿色), 矢量(-6.104, 4, -126.797), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(青绿色), 矢量(-7.157, 4, -130.950), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(青绿色), 矢量(26.792, 3.981, -53.181), 2, 可见，位置和半径);
		Else If(当前地图 == 地图(阿努比斯神殿));
			创建效果(所有玩家(所有队伍), 环, 颜色(白色), 矢量(-46.776, 2.962, 35.473), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(白色), 矢量(-50.267, 2.959, 33.216), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(白色), 矢量(2.352, 1.665, -19.185), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(白色), 矢量(5.179, 2.223, -23.878), 2, 可见，位置和半径);
		Else If(当前地图 == 地图(多拉多));
			创建效果(所有玩家(所有队伍), 环, 颜色(亮紫色), 矢量(55.032, 8.212, -35.447), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(亮紫色), 矢量(41.668, 8.462, -55.982), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(亮紫色), 矢量(142.771, 11.450, -1.233), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(亮紫色), 矢量(162.216, 11.462, -6.691), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(亮紫色), 矢量(80.706, 14.450, 25.674), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(亮紫色), 矢量(65.702, 15.462, 14.122), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(亮紫色), 矢量(168.155, 12.450, 46.767), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(亮紫色), 矢量(173.264, 10.934, 47.945), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(亮紫色), 矢量(207.007, 16.450, 47.105), 2, 可见，位置和半径);
			创建效果(所有玩家(所有队伍), 环, 颜色(亮紫色), 矢量(243.184, 16.460, 48.640), 2, 可见，位置和半径);
	}
}

规则("传送操作--艾兴瓦尔德")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
		按钮被按下(事件玩家, 按钮(蹲下)) == 真;
		按钮被按下(事件玩家, 按钮(跳跃)) == 假;
		按钮被按下(事件玩家, 按钮(装填)) == 假;
		按钮被按下(事件玩家, 按钮(技能2)) == 假;
		按钮被按下(事件玩家, 按钮(终极技能)) == 假;
		(当前地图 == 地图(万圣节艾兴瓦尔德) || 当前地图 == 地图(艾兴瓦尔德)) == 真;
		
	}

	动作
	{
		禁用 If(相距距离(所选位置(事件玩家), 矢量(0, 0, 0)) <= 2);
		禁用 传送(事件玩家, 矢量(0, 0, 0));
		禁用 Else If(相距距离(所选位置(事件玩家), 矢量(0, 0, 0)) <= 2);
		禁用 传送(事件玩家, 矢量(0, 0, 0));
		If(相距距离(所选位置(事件玩家), 矢量(-11.720, 0, -9.070)) <= 2);
			传送(事件玩家, 矢量(-12.530, 1, -4.470));
		Else If(相距距离(所选位置(事件玩家), 矢量(-12.530, 1, -4.470)) <= 2);
			传送(事件玩家, 矢量(-11.720, 0, -9.070));
		Else If(相距距离(所选位置(事件玩家), 矢量(-6.630, 3.550, -85.450)) <= 2);
			传送(事件玩家, 矢量(-11.950, 5.300, -87.800));
		Else If(相距距离(所选位置(事件玩家), 矢量(-11.950, 5.300, -87.800)) <= 2);
			传送(事件玩家, 矢量(-6.630, 3.550, -85.450));
		Else If(相距距离(所选位置(事件玩家), 矢量(74.740, 10.700, -109.200)) <= 2);
			传送(事件玩家, 矢量(73.390, 10.720, -115.110));
		Else If(相距距离(所选位置(事件玩家), 矢量(73.390, 10.720, -115.110)) <= 2);
			传送(事件玩家, 矢量(74.740, 10.700, -109.200));
		Else If(相距距离(所选位置(事件玩家), 矢量(115.040, 10.720, -13.410)) <= 2);
			传送(事件玩家, 矢量(112.580, 10.740, -9.720));
		Else If(相距距离(所选位置(事件玩家), 矢量(112.580, 10.740, -9.720)) <= 2);
			传送(事件玩家, 矢量(115.040, 10.720, -13.410));
		Else If(相距距离(所选位置(事件玩家), 矢量(91.980, 12.720, -103.740)) <= 2);
			传送(事件玩家, 矢量(87.070, 12.860, -101.270));
		Else If(相距距离(所选位置(事件玩家), 矢量(87.070, 12.860, -101.270)) <= 2);
			传送(事件玩家, 矢量(91.980, 12.720, -103.740));
	}
}

规则("传送操作--花村")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
		按钮被按下(事件玩家, 按钮(蹲下)) == 真;
		按钮被按下(事件玩家, 按钮(跳跃)) == 假;
		按钮被按下(事件玩家, 按钮(装填)) == 假;
		按钮被按下(事件玩家, 按钮(技能2)) == 假;
		按钮被按下(事件玩家, 按钮(终极技能)) == 假;
		(当前地图 == 地图(圣诞节花村) || 当前地图 == 地图(花村)) == 真;
		
	}

	动作
	{
		If(相距距离(所选位置(事件玩家), 矢量(76.470, -2, 0.150)) <= 2);
			传送(事件玩家, 矢量(71.460, -1.950, 0.040));
		Else If(相距距离(所选位置(事件玩家), 矢量(71.460, -1.950, 0.040)) <= 2);
			传送(事件玩家, 矢量(76.470, -2, 0.150));
		Else If(相距距离(所选位置(事件玩家), 矢量(13.990, -1, 13.530)) <= 2);
			传送(事件玩家, 矢量(14.060, 0, 8.360));
		Else If(相距距离(所选位置(事件玩家), 矢量(14.060, 0, 8.360)) <= 2);
			传送(事件玩家, 矢量(13.990, -1, 13.530));
		Else If(相距距离(所选位置(事件玩家), 矢量(-38.150, 1, -86.960)) <= 2);
			传送(事件玩家, 矢量(-42.120, 1, -90.140));
		Else If(相距距离(所选位置(事件玩家), 矢量(-42.120, 1, -90.140)) <= 2);
			传送(事件玩家, 矢量(-38.150, 1, -86.960));
	}
}

规则("传送操作--漓江塔")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
		按钮被按下(事件玩家, 按钮(蹲下)) == 真;
		按钮被按下(事件玩家, 按钮(跳跃)) == 假;
		按钮被按下(事件玩家, 按钮(装填)) == 假;
		按钮被按下(事件玩家, 按钮(技能2)) == 假;
		按钮被按下(事件玩家, 按钮(终极技能)) == 假;
		(当前地图 == 地图(漓江塔) || 当前地图 == 地图(春节漓江塔)) == 真;
		
	}

	动作
	{
		If(相距距离(所选位置(事件玩家), 矢量(-54.280, 266.760, 335.240)) <= 2);
			传送(事件玩家, 矢量(-57.890, 267.600, 338.520));
		Else If(相距距离(所选位置(事件玩家), 矢量(-57.890, 267.600, 338.520)) <= 2);
			传送(事件玩家, 矢量(-54.280, 266.760, 335.240));
		Else If(相距距离(所选位置(事件玩家), 矢量(53.810, 266.950, 334.770)) <= 2);
			传送(事件玩家, 矢量(57.190, 267.590, 338.100));
		Else If(相距距离(所选位置(事件玩家), 矢量(57.190, 267.590, 338.100)) <= 2);
			传送(事件玩家, 矢量(53.810, 266.950, 334.770));
		Else If(相距距离(所选位置(事件玩家), 矢量(-65.570, 3.750, -31.460)) <= 2);
			传送(事件玩家, 矢量(-70.520, 4.480, -30.710));
		Else If(相距距离(所选位置(事件玩家), 矢量(-70.520, 4.480, -30.710)) <= 2);
			传送(事件玩家, 矢量(-65.570, 3.750, -31.460));
		Else If(相距距离(所选位置(事件玩家), 矢量(72.960, 4.470, -31.500)) <= 2);
			传送(事件玩家, 矢量(67.680, 3.750, -32.570));
		Else If(相距距离(所选位置(事件玩家), 矢量(67.680, 3.750, -32.570)) <= 2);
			传送(事件玩家, 矢量(72.960, 4.470, -31.500));
		Else If(相距距离(所选位置(事件玩家), 矢量(-69.240, 95.880, 145.790)) <= 2);
			传送(事件玩家, 矢量(-74.320, 96.570, 145.060));
		Else If(相距距离(所选位置(事件玩家), 矢量(-74.320, 96.570, 145.060)) <= 2);
			传送(事件玩家, 矢量(-69.240, 95.880, 145.790));
		Else If(相距距离(所选位置(事件玩家), 矢量(74.510, 96.570, 145.380)) <= 2);
			传送(事件玩家, 矢量(69.220, 95.920, 145.650));
		Else If(相距距离(所选位置(事件玩家), 矢量(69.220, 95.920, 145.650)) <= 2);
			传送(事件玩家, 矢量(74.510, 96.570, 145.380));
	}
}

规则("传送操作--国王大道")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
		按钮被按下(事件玩家, 按钮(蹲下)) == 真;
		按钮被按下(事件玩家, 按钮(跳跃)) == 假;
		按钮被按下(事件玩家, 按钮(装填)) == 假;
		按钮被按下(事件玩家, 按钮(技能2)) == 假;
		按钮被按下(事件玩家, 按钮(终极技能)) == 假;
		(当前地图 == 地图(国王大道) || 当前地图 == 地图(圣诞节国王大道)) == 真;
		
	}

	动作
	{
		If(相距距离(所选位置(事件玩家), 矢量(-3.040, 1.150, 22.330)) <= 2);
			传送(事件玩家, 矢量(-3.960, 0.070, 17.560));
		Else If(相距距离(所选位置(事件玩家), 矢量(-3.960, 0.070, 17.560)) <= 2);
			传送(事件玩家, 矢量(-3.040, 1.150, 22.330));
		Else If(相距距离(所选位置(事件玩家), 矢量(-1.130, 0.040, -38.250)) <= 2);
			传送(事件玩家, 矢量(3.750, -0.770, -38.940));
		Else If(相距距离(所选位置(事件玩家), 矢量(3.750, -0.770, -38.940)) <= 2);
			传送(事件玩家, 矢量(-1.130, 0.040, -38.250));
		Else If(相距距离(所选位置(事件玩家), 矢量(-90.130, 0.940, -27.950)) <= 2);
			传送(事件玩家, 矢量(-93.920, 1.500, -29.430));
		Else If(相距距离(所选位置(事件玩家), 矢量(-93.920, 1.500, -29.430)) <= 2);
			传送(事件玩家, 矢量(-90.130, 0.940, -27.950));
		Else If(相距距离(所选位置(事件玩家), 矢量(-166.340, 0.070, 15.370)) <= 2);
			传送(事件玩家, 矢量(-165.900, 0.070, 20.130));
		Else If(相距距离(所选位置(事件玩家), 矢量(-165.900, 0.070, 20.130)) <= 2);
			传送(事件玩家, 矢量(-166.340, 0.070, 15.370));
	}
}

规则("传送操作--渣客镇")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
		按钮被按下(事件玩家, 按钮(蹲下)) == 真;
		按钮被按下(事件玩家, 按钮(跳跃)) == 假;
		按钮被按下(事件玩家, 按钮(装填)) == 假;
		按钮被按下(事件玩家, 按钮(技能2)) == 假;
		按钮被按下(事件玩家, 按钮(终极技能)) == 假;
		(当前地图 == 地图(渣客镇)) == 真;
		
	}

	动作
	{
		If(相距距离(所选位置(事件玩家), 矢量(45.470, 10, -76.780)) <= 2);
			传送(事件玩家, 矢量(40.170, 10, -76.380));
		Else If(相距距离(所选位置(事件玩家), 矢量(40.170, 10, -76.380)) <= 2);
			传送(事件玩家, 矢量(45.470, 10, -76.780));
		Else If(相距距离(所选位置(事件玩家), 矢量(-39.950, 7.290, -114.920)) <= 2);
			传送(事件玩家, 矢量(-42.750, 6.420, -119.620));
		Else If(相距距离(所选位置(事件玩家), 矢量(-42.750, 6.420, -119.620)) <= 2);
			传送(事件玩家, 矢量(-39.950, 7.290, -114.920));
		Else If(相距距离(所选位置(事件玩家), 矢量(-79.920, 7.430, -171.760)) <= 2);
			传送(事件玩家, 矢量(-80.950, 7.440, -176.630));
		Else If(相距距离(所选位置(事件玩家), 矢量(-80.950, 7.440, -176.630)) <= 2);
			传送(事件玩家, 矢量(-79.920, 7.430, -171.760));
		Else If(相距距离(所选位置(事件玩家), 矢量(-38.620, 4.060, -16.050)) <= 2);
			传送(事件玩家, 矢量(-39.300, 4.270, -10.100));
		Else If(相距距离(所选位置(事件玩家), 矢量(-39.300, 4.270, -10.100)) <= 2);
			传送(事件玩家, 矢量(-38.620, 4.060, -16.050));
		Else If(相距距离(所选位置(事件玩家), 矢量(-56.330, 7.510, -84.990)) <= 2);
			传送(事件玩家, 矢量(-55.250, 9.060, -79.770));
		Else If(相距距离(所选位置(事件玩家), 矢量(-55.250, 9.060, -79.770)) <= 2);
			传送(事件玩家, 矢量(-56.330, 7.510, -84.990));
		Else If(相距距离(所选位置(事件玩家), 矢量(-106.830, 6.440, -107.880)) <= 2);
			传送(事件玩家, 矢量(-111.420, 6.440, -106.840));
		Else If(相距距离(所选位置(事件玩家), 矢量(-111.420, 6.440, -106.840)) <= 2);
			传送(事件玩家, 矢量(-106.830, 6.440, -107.880));
	}
}

规则("传送操作--里阿尔托")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
		按钮被按下(事件玩家, 按钮(蹲下)) == 真;
		按钮被按下(事件玩家, 按钮(跳跃)) == 假;
		按钮被按下(事件玩家, 按钮(装填)) == 假;
		按钮被按下(事件玩家, 按钮(技能2)) == 假;
		按钮被按下(事件玩家, 按钮(终极技能)) == 假;
		(当前地图 == 地图(里阿尔托)) == 真;
		
	}

	动作
	{
		If(相距距离(所选位置(事件玩家), 矢量(119.120, -1.240, -20.550)) <= 2);
			传送(事件玩家, 矢量(113.270, -1.250, -21.090));
		Else If(相距距离(所选位置(事件玩家), 矢量(113.270, -1.250, -21.090)) <= 2);
			传送(事件玩家, 矢量(119.120, -1.240, -20.550));
		Else If(相距距离(所选位置(事件玩家), 矢量(0.740, -0.250, -86.310)) <= 2);
			传送(事件玩家, 矢量(-4.610, -0.380, -85.920));
		Else If(相距距离(所选位置(事件玩家), 矢量(-4.610, -0.380, -85.920)) <= 2);
			传送(事件玩家, 矢量(0.740, -0.250, -86.310));
		Else If(相距距离(所选位置(事件玩家), 矢量(67.140, -0.250, -57.050)) <= 2);
			传送(事件玩家, 矢量(72.110, -0.250, -59.360));
		Else If(相距距离(所选位置(事件玩家), 矢量(72.110, -0.250, -59.360)) <= 2);
			传送(事件玩家, 矢量(67.140, -0.250, -57.050));
		Else If(相距距离(所选位置(事件玩家), 矢量(-15.700, -1.250, -30.500)) <= 2);
			传送(事件玩家, 矢量(-16.440, -1.230, -24.750));
		Else If(相距距离(所选位置(事件玩家), 矢量(-16.440, -1.230, -24.750)) <= 2);
			传送(事件玩家, 矢量(-15.700, -1.250, -30.500));
		Else If(相距距离(所选位置(事件玩家), 矢量(-74.200, 4.750, -148.720)) <= 2);
			传送(事件玩家, 矢量(-74.250, 4.750, -153.080));
		Else If(相距距离(所选位置(事件玩家), 矢量(-74.250, 4.750, -153.080)) <= 2);
			传送(事件玩家, 矢量(-74.200, 4.750, -148.720));
		Else If(相距距离(所选位置(事件玩家), 矢量(-40.860, 1.750, -110.390)) <= 2);
			传送(事件玩家, 矢量(-41.050, 0.530, -115.450));
		Else If(相距距离(所选位置(事件玩家), 矢量(-41.050, 0.530, -115.450)) <= 2);
			传送(事件玩家, 矢量(-40.860, 1.750, -110.390));
	}
}

规则("传送操作--暴-雪世界")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
		按钮被按下(事件玩家, 按钮(蹲下)) == 真;
		按钮被按下(事件玩家, 按钮(跳跃)) == 假;
		按钮被按下(事件玩家, 按钮(装填)) == 假;
		按钮被按下(事件玩家, 按钮(技能2)) == 假;
		按钮被按下(事件玩家, 按钮(终极技能)) == 假;
		(当前地图 == 地图(暴雪世界) || 当前地图 == 地图(圣诞节暴雪世界)) == 真;
		
	}

	动作
	{
		If(相距距离(所选位置(事件玩家), 矢量(3.020, -3.990, -22.900)) <= 2);
			传送(事件玩家, 矢量(2.900, -4.100, -18.260));
		Else If(相距距离(所选位置(事件玩家), 矢量(2.900, -4.100, -18.260)) <= 2);
			传送(事件玩家, 矢量(3.020, -3.990, -22.900));
		Else If(相距距离(所选位置(事件玩家), 矢量(-79.090, 0.790, 96.660)) <= 2);
			传送(事件玩家, 矢量(-83.900, 0.750, 96.870));
		Else If(相距距离(所选位置(事件玩家), 矢量(-83.900, 0.750, 96.870)) <= 2);
			传送(事件玩家, 矢量(-79.090, 0.790, 96.660));
		Else If(相距距离(所选位置(事件玩家), 矢量(-144.760, 0.750, 113.550)) <= 2);
			传送(事件玩家, 矢量(-146.780, 0.750, 118.350));
		Else If(相距距离(所选位置(事件玩家), 矢量(-146.780, 0.750, 118.350)) <= 2);
			传送(事件玩家, 矢量(-144.760, 0.750, 113.550));
		Else If(相距距离(所选位置(事件玩家), 矢量(-72.160, 1.750, 156.250)) <= 2);
			传送(事件玩家, 矢量(-72.970, 1.750, 160.480));
		Else If(相距距离(所选位置(事件玩家), 矢量(-72.970, 1.750, 160.480)) <= 2);
			传送(事件玩家, 矢量(-72.160, 1.750, 156.250));
	}
}

规则("传送操作--釜山")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
		按钮被按下(事件玩家, 按钮(蹲下)) == 真;
		按钮被按下(事件玩家, 按钮(跳跃)) == 假;
		按钮被按下(事件玩家, 按钮(装填)) == 假;
		按钮被按下(事件玩家, 按钮(技能2)) == 假;
		按钮被按下(事件玩家, 按钮(终极技能)) == 假;
		当前地图 == 地图(釜山);
		
	}

	动作
	{
		If(相距距离(所选位置(事件玩家), 矢量(-412.390, 10.110, 157.530)) <= 2);
			传送(事件玩家, 矢量(-406.850, 10.070, 156.910));
		Else If(相距距离(所选位置(事件玩家), 矢量(-406.850, 10.070, 156.910)) <= 2);
			传送(事件玩家, 矢量(-412.390, 10.110, 157.530));
		Else If(相距距离(所选位置(事件玩家), 矢量(-250.480, 10.350, 170.950)) <= 2);
			传送(事件玩家, 矢量(-245.880, 10.360, 171.240));
		Else If(相距距离(所选位置(事件玩家), 矢量(-245.880, 10.360, 171.240)) <= 2);
			传送(事件玩家, 矢量(-250.480, 10.350, 170.950));
		Else If(相距距离(所选位置(事件玩家), 矢量(156.070, 11.100, 261.940)) <= 2);
			传送(事件玩家, 矢量(160.340, 10.100, 260.110));
		Else If(相距距离(所选位置(事件玩家), 矢量(160.340, 10.100, 260.110)) <= 2);
			传送(事件玩家, 矢量(156.070, 11.100, 261.940));
		Else If(相距距离(所选位置(事件玩家), 矢量(283.030, 11.090, 207.640)) <= 2);
			传送(事件玩家, 矢量(278.850, 10.100, 209.360));
		Else If(相距距离(所选位置(事件玩家), 矢量(278.850, 10.100, 209.360)) <= 2);
			传送(事件玩家, 矢量(283.030, 11.090, 207.640));
		Else If(相距距离(所选位置(事件玩家), 矢量(121, 17, -125.350)) <= 2);
			传送(事件玩家, 矢量(116.110, 16.250, -125.490));
		Else If(相距距离(所选位置(事件玩家), 矢量(116.110, 16.250, -125.490)) <= 2);
			传送(事件玩家, 矢量(121, 17, -125.350));
		Else If(相距距离(所选位置(事件玩家), 矢量(-12.090, 16.130, -125.560)) <= 2);
			传送(事件玩家, 矢量(-17.280, 17, -125.590));
		Else If(相距距离(所选位置(事件玩家), 矢量(-17.280, 17, -125.590)) <= 2);
			传送(事件玩家, 矢量(-12.090, 16.130, -125.560));
	}
}

规则("传送操作--月球基地")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
		按钮被按下(事件玩家, 按钮(蹲下)) == 真;
		按钮被按下(事件玩家, 按钮(跳跃)) == 假;
		按钮被按下(事件玩家, 按钮(装填)) == 假;
		按钮被按下(事件玩家, 按钮(技能2)) == 假;
		按钮被按下(事件玩家, 按钮(终极技能)) == 假;
		当前地图 == 地图(“地平线”月球基地);
		
	}

	动作
	{
		If(相距距离(所选位置(事件玩家), 矢量(12.170, 9, -9.430)) <= 2);
			传送(事件玩家, 矢量(15.940, 9, -11.130));
		Else If(相距距离(所选位置(事件玩家), 矢量(15.940, 9, -11.130)) <= 2);
			传送(事件玩家, 矢量(12.170, 9, -9.430));
		Else If(相距距离(所选位置(事件玩家), 矢量(58.700, 8.990, -92.990)) <= 2);
			传送(事件玩家, 矢量(63.710, 9, -92.660));
		Else If(相距距离(所选位置(事件玩家), 矢量(63.710, 9, -92.660)) <= 2);
			传送(事件玩家, 矢量(58.700, 8.990, -92.990));
		Else If(相距距离(所选位置(事件玩家), 矢量(-47.890, 5, -137.350)) <= 2);
			传送(事件玩家, 矢量(-44.150, 5, -140.270));
		Else If(相距距离(所选位置(事件玩家), 矢量(-44.150, 5, -140.270)) <= 2);
			传送(事件玩家, 矢量(-47.890, 5, -137.350));
	}
}

规则("传送操作--哈瓦那")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
		按钮被按下(事件玩家, 按钮(蹲下)) == 真;
		按钮被按下(事件玩家, 按钮(跳跃)) == 假;
		按钮被按下(事件玩家, 按钮(装填)) == 假;
		按钮被按下(事件玩家, 按钮(技能2)) == 假;
		按钮被按下(事件玩家, 按钮(终极技能)) == 假;
		(当前地图 == 地图(哈瓦那)) == 真;
		
	}

	动作
	{
		If(相距距离(所选位置(事件玩家), 矢量(-82.460, 4, -65.590)) <= 2);
			传送(事件玩家, 矢量(-79.250, 4, -62.700));
		Else If(相距距离(所选位置(事件玩家), 矢量(-79.250, 4, -62.700)) <= 2);
			传送(事件玩家, 矢量(-82.460, 4, -65.590));
		Else If(相距距离(所选位置(事件玩家), 矢量(-43.290, 6, -86.130)) <= 2);
			传送(事件玩家, 矢量(-38.570, 6, -86.070));
		Else If(相距距离(所选位置(事件玩家), 矢量(-38.570, 6, -86.070)) <= 2);
			传送(事件玩家, 矢量(-43.290, 6, -86.130));
		Else If(相距距离(所选位置(事件玩家), 矢量(57.210, 4.870, -72.940)) <= 2);
			传送(事件玩家, 矢量(57.240, 6.060, -77.450));
		Else If(相距距离(所选位置(事件玩家), 矢量(57.240, 6.060, -77.450)) <= 2);
			传送(事件玩家, 矢量(57.210, 4.870, -72.940));
		Else If(相距距离(所选位置(事件玩家), 矢量(69.230, 5, -107.010)) <= 2);
			传送(事件玩家, 矢量(69.080, 4.990, -101.650));
		Else If(相距距离(所选位置(事件玩家), 矢量(69.080, 4.990, -101.650)) <= 2);
			传送(事件玩家, 矢量(69.230, 5, -107.010));
		Else If(相距距离(所选位置(事件玩家), 矢量(92.430, 8.030, -33.670)) <= 2);
			传送(事件玩家, 矢量(92.370, 9, -28.880));
		Else If(相距距离(所选位置(事件玩家), 矢量(92.370, 9, -28.880)) <= 2);
			传送(事件玩家, 矢量(92.430, 8.030, -33.670));
		Else If(相距距离(所选位置(事件玩家), 矢量(158.580, 11.010, -62.080)) <= 2);
			传送(事件玩家, 矢量(153.180, 9.990, -62.440));
		Else If(相距距离(所选位置(事件玩家), 矢量(153.180, 9.990, -62.440)) <= 2);
			传送(事件玩家, 矢量(158.580, 11.010, -62.080));
		Else If(相距距离(所选位置(事件玩家), 矢量(1.281, 7.250, -48.435)) <= 2);
			传送(事件玩家, 矢量(1.229, 7.250, -42.409));
		Else If(相距距离(所选位置(事件玩家), 矢量(1.229, 7.250, -42.409)) <= 2);
			传送(事件玩家, 矢量(1.281, 7.250, -48.435));
		Else If(相距距离(所选位置(事件玩家), 矢量(-35.657, 7.094, -17.142)) <= 2);
			传送(事件玩家, 矢量(-34.935, 7.093, -28.184));
		Else If(相距距离(所选位置(事件玩家), 矢量(-34.935, 7.093, -28.184)) <= 2);
			传送(事件玩家, 矢量(-35.657, 7.094, -17.142));
		Else If(相距距离(所选位置(事件玩家), 矢量(-106.240, 5.100, -28.772)) <= 2);
			传送(事件玩家, 矢量(-99.279, 5.100, -37.757));
		Else If(相距距离(所选位置(事件玩家), 矢量(-99.279, 5.100, -37.757)) <= 2);
			传送(事件玩家, 矢量(-106.240, 5.100, -28.772));
		Else If(相距距离(所选位置(事件玩家), 矢量(-79.281, 5.262, -93.094)) <= 2);
			传送(事件玩家, 矢量(-83.951, 5.250, -88.796));
		Else If(相距距离(所选位置(事件玩家), 矢量(-83.951, 5.250, -88.796)) <= 2);
			传送(事件玩家, 矢量(-79.281, 5.262, -93.094));
		Else If(相距距离(所选位置(事件玩家), 矢量(-114.377, 5.100, -85.357)) <= 2);
			传送(事件玩家, 矢量(-113.017, 5.250, -78.268));
		Else If(相距距离(所选位置(事件玩家), 矢量(-113.017, 5.250, -78.268)) <= 2);
			传送(事件玩家, 矢量(-114.377, 5.100, -85.357));
	}
}

规则("传送操作--阿努比斯神殿")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
		按钮被按下(事件玩家, 按钮(蹲下)) == 真;
		按钮被按下(事件玩家, 按钮(跳跃)) == 假;
		按钮被按下(事件玩家, 按钮(装填)) == 假;
		按钮被按下(事件玩家, 按钮(技能2)) == 假;
		按钮被按下(事件玩家, 按钮(终极技能)) == 假;
		(当前地图 == 地图(阿努比斯神殿)) == 真;
		
	}

	动作
	{
		If(相距距离(所选位置(事件玩家), 矢量(-46.776, 2.962, 35.473)) <= 2);
			传送(事件玩家, 矢量(-50.267, 2.959, 33.216));
		Else If(相距距离(所选位置(事件玩家), 矢量(-50.267, 2.959, 33.216)) <= 2);
			传送(事件玩家, 矢量(-46.776, 2.962, 35.473));
		Else If(相距距离(所选位置(事件玩家), 矢量(2.352, 1.665, -19.185)) <= 2);
			传送(事件玩家, 矢量(5.179, 2.223, -23.878));
		Else If(相距距离(所选位置(事件玩家), 矢量(5.179, 2.223, -23.878)) <= 2);
			传送(事件玩家, 矢量(2.352, 1.665, -19.185));
	}
}

规则("传送操作--多拉多")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
		按钮被按下(事件玩家, 按钮(蹲下)) == 真;
		按钮被按下(事件玩家, 按钮(跳跃)) == 假;
		按钮被按下(事件玩家, 按钮(装填)) == 假;
		按钮被按下(事件玩家, 按钮(技能2)) == 假;
		按钮被按下(事件玩家, 按钮(终极技能)) == 假;
		(当前地图 == 地图(多拉多)) == 真;
		
	}

	动作
	{
		If(相距距离(所选位置(事件玩家), 矢量(55.032, 8.212, -35.447)) <= 2);
			传送(事件玩家, 矢量(41.668, 8.462, -55.982));
		Else If(相距距离(所选位置(事件玩家), 矢量(41.668, 8.462, -55.982)) <= 2);
			传送(事件玩家, 矢量(55.032, 8.212, -35.447));
		Else If(相距距离(所选位置(事件玩家), 矢量(142.771, 11.450, -1.233)) <= 2);
			传送(事件玩家, 矢量(162.216, 11.462, -6.691));
		Else If(相距距离(所选位置(事件玩家), 矢量(162.216, 11.462, -6.691)) <= 2);
			传送(事件玩家, 矢量(142.771, 11.450, -1.233));
		Else If(相距距离(所选位置(事件玩家), 矢量(80.706, 14.450, 25.674)) <= 2);
			传送(事件玩家, 矢量(65.702, 15.462, 14.122));
		Else If(相距距离(所选位置(事件玩家), 矢量(65.702, 15.462, 14.122)) <= 2);
			传送(事件玩家, 矢量(80.706, 14.450, 25.674));
		Else If(相距距离(所选位置(事件玩家), 矢量(168.155, 12.450, 46.767)) <= 2);
			传送(事件玩家, 矢量(173.264, 10.934, 47.945));
		Else If(相距距离(所选位置(事件玩家), 矢量(173.264, 10.934, 47.945)) <= 2);
			传送(事件玩家, 矢量(168.155, 12.450, 46.767));
		Else If(相距距离(所选位置(事件玩家), 矢量(207.007, 16.450, 47.105)) <= 2);
			传送(事件玩家, 矢量(243.184, 16.460, 48.640));
		Else If(相距距离(所选位置(事件玩家), 矢量(243.184, 16.460, 48.640)) <= 2);
			传送(事件玩家, 矢量(207.007, 16.450, 47.105));
	}
}

规则("传送操作--好莱坞&万圣节好莱坞")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
		按钮被按下(事件玩家, 按钮(蹲下)) == 真;
		按钮被按下(事件玩家, 按钮(跳跃)) == 假;
		按钮被按下(事件玩家, 按钮(装填)) == 假;
		按钮被按下(事件玩家, 按钮(技能2)) == 假;
		按钮被按下(事件玩家, 按钮(终极技能)) == 假;
		(当前地图 == 地图(万圣节好莱坞) || 当前地图 == 地图(好莱坞)) == 真;
		
	}

	动作
	{
		If(相距距离(所选位置(事件玩家), 矢量(-12.238, 2.257, 70.968)) <= 2);
			传送(事件玩家, 矢量(-12.168, 3.250, 78.201));
		Else If(相距距离(所选位置(事件玩家), 矢量(-12.168, 3.250, 78.201)) <= 2);
			传送(事件玩家, 矢量(-12.238, 2.250, 70.968));
		Else If(相距距离(所选位置(事件玩家), 矢量(-47.659, 3, -3.396)) <= 2);
			传送(事件玩家, 矢量(-51.450, 3, -5.555));
		Else If(相距距离(所选位置(事件玩家), 矢量(-51.450, 3, -5.555)) <= 2);
			传送(事件玩家, 矢量(-47.659, 3, -3.396));
		Else If(相距距离(所选位置(事件玩家), 矢量(-9.271, 2.980, -53.173)) <= 2);
			传送(事件玩家, 矢量(-11.991, 3, -48.274));
		Else If(相距距离(所选位置(事件玩家), 矢量(-11.991, 3, -48.274)) <= 2);
			传送(事件玩家, 矢量(-9.271, 2.980, -53.173));
		Else If(相距距离(所选位置(事件玩家), 矢量(-36.930, 5, -146.763)) <= 2);
			传送(事件玩家, 矢量(-38.745, 5, -154.229));
		Else If(相距距离(所选位置(事件玩家), 矢量(-38.745, 5, -154.229)) <= 2);
			传送(事件玩家, 矢量(-36.930, 5, -146.763));
		Else If(相距距离(所选位置(事件玩家), 矢量(35.830, 4, -53.152)) <= 2);
			传送(事件玩家, 矢量(26.792, 3.981, -53.181));
		Else If(相距距离(所选位置(事件玩家), 矢量(26.792, 3.981, -53.181)) <= 2);
			传送(事件玩家, 矢量(35.890, 4, -53.152));
		Else If(相距距离(所选位置(事件玩家), 矢量(-6.104, 4, -126.797)) <= 2);
			传送(事件玩家, 矢量(-7.157, 4, -130.950));
		Else If(相距距离(所选位置(事件玩家), 矢量(-7.157, 4, -130.950)) <= 2);
			传送(事件玩家, 矢量(-6.104, 4, -126.797));
	}
}

